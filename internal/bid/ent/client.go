// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"cds/bid/ent/migrate"

	"cds/bid/ent/bidapply"
	"cds/bid/ent/bidexpense"
	"cds/bid/ent/bidinfo"
	"cds/bid/ent/bidproject"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BidApply is the client for interacting with the BidApply builders.
	BidApply *BidApplyClient
	// BidExpense is the client for interacting with the BidExpense builders.
	BidExpense *BidExpenseClient
	// BidInfo is the client for interacting with the BidInfo builders.
	BidInfo *BidInfoClient
	// BidProject is the client for interacting with the BidProject builders.
	BidProject *BidProjectClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BidApply = NewBidApplyClient(c.config)
	c.BidExpense = NewBidExpenseClient(c.config)
	c.BidInfo = NewBidInfoClient(c.config)
	c.BidProject = NewBidProjectClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		BidApply:   NewBidApplyClient(cfg),
		BidExpense: NewBidExpenseClient(cfg),
		BidInfo:    NewBidInfoClient(cfg),
		BidProject: NewBidProjectClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		BidApply:   NewBidApplyClient(cfg),
		BidExpense: NewBidExpenseClient(cfg),
		BidInfo:    NewBidInfoClient(cfg),
		BidProject: NewBidProjectClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BidApply.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.BidApply.Use(hooks...)
	c.BidExpense.Use(hooks...)
	c.BidInfo.Use(hooks...)
	c.BidProject.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.BidApply.Intercept(interceptors...)
	c.BidExpense.Intercept(interceptors...)
	c.BidInfo.Intercept(interceptors...)
	c.BidProject.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BidApplyMutation:
		return c.BidApply.mutate(ctx, m)
	case *BidExpenseMutation:
		return c.BidExpense.mutate(ctx, m)
	case *BidInfoMutation:
		return c.BidInfo.mutate(ctx, m)
	case *BidProjectMutation:
		return c.BidProject.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BidApplyClient is a client for the BidApply schema.
type BidApplyClient struct {
	config
}

// NewBidApplyClient returns a client for the BidApply from the given config.
func NewBidApplyClient(c config) *BidApplyClient {
	return &BidApplyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bidapply.Hooks(f(g(h())))`.
func (c *BidApplyClient) Use(hooks ...Hook) {
	c.hooks.BidApply = append(c.hooks.BidApply, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bidapply.Intercept(f(g(h())))`.
func (c *BidApplyClient) Intercept(interceptors ...Interceptor) {
	c.inters.BidApply = append(c.inters.BidApply, interceptors...)
}

// Create returns a builder for creating a BidApply entity.
func (c *BidApplyClient) Create() *BidApplyCreate {
	mutation := newBidApplyMutation(c.config, OpCreate)
	return &BidApplyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BidApply entities.
func (c *BidApplyClient) CreateBulk(builders ...*BidApplyCreate) *BidApplyCreateBulk {
	return &BidApplyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BidApplyClient) MapCreateBulk(slice any, setFunc func(*BidApplyCreate, int)) *BidApplyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BidApplyCreateBulk{err: fmt.Errorf("calling to BidApplyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BidApplyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BidApplyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BidApply.
func (c *BidApplyClient) Update() *BidApplyUpdate {
	mutation := newBidApplyMutation(c.config, OpUpdate)
	return &BidApplyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BidApplyClient) UpdateOne(_m *BidApply) *BidApplyUpdateOne {
	mutation := newBidApplyMutation(c.config, OpUpdateOne, withBidApply(_m))
	return &BidApplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BidApplyClient) UpdateOneID(id string) *BidApplyUpdateOne {
	mutation := newBidApplyMutation(c.config, OpUpdateOne, withBidApplyID(id))
	return &BidApplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BidApply.
func (c *BidApplyClient) Delete() *BidApplyDelete {
	mutation := newBidApplyMutation(c.config, OpDelete)
	return &BidApplyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BidApplyClient) DeleteOne(_m *BidApply) *BidApplyDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BidApplyClient) DeleteOneID(id string) *BidApplyDeleteOne {
	builder := c.Delete().Where(bidapply.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BidApplyDeleteOne{builder}
}

// Query returns a query builder for BidApply.
func (c *BidApplyClient) Query() *BidApplyQuery {
	return &BidApplyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBidApply},
		inters: c.Interceptors(),
	}
}

// Get returns a BidApply entity by its id.
func (c *BidApplyClient) Get(ctx context.Context, id string) (*BidApply, error) {
	return c.Query().Where(bidapply.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BidApplyClient) GetX(ctx context.Context, id string) *BidApply {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a BidApply.
func (c *BidApplyClient) QueryProject(_m *BidApply) *BidProjectQuery {
	query := (&BidProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bidapply.Table, bidapply.FieldID, id),
			sqlgraph.To(bidproject.Table, bidproject.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, bidapply.ProjectTable, bidapply.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BidApplyClient) Hooks() []Hook {
	return c.hooks.BidApply
}

// Interceptors returns the client interceptors.
func (c *BidApplyClient) Interceptors() []Interceptor {
	return c.inters.BidApply
}

func (c *BidApplyClient) mutate(ctx context.Context, m *BidApplyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BidApplyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BidApplyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BidApplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BidApplyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BidApply mutation op: %q", m.Op())
	}
}

// BidExpenseClient is a client for the BidExpense schema.
type BidExpenseClient struct {
	config
}

// NewBidExpenseClient returns a client for the BidExpense from the given config.
func NewBidExpenseClient(c config) *BidExpenseClient {
	return &BidExpenseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bidexpense.Hooks(f(g(h())))`.
func (c *BidExpenseClient) Use(hooks ...Hook) {
	c.hooks.BidExpense = append(c.hooks.BidExpense, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bidexpense.Intercept(f(g(h())))`.
func (c *BidExpenseClient) Intercept(interceptors ...Interceptor) {
	c.inters.BidExpense = append(c.inters.BidExpense, interceptors...)
}

// Create returns a builder for creating a BidExpense entity.
func (c *BidExpenseClient) Create() *BidExpenseCreate {
	mutation := newBidExpenseMutation(c.config, OpCreate)
	return &BidExpenseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BidExpense entities.
func (c *BidExpenseClient) CreateBulk(builders ...*BidExpenseCreate) *BidExpenseCreateBulk {
	return &BidExpenseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BidExpenseClient) MapCreateBulk(slice any, setFunc func(*BidExpenseCreate, int)) *BidExpenseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BidExpenseCreateBulk{err: fmt.Errorf("calling to BidExpenseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BidExpenseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BidExpenseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BidExpense.
func (c *BidExpenseClient) Update() *BidExpenseUpdate {
	mutation := newBidExpenseMutation(c.config, OpUpdate)
	return &BidExpenseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BidExpenseClient) UpdateOne(_m *BidExpense) *BidExpenseUpdateOne {
	mutation := newBidExpenseMutation(c.config, OpUpdateOne, withBidExpense(_m))
	return &BidExpenseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BidExpenseClient) UpdateOneID(id string) *BidExpenseUpdateOne {
	mutation := newBidExpenseMutation(c.config, OpUpdateOne, withBidExpenseID(id))
	return &BidExpenseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BidExpense.
func (c *BidExpenseClient) Delete() *BidExpenseDelete {
	mutation := newBidExpenseMutation(c.config, OpDelete)
	return &BidExpenseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BidExpenseClient) DeleteOne(_m *BidExpense) *BidExpenseDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BidExpenseClient) DeleteOneID(id string) *BidExpenseDeleteOne {
	builder := c.Delete().Where(bidexpense.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BidExpenseDeleteOne{builder}
}

// Query returns a query builder for BidExpense.
func (c *BidExpenseClient) Query() *BidExpenseQuery {
	return &BidExpenseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBidExpense},
		inters: c.Interceptors(),
	}
}

// Get returns a BidExpense entity by its id.
func (c *BidExpenseClient) Get(ctx context.Context, id string) (*BidExpense, error) {
	return c.Query().Where(bidexpense.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BidExpenseClient) GetX(ctx context.Context, id string) *BidExpense {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a BidExpense.
func (c *BidExpenseClient) QueryProject(_m *BidExpense) *BidProjectQuery {
	query := (&BidProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bidexpense.Table, bidexpense.FieldID, id),
			sqlgraph.To(bidproject.Table, bidproject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bidexpense.ProjectTable, bidexpense.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BidExpenseClient) Hooks() []Hook {
	return c.hooks.BidExpense
}

// Interceptors returns the client interceptors.
func (c *BidExpenseClient) Interceptors() []Interceptor {
	return c.inters.BidExpense
}

func (c *BidExpenseClient) mutate(ctx context.Context, m *BidExpenseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BidExpenseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BidExpenseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BidExpenseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BidExpenseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BidExpense mutation op: %q", m.Op())
	}
}

// BidInfoClient is a client for the BidInfo schema.
type BidInfoClient struct {
	config
}

// NewBidInfoClient returns a client for the BidInfo from the given config.
func NewBidInfoClient(c config) *BidInfoClient {
	return &BidInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bidinfo.Hooks(f(g(h())))`.
func (c *BidInfoClient) Use(hooks ...Hook) {
	c.hooks.BidInfo = append(c.hooks.BidInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bidinfo.Intercept(f(g(h())))`.
func (c *BidInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.BidInfo = append(c.inters.BidInfo, interceptors...)
}

// Create returns a builder for creating a BidInfo entity.
func (c *BidInfoClient) Create() *BidInfoCreate {
	mutation := newBidInfoMutation(c.config, OpCreate)
	return &BidInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BidInfo entities.
func (c *BidInfoClient) CreateBulk(builders ...*BidInfoCreate) *BidInfoCreateBulk {
	return &BidInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BidInfoClient) MapCreateBulk(slice any, setFunc func(*BidInfoCreate, int)) *BidInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BidInfoCreateBulk{err: fmt.Errorf("calling to BidInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BidInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BidInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BidInfo.
func (c *BidInfoClient) Update() *BidInfoUpdate {
	mutation := newBidInfoMutation(c.config, OpUpdate)
	return &BidInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BidInfoClient) UpdateOne(_m *BidInfo) *BidInfoUpdateOne {
	mutation := newBidInfoMutation(c.config, OpUpdateOne, withBidInfo(_m))
	return &BidInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BidInfoClient) UpdateOneID(id int) *BidInfoUpdateOne {
	mutation := newBidInfoMutation(c.config, OpUpdateOne, withBidInfoID(id))
	return &BidInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BidInfo.
func (c *BidInfoClient) Delete() *BidInfoDelete {
	mutation := newBidInfoMutation(c.config, OpDelete)
	return &BidInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BidInfoClient) DeleteOne(_m *BidInfo) *BidInfoDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BidInfoClient) DeleteOneID(id int) *BidInfoDeleteOne {
	builder := c.Delete().Where(bidinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BidInfoDeleteOne{builder}
}

// Query returns a query builder for BidInfo.
func (c *BidInfoClient) Query() *BidInfoQuery {
	return &BidInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBidInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a BidInfo entity by its id.
func (c *BidInfoClient) Get(ctx context.Context, id int) (*BidInfo, error) {
	return c.Query().Where(bidinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BidInfoClient) GetX(ctx context.Context, id int) *BidInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BidInfoClient) Hooks() []Hook {
	return c.hooks.BidInfo
}

// Interceptors returns the client interceptors.
func (c *BidInfoClient) Interceptors() []Interceptor {
	return c.inters.BidInfo
}

func (c *BidInfoClient) mutate(ctx context.Context, m *BidInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BidInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BidInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BidInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BidInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BidInfo mutation op: %q", m.Op())
	}
}

// BidProjectClient is a client for the BidProject schema.
type BidProjectClient struct {
	config
}

// NewBidProjectClient returns a client for the BidProject from the given config.
func NewBidProjectClient(c config) *BidProjectClient {
	return &BidProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bidproject.Hooks(f(g(h())))`.
func (c *BidProjectClient) Use(hooks ...Hook) {
	c.hooks.BidProject = append(c.hooks.BidProject, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bidproject.Intercept(f(g(h())))`.
func (c *BidProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.BidProject = append(c.inters.BidProject, interceptors...)
}

// Create returns a builder for creating a BidProject entity.
func (c *BidProjectClient) Create() *BidProjectCreate {
	mutation := newBidProjectMutation(c.config, OpCreate)
	return &BidProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BidProject entities.
func (c *BidProjectClient) CreateBulk(builders ...*BidProjectCreate) *BidProjectCreateBulk {
	return &BidProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BidProjectClient) MapCreateBulk(slice any, setFunc func(*BidProjectCreate, int)) *BidProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BidProjectCreateBulk{err: fmt.Errorf("calling to BidProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BidProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BidProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BidProject.
func (c *BidProjectClient) Update() *BidProjectUpdate {
	mutation := newBidProjectMutation(c.config, OpUpdate)
	return &BidProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BidProjectClient) UpdateOne(_m *BidProject) *BidProjectUpdateOne {
	mutation := newBidProjectMutation(c.config, OpUpdateOne, withBidProject(_m))
	return &BidProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BidProjectClient) UpdateOneID(id string) *BidProjectUpdateOne {
	mutation := newBidProjectMutation(c.config, OpUpdateOne, withBidProjectID(id))
	return &BidProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BidProject.
func (c *BidProjectClient) Delete() *BidProjectDelete {
	mutation := newBidProjectMutation(c.config, OpDelete)
	return &BidProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BidProjectClient) DeleteOne(_m *BidProject) *BidProjectDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BidProjectClient) DeleteOneID(id string) *BidProjectDeleteOne {
	builder := c.Delete().Where(bidproject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BidProjectDeleteOne{builder}
}

// Query returns a query builder for BidProject.
func (c *BidProjectClient) Query() *BidProjectQuery {
	return &BidProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBidProject},
		inters: c.Interceptors(),
	}
}

// Get returns a BidProject entity by its id.
func (c *BidProjectClient) Get(ctx context.Context, id string) (*BidProject, error) {
	return c.Query().Where(bidproject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BidProjectClient) GetX(ctx context.Context, id string) *BidProject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApply queries the apply edge of a BidProject.
func (c *BidProjectClient) QueryApply(_m *BidProject) *BidApplyQuery {
	query := (&BidApplyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bidproject.Table, bidproject.FieldID, id),
			sqlgraph.To(bidapply.Table, bidapply.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, bidproject.ApplyTable, bidproject.ApplyColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExpense queries the expense edge of a BidProject.
func (c *BidProjectClient) QueryExpense(_m *BidProject) *BidExpenseQuery {
	query := (&BidExpenseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bidproject.Table, bidproject.FieldID, id),
			sqlgraph.To(bidexpense.Table, bidexpense.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bidproject.ExpenseTable, bidproject.ExpenseColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BidProjectClient) Hooks() []Hook {
	return c.hooks.BidProject
}

// Interceptors returns the client interceptors.
func (c *BidProjectClient) Interceptors() []Interceptor {
	return c.inters.BidProject
}

func (c *BidProjectClient) mutate(ctx context.Context, m *BidProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BidProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BidProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BidProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BidProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BidProject mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		BidApply, BidExpense, BidInfo, BidProject []ent.Hook
	}
	inters struct {
		BidApply, BidExpense, BidInfo, BidProject []ent.Interceptor
	}
)
