// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cds/bid/ent/bidinfo"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BidInfoCreate is the builder for creating a BidInfo entity.
type BidInfoCreate struct {
	config
	mutation *BidInfoMutation
	hooks    []Hook
}

// SetCreateAt sets the "create_at" field.
func (_c *BidInfoCreate) SetCreateAt(v time.Time) *BidInfoCreate {
	_c.mutation.SetCreateAt(v)
	return _c
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (_c *BidInfoCreate) SetNillableCreateAt(v *time.Time) *BidInfoCreate {
	if v != nil {
		_c.SetCreateAt(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *BidInfoCreate) SetCreateBy(v string) *BidInfoCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *BidInfoCreate) SetNillableCreateBy(v *string) *BidInfoCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateAt sets the "update_at" field.
func (_c *BidInfoCreate) SetUpdateAt(v time.Time) *BidInfoCreate {
	_c.mutation.SetUpdateAt(v)
	return _c
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (_c *BidInfoCreate) SetNillableUpdateAt(v *time.Time) *BidInfoCreate {
	if v != nil {
		_c.SetUpdateAt(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *BidInfoCreate) SetUpdateBy(v string) *BidInfoCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *BidInfoCreate) SetNillableUpdateBy(v *string) *BidInfoCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// Mutation returns the BidInfoMutation object of the builder.
func (_c *BidInfoCreate) Mutation() *BidInfoMutation {
	return _c.mutation
}

// Save creates the BidInfo in the database.
func (_c *BidInfoCreate) Save(ctx context.Context) (*BidInfo, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BidInfoCreate) SaveX(ctx context.Context) *BidInfo {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BidInfoCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BidInfoCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BidInfoCreate) defaults() {
	if _, ok := _c.mutation.CreateAt(); !ok {
		v := bidinfo.DefaultCreateAt()
		_c.mutation.SetCreateAt(v)
	}
	if _, ok := _c.mutation.UpdateAt(); !ok {
		v := bidinfo.DefaultUpdateAt()
		_c.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BidInfoCreate) check() error {
	if _, ok := _c.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "BidInfo.create_at"`)}
	}
	if v, ok := _c.mutation.CreateBy(); ok {
		if err := bidinfo.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`ent: validator failed for field "BidInfo.create_by": %w`, err)}
		}
	}
	if _, ok := _c.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "BidInfo.update_at"`)}
	}
	if v, ok := _c.mutation.UpdateBy(); ok {
		if err := bidinfo.UpdateByValidator(v); err != nil {
			return &ValidationError{Name: "update_by", err: fmt.Errorf(`ent: validator failed for field "BidInfo.update_by": %w`, err)}
		}
	}
	return nil
}

func (_c *BidInfoCreate) sqlSave(ctx context.Context) (*BidInfo, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BidInfoCreate) createSpec() (*BidInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &BidInfo{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(bidinfo.Table, sqlgraph.NewFieldSpec(bidinfo.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.CreateAt(); ok {
		_spec.SetField(bidinfo.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(bidinfo.FieldCreateBy, field.TypeString, value)
		_node.CreateBy = &value
	}
	if value, ok := _c.mutation.UpdateAt(); ok {
		_spec.SetField(bidinfo.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(bidinfo.FieldUpdateBy, field.TypeString, value)
		_node.UpdateBy = &value
	}
	return _node, _spec
}

// BidInfoCreateBulk is the builder for creating many BidInfo entities in bulk.
type BidInfoCreateBulk struct {
	config
	err      error
	builders []*BidInfoCreate
}

// Save creates the BidInfo entities in the database.
func (_c *BidInfoCreateBulk) Save(ctx context.Context) ([]*BidInfo, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BidInfo, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BidInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BidInfoCreateBulk) SaveX(ctx context.Context) []*BidInfo {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BidInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BidInfoCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
