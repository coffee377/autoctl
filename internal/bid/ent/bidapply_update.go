// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cds/bid/ent/bidapply"
	"cds/bid/ent/bidproject"
	"cds/bid/ent/predicate"
	"cds/bid/ent/schema"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// BidApplyUpdate is the builder for updating BidApply entities.
type BidApplyUpdate struct {
	config
	hooks     []Hook
	mutation  *BidApplyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BidApplyUpdate builder.
func (_u *BidApplyUpdate) Where(ps ...predicate.BidApply) *BidApplyUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetBusinessID sets the "business_id" field.
func (_u *BidApplyUpdate) SetBusinessID(v string) *BidApplyUpdate {
	_u.mutation.SetBusinessID(v)
	return _u
}

// SetNillableBusinessID sets the "business_id" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableBusinessID(v *string) *BidApplyUpdate {
	if v != nil {
		_u.SetBusinessID(*v)
	}
	return _u
}

// SetInstanceID sets the "instance_id" field.
func (_u *BidApplyUpdate) SetInstanceID(v string) *BidApplyUpdate {
	_u.mutation.SetInstanceID(v)
	return _u
}

// SetNillableInstanceID sets the "instance_id" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableInstanceID(v *string) *BidApplyUpdate {
	if v != nil {
		_u.SetInstanceID(*v)
	}
	return _u
}

// SetProjectID sets the "project_id" field.
func (_u *BidApplyUpdate) SetProjectID(v string) *BidApplyUpdate {
	_u.mutation.SetProjectID(v)
	return _u
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableProjectID(v *string) *BidApplyUpdate {
	if v != nil {
		_u.SetProjectID(*v)
	}
	return _u
}

// SetPurchaserName sets the "purchaser_name" field.
func (_u *BidApplyUpdate) SetPurchaserName(v string) *BidApplyUpdate {
	_u.mutation.SetPurchaserName(v)
	return _u
}

// SetNillablePurchaserName sets the "purchaser_name" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillablePurchaserName(v *string) *BidApplyUpdate {
	if v != nil {
		_u.SetPurchaserName(*v)
	}
	return _u
}

// ClearPurchaserName clears the value of the "purchaser_name" field.
func (_u *BidApplyUpdate) ClearPurchaserName() *BidApplyUpdate {
	_u.mutation.ClearPurchaserName()
	return _u
}

// SetBidType sets the "bid_type" field.
func (_u *BidApplyUpdate) SetBidType(v bidapply.BidType) *BidApplyUpdate {
	_u.mutation.SetBidType(v)
	return _u
}

// SetNillableBidType sets the "bid_type" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableBidType(v *bidapply.BidType) *BidApplyUpdate {
	if v != nil {
		_u.SetBidType(*v)
	}
	return _u
}

// SetAgencyName sets the "agency_name" field.
func (_u *BidApplyUpdate) SetAgencyName(v string) *BidApplyUpdate {
	_u.mutation.SetAgencyName(v)
	return _u
}

// SetNillableAgencyName sets the "agency_name" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableAgencyName(v *string) *BidApplyUpdate {
	if v != nil {
		_u.SetAgencyName(*v)
	}
	return _u
}

// ClearAgencyName clears the value of the "agency_name" field.
func (_u *BidApplyUpdate) ClearAgencyName() *BidApplyUpdate {
	_u.mutation.ClearAgencyName()
	return _u
}

// SetAgencyContact sets the "agency_contact" field.
func (_u *BidApplyUpdate) SetAgencyContact(v string) *BidApplyUpdate {
	_u.mutation.SetAgencyContact(v)
	return _u
}

// SetNillableAgencyContact sets the "agency_contact" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableAgencyContact(v *string) *BidApplyUpdate {
	if v != nil {
		_u.SetAgencyContact(*v)
	}
	return _u
}

// ClearAgencyContact clears the value of the "agency_contact" field.
func (_u *BidApplyUpdate) ClearAgencyContact() *BidApplyUpdate {
	_u.mutation.ClearAgencyContact()
	return _u
}

// SetOpeningDate sets the "opening_date" field.
func (_u *BidApplyUpdate) SetOpeningDate(v time.Time) *BidApplyUpdate {
	_u.mutation.SetOpeningDate(v)
	return _u
}

// SetNillableOpeningDate sets the "opening_date" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableOpeningDate(v *time.Time) *BidApplyUpdate {
	if v != nil {
		_u.SetOpeningDate(*v)
	}
	return _u
}

// ClearOpeningDate clears the value of the "opening_date" field.
func (_u *BidApplyUpdate) ClearOpeningDate() *BidApplyUpdate {
	_u.mutation.ClearOpeningDate()
	return _u
}

// SetNoticeURL sets the "notice_url" field.
func (_u *BidApplyUpdate) SetNoticeURL(v string) *BidApplyUpdate {
	_u.mutation.SetNoticeURL(v)
	return _u
}

// SetNillableNoticeURL sets the "notice_url" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableNoticeURL(v *string) *BidApplyUpdate {
	if v != nil {
		_u.SetNoticeURL(*v)
	}
	return _u
}

// ClearNoticeURL clears the value of the "notice_url" field.
func (_u *BidApplyUpdate) ClearNoticeURL() *BidApplyUpdate {
	_u.mutation.ClearNoticeURL()
	return _u
}

// SetBudgetAmount sets the "budget_amount" field.
func (_u *BidApplyUpdate) SetBudgetAmount(v float64) *BidApplyUpdate {
	_u.mutation.ResetBudgetAmount()
	_u.mutation.SetBudgetAmount(v)
	return _u
}

// SetNillableBudgetAmount sets the "budget_amount" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableBudgetAmount(v *float64) *BidApplyUpdate {
	if v != nil {
		_u.SetBudgetAmount(*v)
	}
	return _u
}

// AddBudgetAmount adds value to the "budget_amount" field.
func (_u *BidApplyUpdate) AddBudgetAmount(v float64) *BidApplyUpdate {
	_u.mutation.AddBudgetAmount(v)
	return _u
}

// SetRemark sets the "remark" field.
func (_u *BidApplyUpdate) SetRemark(v string) *BidApplyUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableRemark(v *string) *BidApplyUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *BidApplyUpdate) ClearRemark() *BidApplyUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetAttachments sets the "attachments" field.
func (_u *BidApplyUpdate) SetAttachments(v []schema.Attachment) *BidApplyUpdate {
	_u.mutation.SetAttachments(v)
	return _u
}

// AppendAttachments appends value to the "attachments" field.
func (_u *BidApplyUpdate) AppendAttachments(v []schema.Attachment) *BidApplyUpdate {
	_u.mutation.AppendAttachments(v)
	return _u
}

// ClearAttachments clears the value of the "attachments" field.
func (_u *BidApplyUpdate) ClearAttachments() *BidApplyUpdate {
	_u.mutation.ClearAttachments()
	return _u
}

// SetApprovalStatus sets the "approval_status" field.
func (_u *BidApplyUpdate) SetApprovalStatus(v string) *BidApplyUpdate {
	_u.mutation.SetApprovalStatus(v)
	return _u
}

// SetNillableApprovalStatus sets the "approval_status" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableApprovalStatus(v *string) *BidApplyUpdate {
	if v != nil {
		_u.SetApprovalStatus(*v)
	}
	return _u
}

// SetDone sets the "done" field.
func (_u *BidApplyUpdate) SetDone(v bool) *BidApplyUpdate {
	_u.mutation.SetDone(v)
	return _u
}

// SetNillableDone sets the "done" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableDone(v *bool) *BidApplyUpdate {
	if v != nil {
		_u.SetDone(*v)
	}
	return _u
}

// SetCreateAt sets the "create_at" field.
func (_u *BidApplyUpdate) SetCreateAt(v time.Time) *BidApplyUpdate {
	_u.mutation.SetCreateAt(v)
	return _u
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableCreateAt(v *time.Time) *BidApplyUpdate {
	if v != nil {
		_u.SetCreateAt(*v)
	}
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *BidApplyUpdate) SetCreateBy(v string) *BidApplyUpdate {
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableCreateBy(v *string) *BidApplyUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *BidApplyUpdate) ClearCreateBy() *BidApplyUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateAt sets the "update_at" field.
func (_u *BidApplyUpdate) SetUpdateAt(v time.Time) *BidApplyUpdate {
	_u.mutation.SetUpdateAt(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *BidApplyUpdate) SetUpdateBy(v string) *BidApplyUpdate {
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *BidApplyUpdate) SetNillableUpdateBy(v *string) *BidApplyUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *BidApplyUpdate) ClearUpdateBy() *BidApplyUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetProject sets the "project" edge to the BidProject entity.
func (_u *BidApplyUpdate) SetProject(v *BidProject) *BidApplyUpdate {
	return _u.SetProjectID(v.ID)
}

// Mutation returns the BidApplyMutation object of the builder.
func (_u *BidApplyUpdate) Mutation() *BidApplyMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the BidProject entity.
func (_u *BidApplyUpdate) ClearProject() *BidApplyUpdate {
	_u.mutation.ClearProject()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BidApplyUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BidApplyUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BidApplyUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BidApplyUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BidApplyUpdate) defaults() {
	if _, ok := _u.mutation.UpdateAt(); !ok {
		v := bidapply.UpdateDefaultUpdateAt()
		_u.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BidApplyUpdate) check() error {
	if v, ok := _u.mutation.BusinessID(); ok {
		if err := bidapply.BusinessIDValidator(v); err != nil {
			return &ValidationError{Name: "business_id", err: fmt.Errorf(`ent: validator failed for field "BidApply.business_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.InstanceID(); ok {
		if err := bidapply.InstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "instance_id", err: fmt.Errorf(`ent: validator failed for field "BidApply.instance_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProjectID(); ok {
		if err := bidapply.ProjectIDValidator(v); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`ent: validator failed for field "BidApply.project_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PurchaserName(); ok {
		if err := bidapply.PurchaserNameValidator(v); err != nil {
			return &ValidationError{Name: "purchaser_name", err: fmt.Errorf(`ent: validator failed for field "BidApply.purchaser_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BidType(); ok {
		if err := bidapply.BidTypeValidator(v); err != nil {
			return &ValidationError{Name: "bid_type", err: fmt.Errorf(`ent: validator failed for field "BidApply.bid_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AgencyName(); ok {
		if err := bidapply.AgencyNameValidator(v); err != nil {
			return &ValidationError{Name: "agency_name", err: fmt.Errorf(`ent: validator failed for field "BidApply.agency_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AgencyContact(); ok {
		if err := bidapply.AgencyContactValidator(v); err != nil {
			return &ValidationError{Name: "agency_contact", err: fmt.Errorf(`ent: validator failed for field "BidApply.agency_contact": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CreateBy(); ok {
		if err := bidapply.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`ent: validator failed for field "BidApply.create_by": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UpdateBy(); ok {
		if err := bidapply.UpdateByValidator(v); err != nil {
			return &ValidationError{Name: "update_by", err: fmt.Errorf(`ent: validator failed for field "BidApply.update_by": %w`, err)}
		}
	}
	if _u.mutation.ProjectCleared() && len(_u.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BidApply.project"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *BidApplyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BidApplyUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *BidApplyUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bidapply.Table, bidapply.Columns, sqlgraph.NewFieldSpec(bidapply.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.BusinessID(); ok {
		_spec.SetField(bidapply.FieldBusinessID, field.TypeString, value)
	}
	if value, ok := _u.mutation.InstanceID(); ok {
		_spec.SetField(bidapply.FieldInstanceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.PurchaserName(); ok {
		_spec.SetField(bidapply.FieldPurchaserName, field.TypeString, value)
	}
	if _u.mutation.PurchaserNameCleared() {
		_spec.ClearField(bidapply.FieldPurchaserName, field.TypeString)
	}
	if value, ok := _u.mutation.BidType(); ok {
		_spec.SetField(bidapply.FieldBidType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.AgencyName(); ok {
		_spec.SetField(bidapply.FieldAgencyName, field.TypeString, value)
	}
	if _u.mutation.AgencyNameCleared() {
		_spec.ClearField(bidapply.FieldAgencyName, field.TypeString)
	}
	if value, ok := _u.mutation.AgencyContact(); ok {
		_spec.SetField(bidapply.FieldAgencyContact, field.TypeString, value)
	}
	if _u.mutation.AgencyContactCleared() {
		_spec.ClearField(bidapply.FieldAgencyContact, field.TypeString)
	}
	if value, ok := _u.mutation.OpeningDate(); ok {
		_spec.SetField(bidapply.FieldOpeningDate, field.TypeTime, value)
	}
	if _u.mutation.OpeningDateCleared() {
		_spec.ClearField(bidapply.FieldOpeningDate, field.TypeTime)
	}
	if value, ok := _u.mutation.NoticeURL(); ok {
		_spec.SetField(bidapply.FieldNoticeURL, field.TypeString, value)
	}
	if _u.mutation.NoticeURLCleared() {
		_spec.ClearField(bidapply.FieldNoticeURL, field.TypeString)
	}
	if value, ok := _u.mutation.BudgetAmount(); ok {
		_spec.SetField(bidapply.FieldBudgetAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBudgetAmount(); ok {
		_spec.AddField(bidapply.FieldBudgetAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(bidapply.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(bidapply.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.Attachments(); ok {
		_spec.SetField(bidapply.FieldAttachments, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAttachments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, bidapply.FieldAttachments, value)
		})
	}
	if _u.mutation.AttachmentsCleared() {
		_spec.ClearField(bidapply.FieldAttachments, field.TypeJSON)
	}
	if value, ok := _u.mutation.ApprovalStatus(); ok {
		_spec.SetField(bidapply.FieldApprovalStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Done(); ok {
		_spec.SetField(bidapply.FieldDone, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreateAt(); ok {
		_spec.SetField(bidapply.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(bidapply.FieldCreateBy, field.TypeString, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(bidapply.FieldCreateBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdateAt(); ok {
		_spec.SetField(bidapply.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(bidapply.FieldUpdateBy, field.TypeString, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(bidapply.FieldUpdateBy, field.TypeString)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bidapply.ProjectTable,
			Columns: []string{bidapply.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidproject.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bidapply.ProjectTable,
			Columns: []string{bidapply.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidproject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bidapply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BidApplyUpdateOne is the builder for updating a single BidApply entity.
type BidApplyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BidApplyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetBusinessID sets the "business_id" field.
func (_u *BidApplyUpdateOne) SetBusinessID(v string) *BidApplyUpdateOne {
	_u.mutation.SetBusinessID(v)
	return _u
}

// SetNillableBusinessID sets the "business_id" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableBusinessID(v *string) *BidApplyUpdateOne {
	if v != nil {
		_u.SetBusinessID(*v)
	}
	return _u
}

// SetInstanceID sets the "instance_id" field.
func (_u *BidApplyUpdateOne) SetInstanceID(v string) *BidApplyUpdateOne {
	_u.mutation.SetInstanceID(v)
	return _u
}

// SetNillableInstanceID sets the "instance_id" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableInstanceID(v *string) *BidApplyUpdateOne {
	if v != nil {
		_u.SetInstanceID(*v)
	}
	return _u
}

// SetProjectID sets the "project_id" field.
func (_u *BidApplyUpdateOne) SetProjectID(v string) *BidApplyUpdateOne {
	_u.mutation.SetProjectID(v)
	return _u
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableProjectID(v *string) *BidApplyUpdateOne {
	if v != nil {
		_u.SetProjectID(*v)
	}
	return _u
}

// SetPurchaserName sets the "purchaser_name" field.
func (_u *BidApplyUpdateOne) SetPurchaserName(v string) *BidApplyUpdateOne {
	_u.mutation.SetPurchaserName(v)
	return _u
}

// SetNillablePurchaserName sets the "purchaser_name" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillablePurchaserName(v *string) *BidApplyUpdateOne {
	if v != nil {
		_u.SetPurchaserName(*v)
	}
	return _u
}

// ClearPurchaserName clears the value of the "purchaser_name" field.
func (_u *BidApplyUpdateOne) ClearPurchaserName() *BidApplyUpdateOne {
	_u.mutation.ClearPurchaserName()
	return _u
}

// SetBidType sets the "bid_type" field.
func (_u *BidApplyUpdateOne) SetBidType(v bidapply.BidType) *BidApplyUpdateOne {
	_u.mutation.SetBidType(v)
	return _u
}

// SetNillableBidType sets the "bid_type" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableBidType(v *bidapply.BidType) *BidApplyUpdateOne {
	if v != nil {
		_u.SetBidType(*v)
	}
	return _u
}

// SetAgencyName sets the "agency_name" field.
func (_u *BidApplyUpdateOne) SetAgencyName(v string) *BidApplyUpdateOne {
	_u.mutation.SetAgencyName(v)
	return _u
}

// SetNillableAgencyName sets the "agency_name" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableAgencyName(v *string) *BidApplyUpdateOne {
	if v != nil {
		_u.SetAgencyName(*v)
	}
	return _u
}

// ClearAgencyName clears the value of the "agency_name" field.
func (_u *BidApplyUpdateOne) ClearAgencyName() *BidApplyUpdateOne {
	_u.mutation.ClearAgencyName()
	return _u
}

// SetAgencyContact sets the "agency_contact" field.
func (_u *BidApplyUpdateOne) SetAgencyContact(v string) *BidApplyUpdateOne {
	_u.mutation.SetAgencyContact(v)
	return _u
}

// SetNillableAgencyContact sets the "agency_contact" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableAgencyContact(v *string) *BidApplyUpdateOne {
	if v != nil {
		_u.SetAgencyContact(*v)
	}
	return _u
}

// ClearAgencyContact clears the value of the "agency_contact" field.
func (_u *BidApplyUpdateOne) ClearAgencyContact() *BidApplyUpdateOne {
	_u.mutation.ClearAgencyContact()
	return _u
}

// SetOpeningDate sets the "opening_date" field.
func (_u *BidApplyUpdateOne) SetOpeningDate(v time.Time) *BidApplyUpdateOne {
	_u.mutation.SetOpeningDate(v)
	return _u
}

// SetNillableOpeningDate sets the "opening_date" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableOpeningDate(v *time.Time) *BidApplyUpdateOne {
	if v != nil {
		_u.SetOpeningDate(*v)
	}
	return _u
}

// ClearOpeningDate clears the value of the "opening_date" field.
func (_u *BidApplyUpdateOne) ClearOpeningDate() *BidApplyUpdateOne {
	_u.mutation.ClearOpeningDate()
	return _u
}

// SetNoticeURL sets the "notice_url" field.
func (_u *BidApplyUpdateOne) SetNoticeURL(v string) *BidApplyUpdateOne {
	_u.mutation.SetNoticeURL(v)
	return _u
}

// SetNillableNoticeURL sets the "notice_url" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableNoticeURL(v *string) *BidApplyUpdateOne {
	if v != nil {
		_u.SetNoticeURL(*v)
	}
	return _u
}

// ClearNoticeURL clears the value of the "notice_url" field.
func (_u *BidApplyUpdateOne) ClearNoticeURL() *BidApplyUpdateOne {
	_u.mutation.ClearNoticeURL()
	return _u
}

// SetBudgetAmount sets the "budget_amount" field.
func (_u *BidApplyUpdateOne) SetBudgetAmount(v float64) *BidApplyUpdateOne {
	_u.mutation.ResetBudgetAmount()
	_u.mutation.SetBudgetAmount(v)
	return _u
}

// SetNillableBudgetAmount sets the "budget_amount" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableBudgetAmount(v *float64) *BidApplyUpdateOne {
	if v != nil {
		_u.SetBudgetAmount(*v)
	}
	return _u
}

// AddBudgetAmount adds value to the "budget_amount" field.
func (_u *BidApplyUpdateOne) AddBudgetAmount(v float64) *BidApplyUpdateOne {
	_u.mutation.AddBudgetAmount(v)
	return _u
}

// SetRemark sets the "remark" field.
func (_u *BidApplyUpdateOne) SetRemark(v string) *BidApplyUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableRemark(v *string) *BidApplyUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *BidApplyUpdateOne) ClearRemark() *BidApplyUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetAttachments sets the "attachments" field.
func (_u *BidApplyUpdateOne) SetAttachments(v []schema.Attachment) *BidApplyUpdateOne {
	_u.mutation.SetAttachments(v)
	return _u
}

// AppendAttachments appends value to the "attachments" field.
func (_u *BidApplyUpdateOne) AppendAttachments(v []schema.Attachment) *BidApplyUpdateOne {
	_u.mutation.AppendAttachments(v)
	return _u
}

// ClearAttachments clears the value of the "attachments" field.
func (_u *BidApplyUpdateOne) ClearAttachments() *BidApplyUpdateOne {
	_u.mutation.ClearAttachments()
	return _u
}

// SetApprovalStatus sets the "approval_status" field.
func (_u *BidApplyUpdateOne) SetApprovalStatus(v string) *BidApplyUpdateOne {
	_u.mutation.SetApprovalStatus(v)
	return _u
}

// SetNillableApprovalStatus sets the "approval_status" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableApprovalStatus(v *string) *BidApplyUpdateOne {
	if v != nil {
		_u.SetApprovalStatus(*v)
	}
	return _u
}

// SetDone sets the "done" field.
func (_u *BidApplyUpdateOne) SetDone(v bool) *BidApplyUpdateOne {
	_u.mutation.SetDone(v)
	return _u
}

// SetNillableDone sets the "done" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableDone(v *bool) *BidApplyUpdateOne {
	if v != nil {
		_u.SetDone(*v)
	}
	return _u
}

// SetCreateAt sets the "create_at" field.
func (_u *BidApplyUpdateOne) SetCreateAt(v time.Time) *BidApplyUpdateOne {
	_u.mutation.SetCreateAt(v)
	return _u
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableCreateAt(v *time.Time) *BidApplyUpdateOne {
	if v != nil {
		_u.SetCreateAt(*v)
	}
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *BidApplyUpdateOne) SetCreateBy(v string) *BidApplyUpdateOne {
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableCreateBy(v *string) *BidApplyUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *BidApplyUpdateOne) ClearCreateBy() *BidApplyUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateAt sets the "update_at" field.
func (_u *BidApplyUpdateOne) SetUpdateAt(v time.Time) *BidApplyUpdateOne {
	_u.mutation.SetUpdateAt(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *BidApplyUpdateOne) SetUpdateBy(v string) *BidApplyUpdateOne {
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *BidApplyUpdateOne) SetNillableUpdateBy(v *string) *BidApplyUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *BidApplyUpdateOne) ClearUpdateBy() *BidApplyUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetProject sets the "project" edge to the BidProject entity.
func (_u *BidApplyUpdateOne) SetProject(v *BidProject) *BidApplyUpdateOne {
	return _u.SetProjectID(v.ID)
}

// Mutation returns the BidApplyMutation object of the builder.
func (_u *BidApplyUpdateOne) Mutation() *BidApplyMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the BidProject entity.
func (_u *BidApplyUpdateOne) ClearProject() *BidApplyUpdateOne {
	_u.mutation.ClearProject()
	return _u
}

// Where appends a list predicates to the BidApplyUpdate builder.
func (_u *BidApplyUpdateOne) Where(ps ...predicate.BidApply) *BidApplyUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BidApplyUpdateOne) Select(field string, fields ...string) *BidApplyUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BidApply entity.
func (_u *BidApplyUpdateOne) Save(ctx context.Context) (*BidApply, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BidApplyUpdateOne) SaveX(ctx context.Context) *BidApply {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BidApplyUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BidApplyUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BidApplyUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateAt(); !ok {
		v := bidapply.UpdateDefaultUpdateAt()
		_u.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BidApplyUpdateOne) check() error {
	if v, ok := _u.mutation.BusinessID(); ok {
		if err := bidapply.BusinessIDValidator(v); err != nil {
			return &ValidationError{Name: "business_id", err: fmt.Errorf(`ent: validator failed for field "BidApply.business_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.InstanceID(); ok {
		if err := bidapply.InstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "instance_id", err: fmt.Errorf(`ent: validator failed for field "BidApply.instance_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProjectID(); ok {
		if err := bidapply.ProjectIDValidator(v); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`ent: validator failed for field "BidApply.project_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PurchaserName(); ok {
		if err := bidapply.PurchaserNameValidator(v); err != nil {
			return &ValidationError{Name: "purchaser_name", err: fmt.Errorf(`ent: validator failed for field "BidApply.purchaser_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BidType(); ok {
		if err := bidapply.BidTypeValidator(v); err != nil {
			return &ValidationError{Name: "bid_type", err: fmt.Errorf(`ent: validator failed for field "BidApply.bid_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AgencyName(); ok {
		if err := bidapply.AgencyNameValidator(v); err != nil {
			return &ValidationError{Name: "agency_name", err: fmt.Errorf(`ent: validator failed for field "BidApply.agency_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AgencyContact(); ok {
		if err := bidapply.AgencyContactValidator(v); err != nil {
			return &ValidationError{Name: "agency_contact", err: fmt.Errorf(`ent: validator failed for field "BidApply.agency_contact": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CreateBy(); ok {
		if err := bidapply.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`ent: validator failed for field "BidApply.create_by": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UpdateBy(); ok {
		if err := bidapply.UpdateByValidator(v); err != nil {
			return &ValidationError{Name: "update_by", err: fmt.Errorf(`ent: validator failed for field "BidApply.update_by": %w`, err)}
		}
	}
	if _u.mutation.ProjectCleared() && len(_u.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BidApply.project"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *BidApplyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BidApplyUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *BidApplyUpdateOne) sqlSave(ctx context.Context) (_node *BidApply, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bidapply.Table, bidapply.Columns, sqlgraph.NewFieldSpec(bidapply.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BidApply.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bidapply.FieldID)
		for _, f := range fields {
			if !bidapply.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bidapply.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.BusinessID(); ok {
		_spec.SetField(bidapply.FieldBusinessID, field.TypeString, value)
	}
	if value, ok := _u.mutation.InstanceID(); ok {
		_spec.SetField(bidapply.FieldInstanceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.PurchaserName(); ok {
		_spec.SetField(bidapply.FieldPurchaserName, field.TypeString, value)
	}
	if _u.mutation.PurchaserNameCleared() {
		_spec.ClearField(bidapply.FieldPurchaserName, field.TypeString)
	}
	if value, ok := _u.mutation.BidType(); ok {
		_spec.SetField(bidapply.FieldBidType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.AgencyName(); ok {
		_spec.SetField(bidapply.FieldAgencyName, field.TypeString, value)
	}
	if _u.mutation.AgencyNameCleared() {
		_spec.ClearField(bidapply.FieldAgencyName, field.TypeString)
	}
	if value, ok := _u.mutation.AgencyContact(); ok {
		_spec.SetField(bidapply.FieldAgencyContact, field.TypeString, value)
	}
	if _u.mutation.AgencyContactCleared() {
		_spec.ClearField(bidapply.FieldAgencyContact, field.TypeString)
	}
	if value, ok := _u.mutation.OpeningDate(); ok {
		_spec.SetField(bidapply.FieldOpeningDate, field.TypeTime, value)
	}
	if _u.mutation.OpeningDateCleared() {
		_spec.ClearField(bidapply.FieldOpeningDate, field.TypeTime)
	}
	if value, ok := _u.mutation.NoticeURL(); ok {
		_spec.SetField(bidapply.FieldNoticeURL, field.TypeString, value)
	}
	if _u.mutation.NoticeURLCleared() {
		_spec.ClearField(bidapply.FieldNoticeURL, field.TypeString)
	}
	if value, ok := _u.mutation.BudgetAmount(); ok {
		_spec.SetField(bidapply.FieldBudgetAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedBudgetAmount(); ok {
		_spec.AddField(bidapply.FieldBudgetAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(bidapply.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(bidapply.FieldRemark, field.TypeString)
	}
	if value, ok := _u.mutation.Attachments(); ok {
		_spec.SetField(bidapply.FieldAttachments, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAttachments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, bidapply.FieldAttachments, value)
		})
	}
	if _u.mutation.AttachmentsCleared() {
		_spec.ClearField(bidapply.FieldAttachments, field.TypeJSON)
	}
	if value, ok := _u.mutation.ApprovalStatus(); ok {
		_spec.SetField(bidapply.FieldApprovalStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Done(); ok {
		_spec.SetField(bidapply.FieldDone, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreateAt(); ok {
		_spec.SetField(bidapply.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(bidapply.FieldCreateBy, field.TypeString, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(bidapply.FieldCreateBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdateAt(); ok {
		_spec.SetField(bidapply.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(bidapply.FieldUpdateBy, field.TypeString, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(bidapply.FieldUpdateBy, field.TypeString)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bidapply.ProjectTable,
			Columns: []string{bidapply.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidproject.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bidapply.ProjectTable,
			Columns: []string{bidapply.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidproject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &BidApply{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bidapply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
