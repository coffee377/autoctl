// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cds/bid/ent/bidapply"
	"cds/bid/ent/bidexpense"
	"cds/bid/ent/bidproject"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BidProjectCreate is the builder for creating a BidProject entity.
type BidProjectCreate struct {
	config
	mutation *BidProjectMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (_c *BidProjectCreate) SetCode(v string) *BidProjectCreate {
	_c.mutation.SetCode(v)
	return _c
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_c *BidProjectCreate) SetNillableCode(v *string) *BidProjectCreate {
	if v != nil {
		_c.SetCode(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *BidProjectCreate) SetName(v string) *BidProjectCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetType sets the "type" field.
func (_c *BidProjectCreate) SetType(v bidproject.Type) *BidProjectCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *BidProjectCreate) SetNillableType(v *bidproject.Type) *BidProjectCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetDepartmentCode sets the "department_code" field.
func (_c *BidProjectCreate) SetDepartmentCode(v string) *BidProjectCreate {
	_c.mutation.SetDepartmentCode(v)
	return _c
}

// SetNillableDepartmentCode sets the "department_code" field if the given value is not nil.
func (_c *BidProjectCreate) SetNillableDepartmentCode(v *string) *BidProjectCreate {
	if v != nil {
		_c.SetDepartmentCode(*v)
	}
	return _c
}

// SetDepartmentName sets the "department_name" field.
func (_c *BidProjectCreate) SetDepartmentName(v string) *BidProjectCreate {
	_c.mutation.SetDepartmentName(v)
	return _c
}

// SetBizRepNo sets the "biz_rep_no" field.
func (_c *BidProjectCreate) SetBizRepNo(v string) *BidProjectCreate {
	_c.mutation.SetBizRepNo(v)
	return _c
}

// SetNillableBizRepNo sets the "biz_rep_no" field if the given value is not nil.
func (_c *BidProjectCreate) SetNillableBizRepNo(v *string) *BidProjectCreate {
	if v != nil {
		_c.SetBizRepNo(*v)
	}
	return _c
}

// SetBizRepName sets the "biz_rep_name" field.
func (_c *BidProjectCreate) SetBizRepName(v string) *BidProjectCreate {
	_c.mutation.SetBizRepName(v)
	return _c
}

// SetNillableBizRepName sets the "biz_rep_name" field if the given value is not nil.
func (_c *BidProjectCreate) SetNillableBizRepName(v *string) *BidProjectCreate {
	if v != nil {
		_c.SetBizRepName(*v)
	}
	return _c
}

// SetCreateAt sets the "create_at" field.
func (_c *BidProjectCreate) SetCreateAt(v time.Time) *BidProjectCreate {
	_c.mutation.SetCreateAt(v)
	return _c
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (_c *BidProjectCreate) SetNillableCreateAt(v *time.Time) *BidProjectCreate {
	if v != nil {
		_c.SetCreateAt(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *BidProjectCreate) SetCreateBy(v string) *BidProjectCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *BidProjectCreate) SetNillableCreateBy(v *string) *BidProjectCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateAt sets the "update_at" field.
func (_c *BidProjectCreate) SetUpdateAt(v time.Time) *BidProjectCreate {
	_c.mutation.SetUpdateAt(v)
	return _c
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (_c *BidProjectCreate) SetNillableUpdateAt(v *time.Time) *BidProjectCreate {
	if v != nil {
		_c.SetUpdateAt(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *BidProjectCreate) SetUpdateBy(v string) *BidProjectCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *BidProjectCreate) SetNillableUpdateBy(v *string) *BidProjectCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *BidProjectCreate) SetID(v string) *BidProjectCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetApplyID sets the "apply" edge to the BidApply entity by ID.
func (_c *BidProjectCreate) SetApplyID(id string) *BidProjectCreate {
	_c.mutation.SetApplyID(id)
	return _c
}

// SetNillableApplyID sets the "apply" edge to the BidApply entity by ID if the given value is not nil.
func (_c *BidProjectCreate) SetNillableApplyID(id *string) *BidProjectCreate {
	if id != nil {
		_c = _c.SetApplyID(*id)
	}
	return _c
}

// SetApply sets the "apply" edge to the BidApply entity.
func (_c *BidProjectCreate) SetApply(v *BidApply) *BidProjectCreate {
	return _c.SetApplyID(v.ID)
}

// AddExpenseIDs adds the "expense" edge to the BidExpense entity by IDs.
func (_c *BidProjectCreate) AddExpenseIDs(ids ...string) *BidProjectCreate {
	_c.mutation.AddExpenseIDs(ids...)
	return _c
}

// AddExpense adds the "expense" edges to the BidExpense entity.
func (_c *BidProjectCreate) AddExpense(v ...*BidExpense) *BidProjectCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddExpenseIDs(ids...)
}

// Mutation returns the BidProjectMutation object of the builder.
func (_c *BidProjectCreate) Mutation() *BidProjectMutation {
	return _c.mutation
}

// Save creates the BidProject in the database.
func (_c *BidProjectCreate) Save(ctx context.Context) (*BidProject, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BidProjectCreate) SaveX(ctx context.Context) *BidProject {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BidProjectCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BidProjectCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BidProjectCreate) defaults() {
	if _, ok := _c.mutation.Code(); !ok {
		v := bidproject.DefaultCode
		_c.mutation.SetCode(v)
	}
	if _, ok := _c.mutation.GetType(); !ok {
		v := bidproject.DefaultType
		_c.mutation.SetType(v)
	}
	if _, ok := _c.mutation.DepartmentCode(); !ok {
		v := bidproject.DefaultDepartmentCode
		_c.mutation.SetDepartmentCode(v)
	}
	if _, ok := _c.mutation.BizRepNo(); !ok {
		v := bidproject.DefaultBizRepNo
		_c.mutation.SetBizRepNo(v)
	}
	if _, ok := _c.mutation.BizRepName(); !ok {
		v := bidproject.DefaultBizRepName
		_c.mutation.SetBizRepName(v)
	}
	if _, ok := _c.mutation.CreateAt(); !ok {
		v := bidproject.DefaultCreateAt()
		_c.mutation.SetCreateAt(v)
	}
	if _, ok := _c.mutation.UpdateAt(); !ok {
		v := bidproject.DefaultUpdateAt()
		_c.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BidProjectCreate) check() error {
	if _, ok := _c.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "BidProject.code"`)}
	}
	if v, ok := _c.mutation.Code(); ok {
		if err := bidproject.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "BidProject.code": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BidProject.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := bidproject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BidProject.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "BidProject.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := bidproject.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "BidProject.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DepartmentCode(); !ok {
		return &ValidationError{Name: "department_code", err: errors.New(`ent: missing required field "BidProject.department_code"`)}
	}
	if v, ok := _c.mutation.DepartmentCode(); ok {
		if err := bidproject.DepartmentCodeValidator(v); err != nil {
			return &ValidationError{Name: "department_code", err: fmt.Errorf(`ent: validator failed for field "BidProject.department_code": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DepartmentName(); !ok {
		return &ValidationError{Name: "department_name", err: errors.New(`ent: missing required field "BidProject.department_name"`)}
	}
	if v, ok := _c.mutation.DepartmentName(); ok {
		if err := bidproject.DepartmentNameValidator(v); err != nil {
			return &ValidationError{Name: "department_name", err: fmt.Errorf(`ent: validator failed for field "BidProject.department_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.BizRepNo(); !ok {
		return &ValidationError{Name: "biz_rep_no", err: errors.New(`ent: missing required field "BidProject.biz_rep_no"`)}
	}
	if v, ok := _c.mutation.BizRepNo(); ok {
		if err := bidproject.BizRepNoValidator(v); err != nil {
			return &ValidationError{Name: "biz_rep_no", err: fmt.Errorf(`ent: validator failed for field "BidProject.biz_rep_no": %w`, err)}
		}
	}
	if _, ok := _c.mutation.BizRepName(); !ok {
		return &ValidationError{Name: "biz_rep_name", err: errors.New(`ent: missing required field "BidProject.biz_rep_name"`)}
	}
	if v, ok := _c.mutation.BizRepName(); ok {
		if err := bidproject.BizRepNameValidator(v); err != nil {
			return &ValidationError{Name: "biz_rep_name", err: fmt.Errorf(`ent: validator failed for field "BidProject.biz_rep_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "BidProject.create_at"`)}
	}
	if v, ok := _c.mutation.CreateBy(); ok {
		if err := bidproject.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`ent: validator failed for field "BidProject.create_by": %w`, err)}
		}
	}
	if _, ok := _c.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "BidProject.update_at"`)}
	}
	if v, ok := _c.mutation.UpdateBy(); ok {
		if err := bidproject.UpdateByValidator(v); err != nil {
			return &ValidationError{Name: "update_by", err: fmt.Errorf(`ent: validator failed for field "BidProject.update_by": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := bidproject.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "BidProject.id": %w`, err)}
		}
	}
	return nil
}

func (_c *BidProjectCreate) sqlSave(ctx context.Context) (*BidProject, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BidProject.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BidProjectCreate) createSpec() (*BidProject, *sqlgraph.CreateSpec) {
	var (
		_node = &BidProject{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(bidproject.Table, sqlgraph.NewFieldSpec(bidproject.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Code(); ok {
		_spec.SetField(bidproject.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(bidproject.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(bidproject.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.DepartmentCode(); ok {
		_spec.SetField(bidproject.FieldDepartmentCode, field.TypeString, value)
		_node.DepartmentCode = value
	}
	if value, ok := _c.mutation.DepartmentName(); ok {
		_spec.SetField(bidproject.FieldDepartmentName, field.TypeString, value)
		_node.DepartmentName = value
	}
	if value, ok := _c.mutation.BizRepNo(); ok {
		_spec.SetField(bidproject.FieldBizRepNo, field.TypeString, value)
		_node.BizRepNo = value
	}
	if value, ok := _c.mutation.BizRepName(); ok {
		_spec.SetField(bidproject.FieldBizRepName, field.TypeString, value)
		_node.BizRepName = value
	}
	if value, ok := _c.mutation.CreateAt(); ok {
		_spec.SetField(bidproject.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(bidproject.FieldCreateBy, field.TypeString, value)
		_node.CreateBy = &value
	}
	if value, ok := _c.mutation.UpdateAt(); ok {
		_spec.SetField(bidproject.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(bidproject.FieldUpdateBy, field.TypeString, value)
		_node.UpdateBy = &value
	}
	if nodes := _c.mutation.ApplyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bidproject.ApplyTable,
			Columns: []string{bidproject.ApplyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidapply.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ExpenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bidproject.ExpenseTable,
			Columns: []string{bidproject.ExpenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidexpense.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BidProjectCreateBulk is the builder for creating many BidProject entities in bulk.
type BidProjectCreateBulk struct {
	config
	err      error
	builders []*BidProjectCreate
}

// Save creates the BidProject entities in the database.
func (_c *BidProjectCreateBulk) Save(ctx context.Context) ([]*BidProject, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BidProject, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BidProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BidProjectCreateBulk) SaveX(ctx context.Context) []*BidProject {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BidProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BidProjectCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
