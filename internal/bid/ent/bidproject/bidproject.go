// Code generated by ent, DO NOT EDIT.

package bidproject

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the bidproject type in the database.
	Label = "bid_project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDepartmentCode holds the string denoting the department_code field in the database.
	FieldDepartmentCode = "department_code"
	// FieldDepartmentName holds the string denoting the department_name field in the database.
	FieldDepartmentName = "department_name"
	// FieldBizRepNo holds the string denoting the biz_rep_no field in the database.
	FieldBizRepNo = "biz_rep_no"
	// FieldBizRepName holds the string denoting the biz_rep_name field in the database.
	FieldBizRepName = "biz_rep_name"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// EdgeApply holds the string denoting the apply edge name in mutations.
	EdgeApply = "apply"
	// EdgeExpense holds the string denoting the expense edge name in mutations.
	EdgeExpense = "expense"
	// Table holds the table name of the bidproject in the database.
	Table = "bid_project"
	// ApplyTable is the table that holds the apply relation/edge.
	ApplyTable = "bid_apply"
	// ApplyInverseTable is the table name for the BidApply entity.
	// It exists in this package in order to avoid circular dependency with the "bidapply" package.
	ApplyInverseTable = "bid_apply"
	// ApplyColumn is the table column denoting the apply relation/edge.
	ApplyColumn = "project_id"
	// ExpenseTable is the table that holds the expense relation/edge.
	ExpenseTable = "bid_expense"
	// ExpenseInverseTable is the table name for the BidExpense entity.
	// It exists in this package in order to avoid circular dependency with the "bidexpense" package.
	ExpenseInverseTable = "bid_expense"
	// ExpenseColumn is the table column denoting the expense relation/edge.
	ExpenseColumn = "project_id"
)

// Columns holds all SQL columns for bidproject fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldName,
	FieldType,
	FieldDepartmentCode,
	FieldDepartmentName,
	FieldBizRepNo,
	FieldBizRepName,
	FieldCreateAt,
	FieldCreateBy,
	FieldUpdateAt,
	FieldUpdateBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCode holds the default value on creation for the "code" field.
	DefaultCode string
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultDepartmentCode holds the default value on creation for the "department_code" field.
	DefaultDepartmentCode string
	// DepartmentCodeValidator is a validator for the "department_code" field. It is called by the builders before save.
	DepartmentCodeValidator func(string) error
	// DepartmentNameValidator is a validator for the "department_name" field. It is called by the builders before save.
	DepartmentNameValidator func(string) error
	// DefaultBizRepNo holds the default value on creation for the "biz_rep_no" field.
	DefaultBizRepNo string
	// BizRepNoValidator is a validator for the "biz_rep_no" field. It is called by the builders before save.
	BizRepNoValidator func(string) error
	// DefaultBizRepName holds the default value on creation for the "biz_rep_name" field.
	DefaultBizRepName string
	// BizRepNameValidator is a validator for the "biz_rep_name" field. It is called by the builders before save.
	BizRepNameValidator func(string) error
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// CreateByValidator is a validator for the "create_by" field. It is called by the builders before save.
	CreateByValidator func(string) error
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() time.Time
	// UpdateDefaultUpdateAt holds the default value on update for the "update_at" field.
	UpdateDefaultUpdateAt func() time.Time
	// UpdateByValidator is a validator for the "update_by" field. It is called by the builders before save.
	UpdateByValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// Type defines the type for the "type" enum field.
type Type string

// TypeUP is the default value of the Type enum.
const DefaultType = TypeUP

// Type values.
const (
	TypeUP Type = "UP"
	TypeS  Type = "S"
	TypeH  Type = "H"
	TypeSH Type = "SH"
	TypeOM Type = "OM"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeUP, TypeS, TypeH, TypeSH, TypeOM:
		return nil
	default:
		return fmt.Errorf("bidproject: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the BidProject queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDepartmentCode orders the results by the department_code field.
func ByDepartmentCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartmentCode, opts...).ToFunc()
}

// ByDepartmentName orders the results by the department_name field.
func ByDepartmentName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartmentName, opts...).ToFunc()
}

// ByBizRepNo orders the results by the biz_rep_no field.
func ByBizRepNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBizRepNo, opts...).ToFunc()
}

// ByBizRepName orders the results by the biz_rep_name field.
func ByBizRepName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBizRepName, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateAt orders the results by the update_at field.
func ByUpdateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateAt, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByApplyField orders the results by apply field.
func ByApplyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplyStep(), sql.OrderByField(field, opts...))
	}
}

// ByExpenseCount orders the results by expense count.
func ByExpenseCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExpenseStep(), opts...)
	}
}

// ByExpense orders the results by expense terms.
func ByExpense(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExpenseStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newApplyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ApplyTable, ApplyColumn),
	)
}
func newExpenseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExpenseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExpenseTable, ExpenseColumn),
	)
}
