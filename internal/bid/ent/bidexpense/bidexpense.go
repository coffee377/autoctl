// Code generated by ent, DO NOT EDIT.

package bidexpense

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the bidexpense type in the database.
	Label = "bid_expense"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusinessID holds the string denoting the business_id field in the database.
	FieldBusinessID = "business_id"
	// FieldInstanceID holds the string denoting the instance_id field in the database.
	FieldInstanceID = "instance_id"
	// FieldBillNo holds the string denoting the bill_no field in the database.
	FieldBillNo = "bill_no"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldProjectName holds the string denoting the project_name field in the database.
	FieldProjectName = "project_name"
	// FieldProjectCode holds the string denoting the project_code field in the database.
	FieldProjectCode = "project_code"
	// FieldBizRepName holds the string denoting the biz_rep_name field in the database.
	FieldBizRepName = "biz_rep_name"
	// FieldPurchaser holds the string denoting the purchaser field in the database.
	FieldPurchaser = "purchaser"
	// FieldFeeTypeV1 holds the string denoting the fee_type_v1 field in the database.
	FieldFeeTypeV1 = "fee_type_v1"
	// FieldFeeType holds the string denoting the fee_type field in the database.
	FieldFeeType = "fee_type"
	// FieldPayReason holds the string denoting the pay_reason field in the database.
	FieldPayReason = "pay_reason"
	// FieldRefunded holds the string denoting the refunded field in the database.
	FieldRefunded = "refunded"
	// FieldPayeeBank holds the string denoting the payee_bank field in the database.
	FieldPayeeBank = "payee_bank"
	// FieldPayeeName holds the string denoting the payee_name field in the database.
	FieldPayeeName = "payee_name"
	// FieldPayeeAccount holds the string denoting the payee_account field in the database.
	FieldPayeeAccount = "payee_account"
	// FieldPayRatio holds the string denoting the pay_ratio field in the database.
	FieldPayRatio = "pay_ratio"
	// FieldPayAmount holds the string denoting the pay_amount field in the database.
	FieldPayAmount = "pay_amount"
	// FieldPayRemark holds the string denoting the pay_remark field in the database.
	FieldPayRemark = "pay_remark"
	// FieldPayMethod holds the string denoting the pay_method field in the database.
	FieldPayMethod = "pay_method"
	// FieldPlanPayTime holds the string denoting the plan_pay_time field in the database.
	FieldPlanPayTime = "plan_pay_time"
	// FieldApprovalStatus holds the string denoting the approval_status field in the database.
	FieldApprovalStatus = "approval_status"
	// FieldDone holds the string denoting the done field in the database.
	FieldDone = "done"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// Table holds the table name of the bidexpense in the database.
	Table = "bid_expense"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "bid_expense"
	// ProjectInverseTable is the table name for the BidProject entity.
	// It exists in this package in order to avoid circular dependency with the "bidproject" package.
	ProjectInverseTable = "bid_project"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_id"
)

// Columns holds all SQL columns for bidexpense fields.
var Columns = []string{
	FieldID,
	FieldBusinessID,
	FieldInstanceID,
	FieldBillNo,
	FieldProjectID,
	FieldProjectName,
	FieldProjectCode,
	FieldBizRepName,
	FieldPurchaser,
	FieldFeeTypeV1,
	FieldFeeType,
	FieldPayReason,
	FieldRefunded,
	FieldPayeeBank,
	FieldPayeeName,
	FieldPayeeAccount,
	FieldPayRatio,
	FieldPayAmount,
	FieldPayRemark,
	FieldPayMethod,
	FieldPlanPayTime,
	FieldApprovalStatus,
	FieldDone,
	FieldCreateAt,
	FieldCreateBy,
	FieldUpdateAt,
	FieldUpdateBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// BusinessIDValidator is a validator for the "business_id" field. It is called by the builders before save.
	BusinessIDValidator func(string) error
	// InstanceIDValidator is a validator for the "instance_id" field. It is called by the builders before save.
	InstanceIDValidator func(string) error
	// BillNoValidator is a validator for the "bill_no" field. It is called by the builders before save.
	BillNoValidator func(string) error
	// ProjectIDValidator is a validator for the "project_id" field. It is called by the builders before save.
	ProjectIDValidator func(string) error
	// ProjectNameValidator is a validator for the "project_name" field. It is called by the builders before save.
	ProjectNameValidator func(string) error
	// ProjectCodeValidator is a validator for the "project_code" field. It is called by the builders before save.
	ProjectCodeValidator func(string) error
	// BizRepNameValidator is a validator for the "biz_rep_name" field. It is called by the builders before save.
	BizRepNameValidator func(string) error
	// PurchaserValidator is a validator for the "purchaser" field. It is called by the builders before save.
	PurchaserValidator func(string) error
	// PayReasonValidator is a validator for the "pay_reason" field. It is called by the builders before save.
	PayReasonValidator func(string) error
	// DefaultRefunded holds the default value on creation for the "refunded" field.
	DefaultRefunded bool
	// PayeeBankValidator is a validator for the "payee_bank" field. It is called by the builders before save.
	PayeeBankValidator func(string) error
	// PayeeNameValidator is a validator for the "payee_name" field. It is called by the builders before save.
	PayeeNameValidator func(string) error
	// PayeeAccountValidator is a validator for the "payee_account" field. It is called by the builders before save.
	PayeeAccountValidator func(string) error
	// DefaultPayRatio holds the default value on creation for the "pay_ratio" field.
	DefaultPayRatio float64
	// DefaultPayAmount holds the default value on creation for the "pay_amount" field.
	DefaultPayAmount float64
	// PayMethodValidator is a validator for the "pay_method" field. It is called by the builders before save.
	PayMethodValidator func(string) error
	// DefaultDone holds the default value on creation for the "done" field.
	DefaultDone bool
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// CreateByValidator is a validator for the "create_by" field. It is called by the builders before save.
	CreateByValidator func(string) error
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() time.Time
	// UpdateDefaultUpdateAt holds the default value on update for the "update_at" field.
	UpdateDefaultUpdateAt func() time.Time
	// UpdateByValidator is a validator for the "update_by" field. It is called by the builders before save.
	UpdateByValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// FeeType defines the type for the "fee_type" enum field.
type FeeType string

// FeeTypeOE is the default value of the FeeType enum.
const DefaultFeeType = FeeTypeOE

// FeeType values.
const (
	FeeTypeRF FeeType = "RF"
	FeeTypeDF FeeType = "DF"
	FeeTypeCA FeeType = "CA"
	FeeTypeEF FeeType = "EF"
	FeeTypeBB FeeType = "BB"
	FeeTypeBS FeeType = "BS"
	FeeTypePB FeeType = "PB"
	FeeTypePG FeeType = "PG"
	FeeTypeOE FeeType = "OE"
)

func (ft FeeType) String() string {
	return string(ft)
}

// FeeTypeValidator is a validator for the "fee_type" field enum values. It is called by the builders before save.
func FeeTypeValidator(ft FeeType) error {
	switch ft {
	case FeeTypeRF, FeeTypeDF, FeeTypeCA, FeeTypeEF, FeeTypeBB, FeeTypeBS, FeeTypePB, FeeTypePG, FeeTypeOE:
		return nil
	default:
		return fmt.Errorf("bidexpense: invalid enum value for fee_type field: %q", ft)
	}
}

// OrderOption defines the ordering options for the BidExpense queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusinessID orders the results by the business_id field.
func ByBusinessID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessID, opts...).ToFunc()
}

// ByInstanceID orders the results by the instance_id field.
func ByInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstanceID, opts...).ToFunc()
}

// ByBillNo orders the results by the bill_no field.
func ByBillNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillNo, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByProjectName orders the results by the project_name field.
func ByProjectName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectName, opts...).ToFunc()
}

// ByProjectCode orders the results by the project_code field.
func ByProjectCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectCode, opts...).ToFunc()
}

// ByBizRepName orders the results by the biz_rep_name field.
func ByBizRepName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBizRepName, opts...).ToFunc()
}

// ByPurchaser orders the results by the purchaser field.
func ByPurchaser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPurchaser, opts...).ToFunc()
}

// ByFeeTypeV1 orders the results by the fee_type_v1 field.
func ByFeeTypeV1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeeTypeV1, opts...).ToFunc()
}

// ByFeeType orders the results by the fee_type field.
func ByFeeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeeType, opts...).ToFunc()
}

// ByPayReason orders the results by the pay_reason field.
func ByPayReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayReason, opts...).ToFunc()
}

// ByRefunded orders the results by the refunded field.
func ByRefunded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefunded, opts...).ToFunc()
}

// ByPayeeBank orders the results by the payee_bank field.
func ByPayeeBank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayeeBank, opts...).ToFunc()
}

// ByPayeeName orders the results by the payee_name field.
func ByPayeeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayeeName, opts...).ToFunc()
}

// ByPayeeAccount orders the results by the payee_account field.
func ByPayeeAccount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayeeAccount, opts...).ToFunc()
}

// ByPayRatio orders the results by the pay_ratio field.
func ByPayRatio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayRatio, opts...).ToFunc()
}

// ByPayAmount orders the results by the pay_amount field.
func ByPayAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayAmount, opts...).ToFunc()
}

// ByPayRemark orders the results by the pay_remark field.
func ByPayRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayRemark, opts...).ToFunc()
}

// ByPayMethod orders the results by the pay_method field.
func ByPayMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayMethod, opts...).ToFunc()
}

// ByPlanPayTime orders the results by the plan_pay_time field.
func ByPlanPayTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlanPayTime, opts...).ToFunc()
}

// ByApprovalStatus orders the results by the approval_status field.
func ByApprovalStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovalStatus, opts...).ToFunc()
}

// ByDone orders the results by the done field.
func ByDone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDone, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateAt orders the results by the update_at field.
func ByUpdateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateAt, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
	)
}
