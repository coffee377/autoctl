// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cds/bid/ent/bidapply"
	"cds/bid/ent/bidexpense"
	"cds/bid/ent/bidinfo"
	"cds/bid/ent/bidproject"
	"cds/bid/ent/predicate"
	"cds/bid/ent/schema"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBidApply   = "BidApply"
	TypeBidExpense = "BidExpense"
	TypeBidInfo    = "BidInfo"
	TypeBidProject = "BidProject"
)

// BidApplyMutation represents an operation that mutates the BidApply nodes in the graph.
type BidApplyMutation struct {
	config
	op                Op
	typ               string
	id                *string
	business_id       *string
	instance_id       *string
	purchaser_name    *string
	bid_type          *bidapply.BidType
	agency_name       *string
	agency_contact    *string
	opening_date      *time.Time
	notice_url        *string
	budget_amount     *float64
	addbudget_amount  *float64
	remark            *string
	attachments       *[]schema.Attachment
	appendattachments []schema.Attachment
	approval_status   *string
	_done             *bool
	create_at         *time.Time
	create_by         *string
	update_at         *time.Time
	update_by         *string
	clearedFields     map[string]struct{}
	project           *string
	clearedproject    bool
	done              bool
	oldValue          func(context.Context) (*BidApply, error)
	predicates        []predicate.BidApply
}

var _ ent.Mutation = (*BidApplyMutation)(nil)

// bidapplyOption allows management of the mutation configuration using functional options.
type bidapplyOption func(*BidApplyMutation)

// newBidApplyMutation creates new mutation for the BidApply entity.
func newBidApplyMutation(c config, op Op, opts ...bidapplyOption) *BidApplyMutation {
	m := &BidApplyMutation{
		config:        c,
		op:            op,
		typ:           TypeBidApply,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBidApplyID sets the ID field of the mutation.
func withBidApplyID(id string) bidapplyOption {
	return func(m *BidApplyMutation) {
		var (
			err   error
			once  sync.Once
			value *BidApply
		)
		m.oldValue = func(ctx context.Context) (*BidApply, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BidApply.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBidApply sets the old BidApply of the mutation.
func withBidApply(node *BidApply) bidapplyOption {
	return func(m *BidApplyMutation) {
		m.oldValue = func(context.Context) (*BidApply, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BidApplyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BidApplyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BidApply entities.
func (m *BidApplyMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BidApplyMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BidApplyMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BidApply.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBusinessID sets the "business_id" field.
func (m *BidApplyMutation) SetBusinessID(s string) {
	m.business_id = &s
}

// BusinessID returns the value of the "business_id" field in the mutation.
func (m *BidApplyMutation) BusinessID() (r string, exists bool) {
	v := m.business_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessID returns the old "business_id" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldBusinessID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBusinessID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBusinessID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessID: %w", err)
	}
	return oldValue.BusinessID, nil
}

// ResetBusinessID resets all changes to the "business_id" field.
func (m *BidApplyMutation) ResetBusinessID() {
	m.business_id = nil
}

// SetInstanceID sets the "instance_id" field.
func (m *BidApplyMutation) SetInstanceID(s string) {
	m.instance_id = &s
}

// InstanceID returns the value of the "instance_id" field in the mutation.
func (m *BidApplyMutation) InstanceID() (r string, exists bool) {
	v := m.instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceID returns the old "instance_id" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldInstanceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceID: %w", err)
	}
	return oldValue.InstanceID, nil
}

// ResetInstanceID resets all changes to the "instance_id" field.
func (m *BidApplyMutation) ResetInstanceID() {
	m.instance_id = nil
}

// SetProjectID sets the "project_id" field.
func (m *BidApplyMutation) SetProjectID(s string) {
	m.project = &s
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *BidApplyMutation) ProjectID() (r string, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldProjectID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *BidApplyMutation) ResetProjectID() {
	m.project = nil
}

// SetPurchaserName sets the "purchaser_name" field.
func (m *BidApplyMutation) SetPurchaserName(s string) {
	m.purchaser_name = &s
}

// PurchaserName returns the value of the "purchaser_name" field in the mutation.
func (m *BidApplyMutation) PurchaserName() (r string, exists bool) {
	v := m.purchaser_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPurchaserName returns the old "purchaser_name" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldPurchaserName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPurchaserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPurchaserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPurchaserName: %w", err)
	}
	return oldValue.PurchaserName, nil
}

// ClearPurchaserName clears the value of the "purchaser_name" field.
func (m *BidApplyMutation) ClearPurchaserName() {
	m.purchaser_name = nil
	m.clearedFields[bidapply.FieldPurchaserName] = struct{}{}
}

// PurchaserNameCleared returns if the "purchaser_name" field was cleared in this mutation.
func (m *BidApplyMutation) PurchaserNameCleared() bool {
	_, ok := m.clearedFields[bidapply.FieldPurchaserName]
	return ok
}

// ResetPurchaserName resets all changes to the "purchaser_name" field.
func (m *BidApplyMutation) ResetPurchaserName() {
	m.purchaser_name = nil
	delete(m.clearedFields, bidapply.FieldPurchaserName)
}

// SetBidType sets the "bid_type" field.
func (m *BidApplyMutation) SetBidType(bt bidapply.BidType) {
	m.bid_type = &bt
}

// BidType returns the value of the "bid_type" field in the mutation.
func (m *BidApplyMutation) BidType() (r bidapply.BidType, exists bool) {
	v := m.bid_type
	if v == nil {
		return
	}
	return *v, true
}

// OldBidType returns the old "bid_type" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldBidType(ctx context.Context) (v bidapply.BidType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBidType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBidType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBidType: %w", err)
	}
	return oldValue.BidType, nil
}

// ResetBidType resets all changes to the "bid_type" field.
func (m *BidApplyMutation) ResetBidType() {
	m.bid_type = nil
}

// SetAgencyName sets the "agency_name" field.
func (m *BidApplyMutation) SetAgencyName(s string) {
	m.agency_name = &s
}

// AgencyName returns the value of the "agency_name" field in the mutation.
func (m *BidApplyMutation) AgencyName() (r string, exists bool) {
	v := m.agency_name
	if v == nil {
		return
	}
	return *v, true
}

// OldAgencyName returns the old "agency_name" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldAgencyName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAgencyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAgencyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgencyName: %w", err)
	}
	return oldValue.AgencyName, nil
}

// ClearAgencyName clears the value of the "agency_name" field.
func (m *BidApplyMutation) ClearAgencyName() {
	m.agency_name = nil
	m.clearedFields[bidapply.FieldAgencyName] = struct{}{}
}

// AgencyNameCleared returns if the "agency_name" field was cleared in this mutation.
func (m *BidApplyMutation) AgencyNameCleared() bool {
	_, ok := m.clearedFields[bidapply.FieldAgencyName]
	return ok
}

// ResetAgencyName resets all changes to the "agency_name" field.
func (m *BidApplyMutation) ResetAgencyName() {
	m.agency_name = nil
	delete(m.clearedFields, bidapply.FieldAgencyName)
}

// SetAgencyContact sets the "agency_contact" field.
func (m *BidApplyMutation) SetAgencyContact(s string) {
	m.agency_contact = &s
}

// AgencyContact returns the value of the "agency_contact" field in the mutation.
func (m *BidApplyMutation) AgencyContact() (r string, exists bool) {
	v := m.agency_contact
	if v == nil {
		return
	}
	return *v, true
}

// OldAgencyContact returns the old "agency_contact" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldAgencyContact(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAgencyContact is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAgencyContact requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgencyContact: %w", err)
	}
	return oldValue.AgencyContact, nil
}

// ClearAgencyContact clears the value of the "agency_contact" field.
func (m *BidApplyMutation) ClearAgencyContact() {
	m.agency_contact = nil
	m.clearedFields[bidapply.FieldAgencyContact] = struct{}{}
}

// AgencyContactCleared returns if the "agency_contact" field was cleared in this mutation.
func (m *BidApplyMutation) AgencyContactCleared() bool {
	_, ok := m.clearedFields[bidapply.FieldAgencyContact]
	return ok
}

// ResetAgencyContact resets all changes to the "agency_contact" field.
func (m *BidApplyMutation) ResetAgencyContact() {
	m.agency_contact = nil
	delete(m.clearedFields, bidapply.FieldAgencyContact)
}

// SetOpeningDate sets the "opening_date" field.
func (m *BidApplyMutation) SetOpeningDate(t time.Time) {
	m.opening_date = &t
}

// OpeningDate returns the value of the "opening_date" field in the mutation.
func (m *BidApplyMutation) OpeningDate() (r time.Time, exists bool) {
	v := m.opening_date
	if v == nil {
		return
	}
	return *v, true
}

// OldOpeningDate returns the old "opening_date" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldOpeningDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOpeningDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOpeningDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOpeningDate: %w", err)
	}
	return oldValue.OpeningDate, nil
}

// ClearOpeningDate clears the value of the "opening_date" field.
func (m *BidApplyMutation) ClearOpeningDate() {
	m.opening_date = nil
	m.clearedFields[bidapply.FieldOpeningDate] = struct{}{}
}

// OpeningDateCleared returns if the "opening_date" field was cleared in this mutation.
func (m *BidApplyMutation) OpeningDateCleared() bool {
	_, ok := m.clearedFields[bidapply.FieldOpeningDate]
	return ok
}

// ResetOpeningDate resets all changes to the "opening_date" field.
func (m *BidApplyMutation) ResetOpeningDate() {
	m.opening_date = nil
	delete(m.clearedFields, bidapply.FieldOpeningDate)
}

// SetNoticeURL sets the "notice_url" field.
func (m *BidApplyMutation) SetNoticeURL(s string) {
	m.notice_url = &s
}

// NoticeURL returns the value of the "notice_url" field in the mutation.
func (m *BidApplyMutation) NoticeURL() (r string, exists bool) {
	v := m.notice_url
	if v == nil {
		return
	}
	return *v, true
}

// OldNoticeURL returns the old "notice_url" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldNoticeURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNoticeURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNoticeURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNoticeURL: %w", err)
	}
	return oldValue.NoticeURL, nil
}

// ClearNoticeURL clears the value of the "notice_url" field.
func (m *BidApplyMutation) ClearNoticeURL() {
	m.notice_url = nil
	m.clearedFields[bidapply.FieldNoticeURL] = struct{}{}
}

// NoticeURLCleared returns if the "notice_url" field was cleared in this mutation.
func (m *BidApplyMutation) NoticeURLCleared() bool {
	_, ok := m.clearedFields[bidapply.FieldNoticeURL]
	return ok
}

// ResetNoticeURL resets all changes to the "notice_url" field.
func (m *BidApplyMutation) ResetNoticeURL() {
	m.notice_url = nil
	delete(m.clearedFields, bidapply.FieldNoticeURL)
}

// SetBudgetAmount sets the "budget_amount" field.
func (m *BidApplyMutation) SetBudgetAmount(f float64) {
	m.budget_amount = &f
	m.addbudget_amount = nil
}

// BudgetAmount returns the value of the "budget_amount" field in the mutation.
func (m *BidApplyMutation) BudgetAmount() (r float64, exists bool) {
	v := m.budget_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldBudgetAmount returns the old "budget_amount" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldBudgetAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBudgetAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBudgetAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBudgetAmount: %w", err)
	}
	return oldValue.BudgetAmount, nil
}

// AddBudgetAmount adds f to the "budget_amount" field.
func (m *BidApplyMutation) AddBudgetAmount(f float64) {
	if m.addbudget_amount != nil {
		*m.addbudget_amount += f
	} else {
		m.addbudget_amount = &f
	}
}

// AddedBudgetAmount returns the value that was added to the "budget_amount" field in this mutation.
func (m *BidApplyMutation) AddedBudgetAmount() (r float64, exists bool) {
	v := m.addbudget_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetBudgetAmount resets all changes to the "budget_amount" field.
func (m *BidApplyMutation) ResetBudgetAmount() {
	m.budget_amount = nil
	m.addbudget_amount = nil
}

// SetRemark sets the "remark" field.
func (m *BidApplyMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *BidApplyMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *BidApplyMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[bidapply.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *BidApplyMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[bidapply.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *BidApplyMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, bidapply.FieldRemark)
}

// SetAttachments sets the "attachments" field.
func (m *BidApplyMutation) SetAttachments(s []schema.Attachment) {
	m.attachments = &s
	m.appendattachments = nil
}

// Attachments returns the value of the "attachments" field in the mutation.
func (m *BidApplyMutation) Attachments() (r []schema.Attachment, exists bool) {
	v := m.attachments
	if v == nil {
		return
	}
	return *v, true
}

// OldAttachments returns the old "attachments" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldAttachments(ctx context.Context) (v []schema.Attachment, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttachments is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttachments requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttachments: %w", err)
	}
	return oldValue.Attachments, nil
}

// AppendAttachments adds s to the "attachments" field.
func (m *BidApplyMutation) AppendAttachments(s []schema.Attachment) {
	m.appendattachments = append(m.appendattachments, s...)
}

// AppendedAttachments returns the list of values that were appended to the "attachments" field in this mutation.
func (m *BidApplyMutation) AppendedAttachments() ([]schema.Attachment, bool) {
	if len(m.appendattachments) == 0 {
		return nil, false
	}
	return m.appendattachments, true
}

// ClearAttachments clears the value of the "attachments" field.
func (m *BidApplyMutation) ClearAttachments() {
	m.attachments = nil
	m.appendattachments = nil
	m.clearedFields[bidapply.FieldAttachments] = struct{}{}
}

// AttachmentsCleared returns if the "attachments" field was cleared in this mutation.
func (m *BidApplyMutation) AttachmentsCleared() bool {
	_, ok := m.clearedFields[bidapply.FieldAttachments]
	return ok
}

// ResetAttachments resets all changes to the "attachments" field.
func (m *BidApplyMutation) ResetAttachments() {
	m.attachments = nil
	m.appendattachments = nil
	delete(m.clearedFields, bidapply.FieldAttachments)
}

// SetApprovalStatus sets the "approval_status" field.
func (m *BidApplyMutation) SetApprovalStatus(s string) {
	m.approval_status = &s
}

// ApprovalStatus returns the value of the "approval_status" field in the mutation.
func (m *BidApplyMutation) ApprovalStatus() (r string, exists bool) {
	v := m.approval_status
	if v == nil {
		return
	}
	return *v, true
}

// OldApprovalStatus returns the old "approval_status" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldApprovalStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApprovalStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApprovalStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApprovalStatus: %w", err)
	}
	return oldValue.ApprovalStatus, nil
}

// ResetApprovalStatus resets all changes to the "approval_status" field.
func (m *BidApplyMutation) ResetApprovalStatus() {
	m.approval_status = nil
}

// SetDone sets the "done" field.
func (m *BidApplyMutation) SetDone(b bool) {
	m._done = &b
}

// Done returns the value of the "done" field in the mutation.
func (m *BidApplyMutation) Done() (r bool, exists bool) {
	v := m._done
	if v == nil {
		return
	}
	return *v, true
}

// OldDone returns the old "done" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldDone(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDone: %w", err)
	}
	return oldValue.Done, nil
}

// ResetDone resets all changes to the "done" field.
func (m *BidApplyMutation) ResetDone() {
	m._done = nil
}

// SetCreateAt sets the "create_at" field.
func (m *BidApplyMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *BidApplyMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *BidApplyMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetCreateBy sets the "create_by" field.
func (m *BidApplyMutation) SetCreateBy(s string) {
	m.create_by = &s
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *BidApplyMutation) CreateBy() (r string, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldCreateBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *BidApplyMutation) ClearCreateBy() {
	m.create_by = nil
	m.clearedFields[bidapply.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *BidApplyMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[bidapply.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *BidApplyMutation) ResetCreateBy() {
	m.create_by = nil
	delete(m.clearedFields, bidapply.FieldCreateBy)
}

// SetUpdateAt sets the "update_at" field.
func (m *BidApplyMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *BidApplyMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *BidApplyMutation) ResetUpdateAt() {
	m.update_at = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *BidApplyMutation) SetUpdateBy(s string) {
	m.update_by = &s
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *BidApplyMutation) UpdateBy() (r string, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the BidApply entity.
// If the BidApply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidApplyMutation) OldUpdateBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *BidApplyMutation) ClearUpdateBy() {
	m.update_by = nil
	m.clearedFields[bidapply.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *BidApplyMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[bidapply.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *BidApplyMutation) ResetUpdateBy() {
	m.update_by = nil
	delete(m.clearedFields, bidapply.FieldUpdateBy)
}

// ClearProject clears the "project" edge to the BidProject entity.
func (m *BidApplyMutation) ClearProject() {
	m.clearedproject = true
	m.clearedFields[bidapply.FieldProjectID] = struct{}{}
}

// ProjectCleared reports if the "project" edge to the BidProject entity was cleared.
func (m *BidApplyMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *BidApplyMutation) ProjectIDs() (ids []string) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *BidApplyMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// Where appends a list predicates to the BidApplyMutation builder.
func (m *BidApplyMutation) Where(ps ...predicate.BidApply) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BidApplyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BidApplyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BidApply, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BidApplyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BidApplyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BidApply).
func (m *BidApplyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BidApplyMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.business_id != nil {
		fields = append(fields, bidapply.FieldBusinessID)
	}
	if m.instance_id != nil {
		fields = append(fields, bidapply.FieldInstanceID)
	}
	if m.project != nil {
		fields = append(fields, bidapply.FieldProjectID)
	}
	if m.purchaser_name != nil {
		fields = append(fields, bidapply.FieldPurchaserName)
	}
	if m.bid_type != nil {
		fields = append(fields, bidapply.FieldBidType)
	}
	if m.agency_name != nil {
		fields = append(fields, bidapply.FieldAgencyName)
	}
	if m.agency_contact != nil {
		fields = append(fields, bidapply.FieldAgencyContact)
	}
	if m.opening_date != nil {
		fields = append(fields, bidapply.FieldOpeningDate)
	}
	if m.notice_url != nil {
		fields = append(fields, bidapply.FieldNoticeURL)
	}
	if m.budget_amount != nil {
		fields = append(fields, bidapply.FieldBudgetAmount)
	}
	if m.remark != nil {
		fields = append(fields, bidapply.FieldRemark)
	}
	if m.attachments != nil {
		fields = append(fields, bidapply.FieldAttachments)
	}
	if m.approval_status != nil {
		fields = append(fields, bidapply.FieldApprovalStatus)
	}
	if m._done != nil {
		fields = append(fields, bidapply.FieldDone)
	}
	if m.create_at != nil {
		fields = append(fields, bidapply.FieldCreateAt)
	}
	if m.create_by != nil {
		fields = append(fields, bidapply.FieldCreateBy)
	}
	if m.update_at != nil {
		fields = append(fields, bidapply.FieldUpdateAt)
	}
	if m.update_by != nil {
		fields = append(fields, bidapply.FieldUpdateBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BidApplyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bidapply.FieldBusinessID:
		return m.BusinessID()
	case bidapply.FieldInstanceID:
		return m.InstanceID()
	case bidapply.FieldProjectID:
		return m.ProjectID()
	case bidapply.FieldPurchaserName:
		return m.PurchaserName()
	case bidapply.FieldBidType:
		return m.BidType()
	case bidapply.FieldAgencyName:
		return m.AgencyName()
	case bidapply.FieldAgencyContact:
		return m.AgencyContact()
	case bidapply.FieldOpeningDate:
		return m.OpeningDate()
	case bidapply.FieldNoticeURL:
		return m.NoticeURL()
	case bidapply.FieldBudgetAmount:
		return m.BudgetAmount()
	case bidapply.FieldRemark:
		return m.Remark()
	case bidapply.FieldAttachments:
		return m.Attachments()
	case bidapply.FieldApprovalStatus:
		return m.ApprovalStatus()
	case bidapply.FieldDone:
		return m.Done()
	case bidapply.FieldCreateAt:
		return m.CreateAt()
	case bidapply.FieldCreateBy:
		return m.CreateBy()
	case bidapply.FieldUpdateAt:
		return m.UpdateAt()
	case bidapply.FieldUpdateBy:
		return m.UpdateBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BidApplyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bidapply.FieldBusinessID:
		return m.OldBusinessID(ctx)
	case bidapply.FieldInstanceID:
		return m.OldInstanceID(ctx)
	case bidapply.FieldProjectID:
		return m.OldProjectID(ctx)
	case bidapply.FieldPurchaserName:
		return m.OldPurchaserName(ctx)
	case bidapply.FieldBidType:
		return m.OldBidType(ctx)
	case bidapply.FieldAgencyName:
		return m.OldAgencyName(ctx)
	case bidapply.FieldAgencyContact:
		return m.OldAgencyContact(ctx)
	case bidapply.FieldOpeningDate:
		return m.OldOpeningDate(ctx)
	case bidapply.FieldNoticeURL:
		return m.OldNoticeURL(ctx)
	case bidapply.FieldBudgetAmount:
		return m.OldBudgetAmount(ctx)
	case bidapply.FieldRemark:
		return m.OldRemark(ctx)
	case bidapply.FieldAttachments:
		return m.OldAttachments(ctx)
	case bidapply.FieldApprovalStatus:
		return m.OldApprovalStatus(ctx)
	case bidapply.FieldDone:
		return m.OldDone(ctx)
	case bidapply.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case bidapply.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case bidapply.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case bidapply.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	}
	return nil, fmt.Errorf("unknown BidApply field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BidApplyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bidapply.FieldBusinessID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessID(v)
		return nil
	case bidapply.FieldInstanceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceID(v)
		return nil
	case bidapply.FieldProjectID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case bidapply.FieldPurchaserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPurchaserName(v)
		return nil
	case bidapply.FieldBidType:
		v, ok := value.(bidapply.BidType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBidType(v)
		return nil
	case bidapply.FieldAgencyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgencyName(v)
		return nil
	case bidapply.FieldAgencyContact:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgencyContact(v)
		return nil
	case bidapply.FieldOpeningDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOpeningDate(v)
		return nil
	case bidapply.FieldNoticeURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNoticeURL(v)
		return nil
	case bidapply.FieldBudgetAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBudgetAmount(v)
		return nil
	case bidapply.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case bidapply.FieldAttachments:
		v, ok := value.([]schema.Attachment)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttachments(v)
		return nil
	case bidapply.FieldApprovalStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApprovalStatus(v)
		return nil
	case bidapply.FieldDone:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDone(v)
		return nil
	case bidapply.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case bidapply.FieldCreateBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case bidapply.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case bidapply.FieldUpdateBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	}
	return fmt.Errorf("unknown BidApply field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BidApplyMutation) AddedFields() []string {
	var fields []string
	if m.addbudget_amount != nil {
		fields = append(fields, bidapply.FieldBudgetAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BidApplyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bidapply.FieldBudgetAmount:
		return m.AddedBudgetAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BidApplyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bidapply.FieldBudgetAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBudgetAmount(v)
		return nil
	}
	return fmt.Errorf("unknown BidApply numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BidApplyMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bidapply.FieldPurchaserName) {
		fields = append(fields, bidapply.FieldPurchaserName)
	}
	if m.FieldCleared(bidapply.FieldAgencyName) {
		fields = append(fields, bidapply.FieldAgencyName)
	}
	if m.FieldCleared(bidapply.FieldAgencyContact) {
		fields = append(fields, bidapply.FieldAgencyContact)
	}
	if m.FieldCleared(bidapply.FieldOpeningDate) {
		fields = append(fields, bidapply.FieldOpeningDate)
	}
	if m.FieldCleared(bidapply.FieldNoticeURL) {
		fields = append(fields, bidapply.FieldNoticeURL)
	}
	if m.FieldCleared(bidapply.FieldRemark) {
		fields = append(fields, bidapply.FieldRemark)
	}
	if m.FieldCleared(bidapply.FieldAttachments) {
		fields = append(fields, bidapply.FieldAttachments)
	}
	if m.FieldCleared(bidapply.FieldCreateBy) {
		fields = append(fields, bidapply.FieldCreateBy)
	}
	if m.FieldCleared(bidapply.FieldUpdateBy) {
		fields = append(fields, bidapply.FieldUpdateBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BidApplyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BidApplyMutation) ClearField(name string) error {
	switch name {
	case bidapply.FieldPurchaserName:
		m.ClearPurchaserName()
		return nil
	case bidapply.FieldAgencyName:
		m.ClearAgencyName()
		return nil
	case bidapply.FieldAgencyContact:
		m.ClearAgencyContact()
		return nil
	case bidapply.FieldOpeningDate:
		m.ClearOpeningDate()
		return nil
	case bidapply.FieldNoticeURL:
		m.ClearNoticeURL()
		return nil
	case bidapply.FieldRemark:
		m.ClearRemark()
		return nil
	case bidapply.FieldAttachments:
		m.ClearAttachments()
		return nil
	case bidapply.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case bidapply.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	}
	return fmt.Errorf("unknown BidApply nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BidApplyMutation) ResetField(name string) error {
	switch name {
	case bidapply.FieldBusinessID:
		m.ResetBusinessID()
		return nil
	case bidapply.FieldInstanceID:
		m.ResetInstanceID()
		return nil
	case bidapply.FieldProjectID:
		m.ResetProjectID()
		return nil
	case bidapply.FieldPurchaserName:
		m.ResetPurchaserName()
		return nil
	case bidapply.FieldBidType:
		m.ResetBidType()
		return nil
	case bidapply.FieldAgencyName:
		m.ResetAgencyName()
		return nil
	case bidapply.FieldAgencyContact:
		m.ResetAgencyContact()
		return nil
	case bidapply.FieldOpeningDate:
		m.ResetOpeningDate()
		return nil
	case bidapply.FieldNoticeURL:
		m.ResetNoticeURL()
		return nil
	case bidapply.FieldBudgetAmount:
		m.ResetBudgetAmount()
		return nil
	case bidapply.FieldRemark:
		m.ResetRemark()
		return nil
	case bidapply.FieldAttachments:
		m.ResetAttachments()
		return nil
	case bidapply.FieldApprovalStatus:
		m.ResetApprovalStatus()
		return nil
	case bidapply.FieldDone:
		m.ResetDone()
		return nil
	case bidapply.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case bidapply.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case bidapply.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case bidapply.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	}
	return fmt.Errorf("unknown BidApply field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BidApplyMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.project != nil {
		edges = append(edges, bidapply.EdgeProject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BidApplyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bidapply.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BidApplyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BidApplyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BidApplyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproject {
		edges = append(edges, bidapply.EdgeProject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BidApplyMutation) EdgeCleared(name string) bool {
	switch name {
	case bidapply.EdgeProject:
		return m.clearedproject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BidApplyMutation) ClearEdge(name string) error {
	switch name {
	case bidapply.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown BidApply unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BidApplyMutation) ResetEdge(name string) error {
	switch name {
	case bidapply.EdgeProject:
		m.ResetProject()
		return nil
	}
	return fmt.Errorf("unknown BidApply edge %s", name)
}

// BidExpenseMutation represents an operation that mutates the BidExpense nodes in the graph.
type BidExpenseMutation struct {
	config
	op              Op
	typ             string
	id              *string
	business_id     *string
	instance_id     *string
	bill_no         *string
	project_name    *string
	project_code    *string
	biz_rep_name    *string
	purchaser       *string
	fee_type_v1     *string
	fee_type        *bidexpense.FeeType
	pay_reason      *string
	refunded        *bool
	payee_bank      *string
	payee_name      *string
	payee_account   *string
	pay_ratio       *float64
	addpay_ratio    *float64
	pay_amount      *float64
	addpay_amount   *float64
	pay_remark      *string
	pay_method      *string
	plan_pay_time   *time.Time
	approval_status *string
	_done           *bool
	create_at       *time.Time
	create_by       *string
	update_at       *time.Time
	update_by       *string
	clearedFields   map[string]struct{}
	project         *string
	clearedproject  bool
	done            bool
	oldValue        func(context.Context) (*BidExpense, error)
	predicates      []predicate.BidExpense
}

var _ ent.Mutation = (*BidExpenseMutation)(nil)

// bidexpenseOption allows management of the mutation configuration using functional options.
type bidexpenseOption func(*BidExpenseMutation)

// newBidExpenseMutation creates new mutation for the BidExpense entity.
func newBidExpenseMutation(c config, op Op, opts ...bidexpenseOption) *BidExpenseMutation {
	m := &BidExpenseMutation{
		config:        c,
		op:            op,
		typ:           TypeBidExpense,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBidExpenseID sets the ID field of the mutation.
func withBidExpenseID(id string) bidexpenseOption {
	return func(m *BidExpenseMutation) {
		var (
			err   error
			once  sync.Once
			value *BidExpense
		)
		m.oldValue = func(ctx context.Context) (*BidExpense, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BidExpense.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBidExpense sets the old BidExpense of the mutation.
func withBidExpense(node *BidExpense) bidexpenseOption {
	return func(m *BidExpenseMutation) {
		m.oldValue = func(context.Context) (*BidExpense, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BidExpenseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BidExpenseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BidExpense entities.
func (m *BidExpenseMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BidExpenseMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BidExpenseMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BidExpense.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBusinessID sets the "business_id" field.
func (m *BidExpenseMutation) SetBusinessID(s string) {
	m.business_id = &s
}

// BusinessID returns the value of the "business_id" field in the mutation.
func (m *BidExpenseMutation) BusinessID() (r string, exists bool) {
	v := m.business_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessID returns the old "business_id" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldBusinessID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBusinessID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBusinessID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessID: %w", err)
	}
	return oldValue.BusinessID, nil
}

// ResetBusinessID resets all changes to the "business_id" field.
func (m *BidExpenseMutation) ResetBusinessID() {
	m.business_id = nil
}

// SetInstanceID sets the "instance_id" field.
func (m *BidExpenseMutation) SetInstanceID(s string) {
	m.instance_id = &s
}

// InstanceID returns the value of the "instance_id" field in the mutation.
func (m *BidExpenseMutation) InstanceID() (r string, exists bool) {
	v := m.instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceID returns the old "instance_id" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldInstanceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceID: %w", err)
	}
	return oldValue.InstanceID, nil
}

// ResetInstanceID resets all changes to the "instance_id" field.
func (m *BidExpenseMutation) ResetInstanceID() {
	m.instance_id = nil
}

// SetBillNo sets the "bill_no" field.
func (m *BidExpenseMutation) SetBillNo(s string) {
	m.bill_no = &s
}

// BillNo returns the value of the "bill_no" field in the mutation.
func (m *BidExpenseMutation) BillNo() (r string, exists bool) {
	v := m.bill_no
	if v == nil {
		return
	}
	return *v, true
}

// OldBillNo returns the old "bill_no" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldBillNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillNo: %w", err)
	}
	return oldValue.BillNo, nil
}

// ResetBillNo resets all changes to the "bill_no" field.
func (m *BidExpenseMutation) ResetBillNo() {
	m.bill_no = nil
}

// SetProjectID sets the "project_id" field.
func (m *BidExpenseMutation) SetProjectID(s string) {
	m.project = &s
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *BidExpenseMutation) ProjectID() (r string, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldProjectID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ClearProjectID clears the value of the "project_id" field.
func (m *BidExpenseMutation) ClearProjectID() {
	m.project = nil
	m.clearedFields[bidexpense.FieldProjectID] = struct{}{}
}

// ProjectIDCleared returns if the "project_id" field was cleared in this mutation.
func (m *BidExpenseMutation) ProjectIDCleared() bool {
	_, ok := m.clearedFields[bidexpense.FieldProjectID]
	return ok
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *BidExpenseMutation) ResetProjectID() {
	m.project = nil
	delete(m.clearedFields, bidexpense.FieldProjectID)
}

// SetProjectName sets the "project_name" field.
func (m *BidExpenseMutation) SetProjectName(s string) {
	m.project_name = &s
}

// ProjectName returns the value of the "project_name" field in the mutation.
func (m *BidExpenseMutation) ProjectName() (r string, exists bool) {
	v := m.project_name
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectName returns the old "project_name" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldProjectName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectName: %w", err)
	}
	return oldValue.ProjectName, nil
}

// ResetProjectName resets all changes to the "project_name" field.
func (m *BidExpenseMutation) ResetProjectName() {
	m.project_name = nil
}

// SetProjectCode sets the "project_code" field.
func (m *BidExpenseMutation) SetProjectCode(s string) {
	m.project_code = &s
}

// ProjectCode returns the value of the "project_code" field in the mutation.
func (m *BidExpenseMutation) ProjectCode() (r string, exists bool) {
	v := m.project_code
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectCode returns the old "project_code" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldProjectCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectCode: %w", err)
	}
	return oldValue.ProjectCode, nil
}

// ResetProjectCode resets all changes to the "project_code" field.
func (m *BidExpenseMutation) ResetProjectCode() {
	m.project_code = nil
}

// SetBizRepName sets the "biz_rep_name" field.
func (m *BidExpenseMutation) SetBizRepName(s string) {
	m.biz_rep_name = &s
}

// BizRepName returns the value of the "biz_rep_name" field in the mutation.
func (m *BidExpenseMutation) BizRepName() (r string, exists bool) {
	v := m.biz_rep_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBizRepName returns the old "biz_rep_name" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldBizRepName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBizRepName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBizRepName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBizRepName: %w", err)
	}
	return oldValue.BizRepName, nil
}

// ResetBizRepName resets all changes to the "biz_rep_name" field.
func (m *BidExpenseMutation) ResetBizRepName() {
	m.biz_rep_name = nil
}

// SetPurchaser sets the "purchaser" field.
func (m *BidExpenseMutation) SetPurchaser(s string) {
	m.purchaser = &s
}

// Purchaser returns the value of the "purchaser" field in the mutation.
func (m *BidExpenseMutation) Purchaser() (r string, exists bool) {
	v := m.purchaser
	if v == nil {
		return
	}
	return *v, true
}

// OldPurchaser returns the old "purchaser" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldPurchaser(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPurchaser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPurchaser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPurchaser: %w", err)
	}
	return oldValue.Purchaser, nil
}

// ClearPurchaser clears the value of the "purchaser" field.
func (m *BidExpenseMutation) ClearPurchaser() {
	m.purchaser = nil
	m.clearedFields[bidexpense.FieldPurchaser] = struct{}{}
}

// PurchaserCleared returns if the "purchaser" field was cleared in this mutation.
func (m *BidExpenseMutation) PurchaserCleared() bool {
	_, ok := m.clearedFields[bidexpense.FieldPurchaser]
	return ok
}

// ResetPurchaser resets all changes to the "purchaser" field.
func (m *BidExpenseMutation) ResetPurchaser() {
	m.purchaser = nil
	delete(m.clearedFields, bidexpense.FieldPurchaser)
}

// SetFeeTypeV1 sets the "fee_type_v1" field.
func (m *BidExpenseMutation) SetFeeTypeV1(s string) {
	m.fee_type_v1 = &s
}

// FeeTypeV1 returns the value of the "fee_type_v1" field in the mutation.
func (m *BidExpenseMutation) FeeTypeV1() (r string, exists bool) {
	v := m.fee_type_v1
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeTypeV1 returns the old "fee_type_v1" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldFeeTypeV1(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeeTypeV1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeeTypeV1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeTypeV1: %w", err)
	}
	return oldValue.FeeTypeV1, nil
}

// ClearFeeTypeV1 clears the value of the "fee_type_v1" field.
func (m *BidExpenseMutation) ClearFeeTypeV1() {
	m.fee_type_v1 = nil
	m.clearedFields[bidexpense.FieldFeeTypeV1] = struct{}{}
}

// FeeTypeV1Cleared returns if the "fee_type_v1" field was cleared in this mutation.
func (m *BidExpenseMutation) FeeTypeV1Cleared() bool {
	_, ok := m.clearedFields[bidexpense.FieldFeeTypeV1]
	return ok
}

// ResetFeeTypeV1 resets all changes to the "fee_type_v1" field.
func (m *BidExpenseMutation) ResetFeeTypeV1() {
	m.fee_type_v1 = nil
	delete(m.clearedFields, bidexpense.FieldFeeTypeV1)
}

// SetFeeType sets the "fee_type" field.
func (m *BidExpenseMutation) SetFeeType(bt bidexpense.FeeType) {
	m.fee_type = &bt
}

// FeeType returns the value of the "fee_type" field in the mutation.
func (m *BidExpenseMutation) FeeType() (r bidexpense.FeeType, exists bool) {
	v := m.fee_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeType returns the old "fee_type" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldFeeType(ctx context.Context) (v bidexpense.FeeType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeeType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeeType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeType: %w", err)
	}
	return oldValue.FeeType, nil
}

// ResetFeeType resets all changes to the "fee_type" field.
func (m *BidExpenseMutation) ResetFeeType() {
	m.fee_type = nil
}

// SetPayReason sets the "pay_reason" field.
func (m *BidExpenseMutation) SetPayReason(s string) {
	m.pay_reason = &s
}

// PayReason returns the value of the "pay_reason" field in the mutation.
func (m *BidExpenseMutation) PayReason() (r string, exists bool) {
	v := m.pay_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldPayReason returns the old "pay_reason" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldPayReason(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayReason: %w", err)
	}
	return oldValue.PayReason, nil
}

// ClearPayReason clears the value of the "pay_reason" field.
func (m *BidExpenseMutation) ClearPayReason() {
	m.pay_reason = nil
	m.clearedFields[bidexpense.FieldPayReason] = struct{}{}
}

// PayReasonCleared returns if the "pay_reason" field was cleared in this mutation.
func (m *BidExpenseMutation) PayReasonCleared() bool {
	_, ok := m.clearedFields[bidexpense.FieldPayReason]
	return ok
}

// ResetPayReason resets all changes to the "pay_reason" field.
func (m *BidExpenseMutation) ResetPayReason() {
	m.pay_reason = nil
	delete(m.clearedFields, bidexpense.FieldPayReason)
}

// SetRefunded sets the "refunded" field.
func (m *BidExpenseMutation) SetRefunded(b bool) {
	m.refunded = &b
}

// Refunded returns the value of the "refunded" field in the mutation.
func (m *BidExpenseMutation) Refunded() (r bool, exists bool) {
	v := m.refunded
	if v == nil {
		return
	}
	return *v, true
}

// OldRefunded returns the old "refunded" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldRefunded(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefunded is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefunded requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefunded: %w", err)
	}
	return oldValue.Refunded, nil
}

// ResetRefunded resets all changes to the "refunded" field.
func (m *BidExpenseMutation) ResetRefunded() {
	m.refunded = nil
}

// SetPayeeBank sets the "payee_bank" field.
func (m *BidExpenseMutation) SetPayeeBank(s string) {
	m.payee_bank = &s
}

// PayeeBank returns the value of the "payee_bank" field in the mutation.
func (m *BidExpenseMutation) PayeeBank() (r string, exists bool) {
	v := m.payee_bank
	if v == nil {
		return
	}
	return *v, true
}

// OldPayeeBank returns the old "payee_bank" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldPayeeBank(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayeeBank is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayeeBank requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayeeBank: %w", err)
	}
	return oldValue.PayeeBank, nil
}

// ResetPayeeBank resets all changes to the "payee_bank" field.
func (m *BidExpenseMutation) ResetPayeeBank() {
	m.payee_bank = nil
}

// SetPayeeName sets the "payee_name" field.
func (m *BidExpenseMutation) SetPayeeName(s string) {
	m.payee_name = &s
}

// PayeeName returns the value of the "payee_name" field in the mutation.
func (m *BidExpenseMutation) PayeeName() (r string, exists bool) {
	v := m.payee_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPayeeName returns the old "payee_name" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldPayeeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayeeName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayeeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayeeName: %w", err)
	}
	return oldValue.PayeeName, nil
}

// ResetPayeeName resets all changes to the "payee_name" field.
func (m *BidExpenseMutation) ResetPayeeName() {
	m.payee_name = nil
}

// SetPayeeAccount sets the "payee_account" field.
func (m *BidExpenseMutation) SetPayeeAccount(s string) {
	m.payee_account = &s
}

// PayeeAccount returns the value of the "payee_account" field in the mutation.
func (m *BidExpenseMutation) PayeeAccount() (r string, exists bool) {
	v := m.payee_account
	if v == nil {
		return
	}
	return *v, true
}

// OldPayeeAccount returns the old "payee_account" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldPayeeAccount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayeeAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayeeAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayeeAccount: %w", err)
	}
	return oldValue.PayeeAccount, nil
}

// ResetPayeeAccount resets all changes to the "payee_account" field.
func (m *BidExpenseMutation) ResetPayeeAccount() {
	m.payee_account = nil
}

// SetPayRatio sets the "pay_ratio" field.
func (m *BidExpenseMutation) SetPayRatio(f float64) {
	m.pay_ratio = &f
	m.addpay_ratio = nil
}

// PayRatio returns the value of the "pay_ratio" field in the mutation.
func (m *BidExpenseMutation) PayRatio() (r float64, exists bool) {
	v := m.pay_ratio
	if v == nil {
		return
	}
	return *v, true
}

// OldPayRatio returns the old "pay_ratio" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldPayRatio(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayRatio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayRatio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayRatio: %w", err)
	}
	return oldValue.PayRatio, nil
}

// AddPayRatio adds f to the "pay_ratio" field.
func (m *BidExpenseMutation) AddPayRatio(f float64) {
	if m.addpay_ratio != nil {
		*m.addpay_ratio += f
	} else {
		m.addpay_ratio = &f
	}
}

// AddedPayRatio returns the value that was added to the "pay_ratio" field in this mutation.
func (m *BidExpenseMutation) AddedPayRatio() (r float64, exists bool) {
	v := m.addpay_ratio
	if v == nil {
		return
	}
	return *v, true
}

// ResetPayRatio resets all changes to the "pay_ratio" field.
func (m *BidExpenseMutation) ResetPayRatio() {
	m.pay_ratio = nil
	m.addpay_ratio = nil
}

// SetPayAmount sets the "pay_amount" field.
func (m *BidExpenseMutation) SetPayAmount(f float64) {
	m.pay_amount = &f
	m.addpay_amount = nil
}

// PayAmount returns the value of the "pay_amount" field in the mutation.
func (m *BidExpenseMutation) PayAmount() (r float64, exists bool) {
	v := m.pay_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPayAmount returns the old "pay_amount" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldPayAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayAmount: %w", err)
	}
	return oldValue.PayAmount, nil
}

// AddPayAmount adds f to the "pay_amount" field.
func (m *BidExpenseMutation) AddPayAmount(f float64) {
	if m.addpay_amount != nil {
		*m.addpay_amount += f
	} else {
		m.addpay_amount = &f
	}
}

// AddedPayAmount returns the value that was added to the "pay_amount" field in this mutation.
func (m *BidExpenseMutation) AddedPayAmount() (r float64, exists bool) {
	v := m.addpay_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetPayAmount resets all changes to the "pay_amount" field.
func (m *BidExpenseMutation) ResetPayAmount() {
	m.pay_amount = nil
	m.addpay_amount = nil
}

// SetPayRemark sets the "pay_remark" field.
func (m *BidExpenseMutation) SetPayRemark(s string) {
	m.pay_remark = &s
}

// PayRemark returns the value of the "pay_remark" field in the mutation.
func (m *BidExpenseMutation) PayRemark() (r string, exists bool) {
	v := m.pay_remark
	if v == nil {
		return
	}
	return *v, true
}

// OldPayRemark returns the old "pay_remark" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldPayRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayRemark: %w", err)
	}
	return oldValue.PayRemark, nil
}

// ClearPayRemark clears the value of the "pay_remark" field.
func (m *BidExpenseMutation) ClearPayRemark() {
	m.pay_remark = nil
	m.clearedFields[bidexpense.FieldPayRemark] = struct{}{}
}

// PayRemarkCleared returns if the "pay_remark" field was cleared in this mutation.
func (m *BidExpenseMutation) PayRemarkCleared() bool {
	_, ok := m.clearedFields[bidexpense.FieldPayRemark]
	return ok
}

// ResetPayRemark resets all changes to the "pay_remark" field.
func (m *BidExpenseMutation) ResetPayRemark() {
	m.pay_remark = nil
	delete(m.clearedFields, bidexpense.FieldPayRemark)
}

// SetPayMethod sets the "pay_method" field.
func (m *BidExpenseMutation) SetPayMethod(s string) {
	m.pay_method = &s
}

// PayMethod returns the value of the "pay_method" field in the mutation.
func (m *BidExpenseMutation) PayMethod() (r string, exists bool) {
	v := m.pay_method
	if v == nil {
		return
	}
	return *v, true
}

// OldPayMethod returns the old "pay_method" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldPayMethod(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayMethod: %w", err)
	}
	return oldValue.PayMethod, nil
}

// ClearPayMethod clears the value of the "pay_method" field.
func (m *BidExpenseMutation) ClearPayMethod() {
	m.pay_method = nil
	m.clearedFields[bidexpense.FieldPayMethod] = struct{}{}
}

// PayMethodCleared returns if the "pay_method" field was cleared in this mutation.
func (m *BidExpenseMutation) PayMethodCleared() bool {
	_, ok := m.clearedFields[bidexpense.FieldPayMethod]
	return ok
}

// ResetPayMethod resets all changes to the "pay_method" field.
func (m *BidExpenseMutation) ResetPayMethod() {
	m.pay_method = nil
	delete(m.clearedFields, bidexpense.FieldPayMethod)
}

// SetPlanPayTime sets the "plan_pay_time" field.
func (m *BidExpenseMutation) SetPlanPayTime(t time.Time) {
	m.plan_pay_time = &t
}

// PlanPayTime returns the value of the "plan_pay_time" field in the mutation.
func (m *BidExpenseMutation) PlanPayTime() (r time.Time, exists bool) {
	v := m.plan_pay_time
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanPayTime returns the old "plan_pay_time" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldPlanPayTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanPayTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanPayTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanPayTime: %w", err)
	}
	return oldValue.PlanPayTime, nil
}

// ResetPlanPayTime resets all changes to the "plan_pay_time" field.
func (m *BidExpenseMutation) ResetPlanPayTime() {
	m.plan_pay_time = nil
}

// SetApprovalStatus sets the "approval_status" field.
func (m *BidExpenseMutation) SetApprovalStatus(s string) {
	m.approval_status = &s
}

// ApprovalStatus returns the value of the "approval_status" field in the mutation.
func (m *BidExpenseMutation) ApprovalStatus() (r string, exists bool) {
	v := m.approval_status
	if v == nil {
		return
	}
	return *v, true
}

// OldApprovalStatus returns the old "approval_status" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldApprovalStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApprovalStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApprovalStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApprovalStatus: %w", err)
	}
	return oldValue.ApprovalStatus, nil
}

// ResetApprovalStatus resets all changes to the "approval_status" field.
func (m *BidExpenseMutation) ResetApprovalStatus() {
	m.approval_status = nil
}

// SetDone sets the "done" field.
func (m *BidExpenseMutation) SetDone(b bool) {
	m._done = &b
}

// Done returns the value of the "done" field in the mutation.
func (m *BidExpenseMutation) Done() (r bool, exists bool) {
	v := m._done
	if v == nil {
		return
	}
	return *v, true
}

// OldDone returns the old "done" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldDone(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDone: %w", err)
	}
	return oldValue.Done, nil
}

// ResetDone resets all changes to the "done" field.
func (m *BidExpenseMutation) ResetDone() {
	m._done = nil
}

// SetCreateAt sets the "create_at" field.
func (m *BidExpenseMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *BidExpenseMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *BidExpenseMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetCreateBy sets the "create_by" field.
func (m *BidExpenseMutation) SetCreateBy(s string) {
	m.create_by = &s
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *BidExpenseMutation) CreateBy() (r string, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldCreateBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *BidExpenseMutation) ClearCreateBy() {
	m.create_by = nil
	m.clearedFields[bidexpense.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *BidExpenseMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[bidexpense.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *BidExpenseMutation) ResetCreateBy() {
	m.create_by = nil
	delete(m.clearedFields, bidexpense.FieldCreateBy)
}

// SetUpdateAt sets the "update_at" field.
func (m *BidExpenseMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *BidExpenseMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *BidExpenseMutation) ResetUpdateAt() {
	m.update_at = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *BidExpenseMutation) SetUpdateBy(s string) {
	m.update_by = &s
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *BidExpenseMutation) UpdateBy() (r string, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the BidExpense entity.
// If the BidExpense object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidExpenseMutation) OldUpdateBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *BidExpenseMutation) ClearUpdateBy() {
	m.update_by = nil
	m.clearedFields[bidexpense.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *BidExpenseMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[bidexpense.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *BidExpenseMutation) ResetUpdateBy() {
	m.update_by = nil
	delete(m.clearedFields, bidexpense.FieldUpdateBy)
}

// ClearProject clears the "project" edge to the BidProject entity.
func (m *BidExpenseMutation) ClearProject() {
	m.clearedproject = true
	m.clearedFields[bidexpense.FieldProjectID] = struct{}{}
}

// ProjectCleared reports if the "project" edge to the BidProject entity was cleared.
func (m *BidExpenseMutation) ProjectCleared() bool {
	return m.ProjectIDCleared() || m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *BidExpenseMutation) ProjectIDs() (ids []string) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *BidExpenseMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// Where appends a list predicates to the BidExpenseMutation builder.
func (m *BidExpenseMutation) Where(ps ...predicate.BidExpense) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BidExpenseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BidExpenseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BidExpense, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BidExpenseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BidExpenseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BidExpense).
func (m *BidExpenseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BidExpenseMutation) Fields() []string {
	fields := make([]string, 0, 26)
	if m.business_id != nil {
		fields = append(fields, bidexpense.FieldBusinessID)
	}
	if m.instance_id != nil {
		fields = append(fields, bidexpense.FieldInstanceID)
	}
	if m.bill_no != nil {
		fields = append(fields, bidexpense.FieldBillNo)
	}
	if m.project != nil {
		fields = append(fields, bidexpense.FieldProjectID)
	}
	if m.project_name != nil {
		fields = append(fields, bidexpense.FieldProjectName)
	}
	if m.project_code != nil {
		fields = append(fields, bidexpense.FieldProjectCode)
	}
	if m.biz_rep_name != nil {
		fields = append(fields, bidexpense.FieldBizRepName)
	}
	if m.purchaser != nil {
		fields = append(fields, bidexpense.FieldPurchaser)
	}
	if m.fee_type_v1 != nil {
		fields = append(fields, bidexpense.FieldFeeTypeV1)
	}
	if m.fee_type != nil {
		fields = append(fields, bidexpense.FieldFeeType)
	}
	if m.pay_reason != nil {
		fields = append(fields, bidexpense.FieldPayReason)
	}
	if m.refunded != nil {
		fields = append(fields, bidexpense.FieldRefunded)
	}
	if m.payee_bank != nil {
		fields = append(fields, bidexpense.FieldPayeeBank)
	}
	if m.payee_name != nil {
		fields = append(fields, bidexpense.FieldPayeeName)
	}
	if m.payee_account != nil {
		fields = append(fields, bidexpense.FieldPayeeAccount)
	}
	if m.pay_ratio != nil {
		fields = append(fields, bidexpense.FieldPayRatio)
	}
	if m.pay_amount != nil {
		fields = append(fields, bidexpense.FieldPayAmount)
	}
	if m.pay_remark != nil {
		fields = append(fields, bidexpense.FieldPayRemark)
	}
	if m.pay_method != nil {
		fields = append(fields, bidexpense.FieldPayMethod)
	}
	if m.plan_pay_time != nil {
		fields = append(fields, bidexpense.FieldPlanPayTime)
	}
	if m.approval_status != nil {
		fields = append(fields, bidexpense.FieldApprovalStatus)
	}
	if m._done != nil {
		fields = append(fields, bidexpense.FieldDone)
	}
	if m.create_at != nil {
		fields = append(fields, bidexpense.FieldCreateAt)
	}
	if m.create_by != nil {
		fields = append(fields, bidexpense.FieldCreateBy)
	}
	if m.update_at != nil {
		fields = append(fields, bidexpense.FieldUpdateAt)
	}
	if m.update_by != nil {
		fields = append(fields, bidexpense.FieldUpdateBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BidExpenseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bidexpense.FieldBusinessID:
		return m.BusinessID()
	case bidexpense.FieldInstanceID:
		return m.InstanceID()
	case bidexpense.FieldBillNo:
		return m.BillNo()
	case bidexpense.FieldProjectID:
		return m.ProjectID()
	case bidexpense.FieldProjectName:
		return m.ProjectName()
	case bidexpense.FieldProjectCode:
		return m.ProjectCode()
	case bidexpense.FieldBizRepName:
		return m.BizRepName()
	case bidexpense.FieldPurchaser:
		return m.Purchaser()
	case bidexpense.FieldFeeTypeV1:
		return m.FeeTypeV1()
	case bidexpense.FieldFeeType:
		return m.FeeType()
	case bidexpense.FieldPayReason:
		return m.PayReason()
	case bidexpense.FieldRefunded:
		return m.Refunded()
	case bidexpense.FieldPayeeBank:
		return m.PayeeBank()
	case bidexpense.FieldPayeeName:
		return m.PayeeName()
	case bidexpense.FieldPayeeAccount:
		return m.PayeeAccount()
	case bidexpense.FieldPayRatio:
		return m.PayRatio()
	case bidexpense.FieldPayAmount:
		return m.PayAmount()
	case bidexpense.FieldPayRemark:
		return m.PayRemark()
	case bidexpense.FieldPayMethod:
		return m.PayMethod()
	case bidexpense.FieldPlanPayTime:
		return m.PlanPayTime()
	case bidexpense.FieldApprovalStatus:
		return m.ApprovalStatus()
	case bidexpense.FieldDone:
		return m.Done()
	case bidexpense.FieldCreateAt:
		return m.CreateAt()
	case bidexpense.FieldCreateBy:
		return m.CreateBy()
	case bidexpense.FieldUpdateAt:
		return m.UpdateAt()
	case bidexpense.FieldUpdateBy:
		return m.UpdateBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BidExpenseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bidexpense.FieldBusinessID:
		return m.OldBusinessID(ctx)
	case bidexpense.FieldInstanceID:
		return m.OldInstanceID(ctx)
	case bidexpense.FieldBillNo:
		return m.OldBillNo(ctx)
	case bidexpense.FieldProjectID:
		return m.OldProjectID(ctx)
	case bidexpense.FieldProjectName:
		return m.OldProjectName(ctx)
	case bidexpense.FieldProjectCode:
		return m.OldProjectCode(ctx)
	case bidexpense.FieldBizRepName:
		return m.OldBizRepName(ctx)
	case bidexpense.FieldPurchaser:
		return m.OldPurchaser(ctx)
	case bidexpense.FieldFeeTypeV1:
		return m.OldFeeTypeV1(ctx)
	case bidexpense.FieldFeeType:
		return m.OldFeeType(ctx)
	case bidexpense.FieldPayReason:
		return m.OldPayReason(ctx)
	case bidexpense.FieldRefunded:
		return m.OldRefunded(ctx)
	case bidexpense.FieldPayeeBank:
		return m.OldPayeeBank(ctx)
	case bidexpense.FieldPayeeName:
		return m.OldPayeeName(ctx)
	case bidexpense.FieldPayeeAccount:
		return m.OldPayeeAccount(ctx)
	case bidexpense.FieldPayRatio:
		return m.OldPayRatio(ctx)
	case bidexpense.FieldPayAmount:
		return m.OldPayAmount(ctx)
	case bidexpense.FieldPayRemark:
		return m.OldPayRemark(ctx)
	case bidexpense.FieldPayMethod:
		return m.OldPayMethod(ctx)
	case bidexpense.FieldPlanPayTime:
		return m.OldPlanPayTime(ctx)
	case bidexpense.FieldApprovalStatus:
		return m.OldApprovalStatus(ctx)
	case bidexpense.FieldDone:
		return m.OldDone(ctx)
	case bidexpense.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case bidexpense.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case bidexpense.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case bidexpense.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	}
	return nil, fmt.Errorf("unknown BidExpense field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BidExpenseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bidexpense.FieldBusinessID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessID(v)
		return nil
	case bidexpense.FieldInstanceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceID(v)
		return nil
	case bidexpense.FieldBillNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillNo(v)
		return nil
	case bidexpense.FieldProjectID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case bidexpense.FieldProjectName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectName(v)
		return nil
	case bidexpense.FieldProjectCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectCode(v)
		return nil
	case bidexpense.FieldBizRepName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBizRepName(v)
		return nil
	case bidexpense.FieldPurchaser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPurchaser(v)
		return nil
	case bidexpense.FieldFeeTypeV1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeTypeV1(v)
		return nil
	case bidexpense.FieldFeeType:
		v, ok := value.(bidexpense.FeeType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeType(v)
		return nil
	case bidexpense.FieldPayReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayReason(v)
		return nil
	case bidexpense.FieldRefunded:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefunded(v)
		return nil
	case bidexpense.FieldPayeeBank:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayeeBank(v)
		return nil
	case bidexpense.FieldPayeeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayeeName(v)
		return nil
	case bidexpense.FieldPayeeAccount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayeeAccount(v)
		return nil
	case bidexpense.FieldPayRatio:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayRatio(v)
		return nil
	case bidexpense.FieldPayAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayAmount(v)
		return nil
	case bidexpense.FieldPayRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayRemark(v)
		return nil
	case bidexpense.FieldPayMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayMethod(v)
		return nil
	case bidexpense.FieldPlanPayTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanPayTime(v)
		return nil
	case bidexpense.FieldApprovalStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApprovalStatus(v)
		return nil
	case bidexpense.FieldDone:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDone(v)
		return nil
	case bidexpense.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case bidexpense.FieldCreateBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case bidexpense.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case bidexpense.FieldUpdateBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	}
	return fmt.Errorf("unknown BidExpense field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BidExpenseMutation) AddedFields() []string {
	var fields []string
	if m.addpay_ratio != nil {
		fields = append(fields, bidexpense.FieldPayRatio)
	}
	if m.addpay_amount != nil {
		fields = append(fields, bidexpense.FieldPayAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BidExpenseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bidexpense.FieldPayRatio:
		return m.AddedPayRatio()
	case bidexpense.FieldPayAmount:
		return m.AddedPayAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BidExpenseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bidexpense.FieldPayRatio:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPayRatio(v)
		return nil
	case bidexpense.FieldPayAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPayAmount(v)
		return nil
	}
	return fmt.Errorf("unknown BidExpense numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BidExpenseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bidexpense.FieldProjectID) {
		fields = append(fields, bidexpense.FieldProjectID)
	}
	if m.FieldCleared(bidexpense.FieldPurchaser) {
		fields = append(fields, bidexpense.FieldPurchaser)
	}
	if m.FieldCleared(bidexpense.FieldFeeTypeV1) {
		fields = append(fields, bidexpense.FieldFeeTypeV1)
	}
	if m.FieldCleared(bidexpense.FieldPayReason) {
		fields = append(fields, bidexpense.FieldPayReason)
	}
	if m.FieldCleared(bidexpense.FieldPayRemark) {
		fields = append(fields, bidexpense.FieldPayRemark)
	}
	if m.FieldCleared(bidexpense.FieldPayMethod) {
		fields = append(fields, bidexpense.FieldPayMethod)
	}
	if m.FieldCleared(bidexpense.FieldCreateBy) {
		fields = append(fields, bidexpense.FieldCreateBy)
	}
	if m.FieldCleared(bidexpense.FieldUpdateBy) {
		fields = append(fields, bidexpense.FieldUpdateBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BidExpenseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BidExpenseMutation) ClearField(name string) error {
	switch name {
	case bidexpense.FieldProjectID:
		m.ClearProjectID()
		return nil
	case bidexpense.FieldPurchaser:
		m.ClearPurchaser()
		return nil
	case bidexpense.FieldFeeTypeV1:
		m.ClearFeeTypeV1()
		return nil
	case bidexpense.FieldPayReason:
		m.ClearPayReason()
		return nil
	case bidexpense.FieldPayRemark:
		m.ClearPayRemark()
		return nil
	case bidexpense.FieldPayMethod:
		m.ClearPayMethod()
		return nil
	case bidexpense.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case bidexpense.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	}
	return fmt.Errorf("unknown BidExpense nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BidExpenseMutation) ResetField(name string) error {
	switch name {
	case bidexpense.FieldBusinessID:
		m.ResetBusinessID()
		return nil
	case bidexpense.FieldInstanceID:
		m.ResetInstanceID()
		return nil
	case bidexpense.FieldBillNo:
		m.ResetBillNo()
		return nil
	case bidexpense.FieldProjectID:
		m.ResetProjectID()
		return nil
	case bidexpense.FieldProjectName:
		m.ResetProjectName()
		return nil
	case bidexpense.FieldProjectCode:
		m.ResetProjectCode()
		return nil
	case bidexpense.FieldBizRepName:
		m.ResetBizRepName()
		return nil
	case bidexpense.FieldPurchaser:
		m.ResetPurchaser()
		return nil
	case bidexpense.FieldFeeTypeV1:
		m.ResetFeeTypeV1()
		return nil
	case bidexpense.FieldFeeType:
		m.ResetFeeType()
		return nil
	case bidexpense.FieldPayReason:
		m.ResetPayReason()
		return nil
	case bidexpense.FieldRefunded:
		m.ResetRefunded()
		return nil
	case bidexpense.FieldPayeeBank:
		m.ResetPayeeBank()
		return nil
	case bidexpense.FieldPayeeName:
		m.ResetPayeeName()
		return nil
	case bidexpense.FieldPayeeAccount:
		m.ResetPayeeAccount()
		return nil
	case bidexpense.FieldPayRatio:
		m.ResetPayRatio()
		return nil
	case bidexpense.FieldPayAmount:
		m.ResetPayAmount()
		return nil
	case bidexpense.FieldPayRemark:
		m.ResetPayRemark()
		return nil
	case bidexpense.FieldPayMethod:
		m.ResetPayMethod()
		return nil
	case bidexpense.FieldPlanPayTime:
		m.ResetPlanPayTime()
		return nil
	case bidexpense.FieldApprovalStatus:
		m.ResetApprovalStatus()
		return nil
	case bidexpense.FieldDone:
		m.ResetDone()
		return nil
	case bidexpense.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case bidexpense.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case bidexpense.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case bidexpense.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	}
	return fmt.Errorf("unknown BidExpense field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BidExpenseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.project != nil {
		edges = append(edges, bidexpense.EdgeProject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BidExpenseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bidexpense.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BidExpenseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BidExpenseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BidExpenseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproject {
		edges = append(edges, bidexpense.EdgeProject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BidExpenseMutation) EdgeCleared(name string) bool {
	switch name {
	case bidexpense.EdgeProject:
		return m.clearedproject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BidExpenseMutation) ClearEdge(name string) error {
	switch name {
	case bidexpense.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown BidExpense unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BidExpenseMutation) ResetEdge(name string) error {
	switch name {
	case bidexpense.EdgeProject:
		m.ResetProject()
		return nil
	}
	return fmt.Errorf("unknown BidExpense edge %s", name)
}

// BidInfoMutation represents an operation that mutates the BidInfo nodes in the graph.
type BidInfoMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_at     *time.Time
	create_by     *string
	update_at     *time.Time
	update_by     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*BidInfo, error)
	predicates    []predicate.BidInfo
}

var _ ent.Mutation = (*BidInfoMutation)(nil)

// bidinfoOption allows management of the mutation configuration using functional options.
type bidinfoOption func(*BidInfoMutation)

// newBidInfoMutation creates new mutation for the BidInfo entity.
func newBidInfoMutation(c config, op Op, opts ...bidinfoOption) *BidInfoMutation {
	m := &BidInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeBidInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBidInfoID sets the ID field of the mutation.
func withBidInfoID(id int) bidinfoOption {
	return func(m *BidInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *BidInfo
		)
		m.oldValue = func(ctx context.Context) (*BidInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BidInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBidInfo sets the old BidInfo of the mutation.
func withBidInfo(node *BidInfo) bidinfoOption {
	return func(m *BidInfoMutation) {
		m.oldValue = func(context.Context) (*BidInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BidInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BidInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BidInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BidInfoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BidInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateAt sets the "create_at" field.
func (m *BidInfoMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *BidInfoMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the BidInfo entity.
// If the BidInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidInfoMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *BidInfoMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetCreateBy sets the "create_by" field.
func (m *BidInfoMutation) SetCreateBy(s string) {
	m.create_by = &s
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *BidInfoMutation) CreateBy() (r string, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the BidInfo entity.
// If the BidInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidInfoMutation) OldCreateBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *BidInfoMutation) ClearCreateBy() {
	m.create_by = nil
	m.clearedFields[bidinfo.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *BidInfoMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[bidinfo.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *BidInfoMutation) ResetCreateBy() {
	m.create_by = nil
	delete(m.clearedFields, bidinfo.FieldCreateBy)
}

// SetUpdateAt sets the "update_at" field.
func (m *BidInfoMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *BidInfoMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the BidInfo entity.
// If the BidInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidInfoMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *BidInfoMutation) ResetUpdateAt() {
	m.update_at = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *BidInfoMutation) SetUpdateBy(s string) {
	m.update_by = &s
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *BidInfoMutation) UpdateBy() (r string, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the BidInfo entity.
// If the BidInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidInfoMutation) OldUpdateBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *BidInfoMutation) ClearUpdateBy() {
	m.update_by = nil
	m.clearedFields[bidinfo.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *BidInfoMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[bidinfo.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *BidInfoMutation) ResetUpdateBy() {
	m.update_by = nil
	delete(m.clearedFields, bidinfo.FieldUpdateBy)
}

// Where appends a list predicates to the BidInfoMutation builder.
func (m *BidInfoMutation) Where(ps ...predicate.BidInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BidInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BidInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BidInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BidInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BidInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BidInfo).
func (m *BidInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BidInfoMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_at != nil {
		fields = append(fields, bidinfo.FieldCreateAt)
	}
	if m.create_by != nil {
		fields = append(fields, bidinfo.FieldCreateBy)
	}
	if m.update_at != nil {
		fields = append(fields, bidinfo.FieldUpdateAt)
	}
	if m.update_by != nil {
		fields = append(fields, bidinfo.FieldUpdateBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BidInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bidinfo.FieldCreateAt:
		return m.CreateAt()
	case bidinfo.FieldCreateBy:
		return m.CreateBy()
	case bidinfo.FieldUpdateAt:
		return m.UpdateAt()
	case bidinfo.FieldUpdateBy:
		return m.UpdateBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BidInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bidinfo.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case bidinfo.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case bidinfo.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case bidinfo.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	}
	return nil, fmt.Errorf("unknown BidInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BidInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bidinfo.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case bidinfo.FieldCreateBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case bidinfo.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case bidinfo.FieldUpdateBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	}
	return fmt.Errorf("unknown BidInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BidInfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BidInfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BidInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BidInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BidInfoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bidinfo.FieldCreateBy) {
		fields = append(fields, bidinfo.FieldCreateBy)
	}
	if m.FieldCleared(bidinfo.FieldUpdateBy) {
		fields = append(fields, bidinfo.FieldUpdateBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BidInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BidInfoMutation) ClearField(name string) error {
	switch name {
	case bidinfo.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case bidinfo.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	}
	return fmt.Errorf("unknown BidInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BidInfoMutation) ResetField(name string) error {
	switch name {
	case bidinfo.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case bidinfo.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case bidinfo.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case bidinfo.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	}
	return fmt.Errorf("unknown BidInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BidInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BidInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BidInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BidInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BidInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BidInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BidInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BidInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BidInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BidInfo edge %s", name)
}

// BidProjectMutation represents an operation that mutates the BidProject nodes in the graph.
type BidProjectMutation struct {
	config
	op              Op
	typ             string
	id              *string
	code            *string
	name            *string
	_type           *bidproject.Type
	department_code *string
	department_name *string
	biz_rep_no      *string
	biz_rep_name    *string
	create_at       *time.Time
	create_by       *string
	update_at       *time.Time
	update_by       *string
	clearedFields   map[string]struct{}
	apply           *string
	clearedapply    bool
	expense         map[string]struct{}
	removedexpense  map[string]struct{}
	clearedexpense  bool
	done            bool
	oldValue        func(context.Context) (*BidProject, error)
	predicates      []predicate.BidProject
}

var _ ent.Mutation = (*BidProjectMutation)(nil)

// bidprojectOption allows management of the mutation configuration using functional options.
type bidprojectOption func(*BidProjectMutation)

// newBidProjectMutation creates new mutation for the BidProject entity.
func newBidProjectMutation(c config, op Op, opts ...bidprojectOption) *BidProjectMutation {
	m := &BidProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeBidProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBidProjectID sets the ID field of the mutation.
func withBidProjectID(id string) bidprojectOption {
	return func(m *BidProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *BidProject
		)
		m.oldValue = func(ctx context.Context) (*BidProject, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BidProject.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBidProject sets the old BidProject of the mutation.
func withBidProject(node *BidProject) bidprojectOption {
	return func(m *BidProjectMutation) {
		m.oldValue = func(context.Context) (*BidProject, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BidProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BidProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BidProject entities.
func (m *BidProjectMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BidProjectMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BidProjectMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BidProject.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *BidProjectMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *BidProjectMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the BidProject entity.
// If the BidProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidProjectMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *BidProjectMutation) ResetCode() {
	m.code = nil
}

// SetName sets the "name" field.
func (m *BidProjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BidProjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the BidProject entity.
// If the BidProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidProjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BidProjectMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *BidProjectMutation) SetType(b bidproject.Type) {
	m._type = &b
}

// GetType returns the value of the "type" field in the mutation.
func (m *BidProjectMutation) GetType() (r bidproject.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the BidProject entity.
// If the BidProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidProjectMutation) OldType(ctx context.Context) (v bidproject.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *BidProjectMutation) ResetType() {
	m._type = nil
}

// SetDepartmentCode sets the "department_code" field.
func (m *BidProjectMutation) SetDepartmentCode(s string) {
	m.department_code = &s
}

// DepartmentCode returns the value of the "department_code" field in the mutation.
func (m *BidProjectMutation) DepartmentCode() (r string, exists bool) {
	v := m.department_code
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartmentCode returns the old "department_code" field's value of the BidProject entity.
// If the BidProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidProjectMutation) OldDepartmentCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartmentCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartmentCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartmentCode: %w", err)
	}
	return oldValue.DepartmentCode, nil
}

// ResetDepartmentCode resets all changes to the "department_code" field.
func (m *BidProjectMutation) ResetDepartmentCode() {
	m.department_code = nil
}

// SetDepartmentName sets the "department_name" field.
func (m *BidProjectMutation) SetDepartmentName(s string) {
	m.department_name = &s
}

// DepartmentName returns the value of the "department_name" field in the mutation.
func (m *BidProjectMutation) DepartmentName() (r string, exists bool) {
	v := m.department_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartmentName returns the old "department_name" field's value of the BidProject entity.
// If the BidProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidProjectMutation) OldDepartmentName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartmentName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartmentName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartmentName: %w", err)
	}
	return oldValue.DepartmentName, nil
}

// ResetDepartmentName resets all changes to the "department_name" field.
func (m *BidProjectMutation) ResetDepartmentName() {
	m.department_name = nil
}

// SetBizRepNo sets the "biz_rep_no" field.
func (m *BidProjectMutation) SetBizRepNo(s string) {
	m.biz_rep_no = &s
}

// BizRepNo returns the value of the "biz_rep_no" field in the mutation.
func (m *BidProjectMutation) BizRepNo() (r string, exists bool) {
	v := m.biz_rep_no
	if v == nil {
		return
	}
	return *v, true
}

// OldBizRepNo returns the old "biz_rep_no" field's value of the BidProject entity.
// If the BidProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidProjectMutation) OldBizRepNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBizRepNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBizRepNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBizRepNo: %w", err)
	}
	return oldValue.BizRepNo, nil
}

// ResetBizRepNo resets all changes to the "biz_rep_no" field.
func (m *BidProjectMutation) ResetBizRepNo() {
	m.biz_rep_no = nil
}

// SetBizRepName sets the "biz_rep_name" field.
func (m *BidProjectMutation) SetBizRepName(s string) {
	m.biz_rep_name = &s
}

// BizRepName returns the value of the "biz_rep_name" field in the mutation.
func (m *BidProjectMutation) BizRepName() (r string, exists bool) {
	v := m.biz_rep_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBizRepName returns the old "biz_rep_name" field's value of the BidProject entity.
// If the BidProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidProjectMutation) OldBizRepName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBizRepName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBizRepName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBizRepName: %w", err)
	}
	return oldValue.BizRepName, nil
}

// ResetBizRepName resets all changes to the "biz_rep_name" field.
func (m *BidProjectMutation) ResetBizRepName() {
	m.biz_rep_name = nil
}

// SetCreateAt sets the "create_at" field.
func (m *BidProjectMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *BidProjectMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the BidProject entity.
// If the BidProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidProjectMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *BidProjectMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetCreateBy sets the "create_by" field.
func (m *BidProjectMutation) SetCreateBy(s string) {
	m.create_by = &s
}

// CreateBy returns the value of the "create_by" field in the mutation.
func (m *BidProjectMutation) CreateBy() (r string, exists bool) {
	v := m.create_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateBy returns the old "create_by" field's value of the BidProject entity.
// If the BidProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidProjectMutation) OldCreateBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateBy: %w", err)
	}
	return oldValue.CreateBy, nil
}

// ClearCreateBy clears the value of the "create_by" field.
func (m *BidProjectMutation) ClearCreateBy() {
	m.create_by = nil
	m.clearedFields[bidproject.FieldCreateBy] = struct{}{}
}

// CreateByCleared returns if the "create_by" field was cleared in this mutation.
func (m *BidProjectMutation) CreateByCleared() bool {
	_, ok := m.clearedFields[bidproject.FieldCreateBy]
	return ok
}

// ResetCreateBy resets all changes to the "create_by" field.
func (m *BidProjectMutation) ResetCreateBy() {
	m.create_by = nil
	delete(m.clearedFields, bidproject.FieldCreateBy)
}

// SetUpdateAt sets the "update_at" field.
func (m *BidProjectMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *BidProjectMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the BidProject entity.
// If the BidProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidProjectMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *BidProjectMutation) ResetUpdateAt() {
	m.update_at = nil
}

// SetUpdateBy sets the "update_by" field.
func (m *BidProjectMutation) SetUpdateBy(s string) {
	m.update_by = &s
}

// UpdateBy returns the value of the "update_by" field in the mutation.
func (m *BidProjectMutation) UpdateBy() (r string, exists bool) {
	v := m.update_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateBy returns the old "update_by" field's value of the BidProject entity.
// If the BidProject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BidProjectMutation) OldUpdateBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateBy: %w", err)
	}
	return oldValue.UpdateBy, nil
}

// ClearUpdateBy clears the value of the "update_by" field.
func (m *BidProjectMutation) ClearUpdateBy() {
	m.update_by = nil
	m.clearedFields[bidproject.FieldUpdateBy] = struct{}{}
}

// UpdateByCleared returns if the "update_by" field was cleared in this mutation.
func (m *BidProjectMutation) UpdateByCleared() bool {
	_, ok := m.clearedFields[bidproject.FieldUpdateBy]
	return ok
}

// ResetUpdateBy resets all changes to the "update_by" field.
func (m *BidProjectMutation) ResetUpdateBy() {
	m.update_by = nil
	delete(m.clearedFields, bidproject.FieldUpdateBy)
}

// SetApplyID sets the "apply" edge to the BidApply entity by id.
func (m *BidProjectMutation) SetApplyID(id string) {
	m.apply = &id
}

// ClearApply clears the "apply" edge to the BidApply entity.
func (m *BidProjectMutation) ClearApply() {
	m.clearedapply = true
}

// ApplyCleared reports if the "apply" edge to the BidApply entity was cleared.
func (m *BidProjectMutation) ApplyCleared() bool {
	return m.clearedapply
}

// ApplyID returns the "apply" edge ID in the mutation.
func (m *BidProjectMutation) ApplyID() (id string, exists bool) {
	if m.apply != nil {
		return *m.apply, true
	}
	return
}

// ApplyIDs returns the "apply" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApplyID instead. It exists only for internal usage by the builders.
func (m *BidProjectMutation) ApplyIDs() (ids []string) {
	if id := m.apply; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApply resets all changes to the "apply" edge.
func (m *BidProjectMutation) ResetApply() {
	m.apply = nil
	m.clearedapply = false
}

// AddExpenseIDs adds the "expense" edge to the BidExpense entity by ids.
func (m *BidProjectMutation) AddExpenseIDs(ids ...string) {
	if m.expense == nil {
		m.expense = make(map[string]struct{})
	}
	for i := range ids {
		m.expense[ids[i]] = struct{}{}
	}
}

// ClearExpense clears the "expense" edge to the BidExpense entity.
func (m *BidProjectMutation) ClearExpense() {
	m.clearedexpense = true
}

// ExpenseCleared reports if the "expense" edge to the BidExpense entity was cleared.
func (m *BidProjectMutation) ExpenseCleared() bool {
	return m.clearedexpense
}

// RemoveExpenseIDs removes the "expense" edge to the BidExpense entity by IDs.
func (m *BidProjectMutation) RemoveExpenseIDs(ids ...string) {
	if m.removedexpense == nil {
		m.removedexpense = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.expense, ids[i])
		m.removedexpense[ids[i]] = struct{}{}
	}
}

// RemovedExpense returns the removed IDs of the "expense" edge to the BidExpense entity.
func (m *BidProjectMutation) RemovedExpenseIDs() (ids []string) {
	for id := range m.removedexpense {
		ids = append(ids, id)
	}
	return
}

// ExpenseIDs returns the "expense" edge IDs in the mutation.
func (m *BidProjectMutation) ExpenseIDs() (ids []string) {
	for id := range m.expense {
		ids = append(ids, id)
	}
	return
}

// ResetExpense resets all changes to the "expense" edge.
func (m *BidProjectMutation) ResetExpense() {
	m.expense = nil
	m.clearedexpense = false
	m.removedexpense = nil
}

// Where appends a list predicates to the BidProjectMutation builder.
func (m *BidProjectMutation) Where(ps ...predicate.BidProject) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BidProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BidProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BidProject, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BidProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BidProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BidProject).
func (m *BidProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BidProjectMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.code != nil {
		fields = append(fields, bidproject.FieldCode)
	}
	if m.name != nil {
		fields = append(fields, bidproject.FieldName)
	}
	if m._type != nil {
		fields = append(fields, bidproject.FieldType)
	}
	if m.department_code != nil {
		fields = append(fields, bidproject.FieldDepartmentCode)
	}
	if m.department_name != nil {
		fields = append(fields, bidproject.FieldDepartmentName)
	}
	if m.biz_rep_no != nil {
		fields = append(fields, bidproject.FieldBizRepNo)
	}
	if m.biz_rep_name != nil {
		fields = append(fields, bidproject.FieldBizRepName)
	}
	if m.create_at != nil {
		fields = append(fields, bidproject.FieldCreateAt)
	}
	if m.create_by != nil {
		fields = append(fields, bidproject.FieldCreateBy)
	}
	if m.update_at != nil {
		fields = append(fields, bidproject.FieldUpdateAt)
	}
	if m.update_by != nil {
		fields = append(fields, bidproject.FieldUpdateBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BidProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bidproject.FieldCode:
		return m.Code()
	case bidproject.FieldName:
		return m.Name()
	case bidproject.FieldType:
		return m.GetType()
	case bidproject.FieldDepartmentCode:
		return m.DepartmentCode()
	case bidproject.FieldDepartmentName:
		return m.DepartmentName()
	case bidproject.FieldBizRepNo:
		return m.BizRepNo()
	case bidproject.FieldBizRepName:
		return m.BizRepName()
	case bidproject.FieldCreateAt:
		return m.CreateAt()
	case bidproject.FieldCreateBy:
		return m.CreateBy()
	case bidproject.FieldUpdateAt:
		return m.UpdateAt()
	case bidproject.FieldUpdateBy:
		return m.UpdateBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BidProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bidproject.FieldCode:
		return m.OldCode(ctx)
	case bidproject.FieldName:
		return m.OldName(ctx)
	case bidproject.FieldType:
		return m.OldType(ctx)
	case bidproject.FieldDepartmentCode:
		return m.OldDepartmentCode(ctx)
	case bidproject.FieldDepartmentName:
		return m.OldDepartmentName(ctx)
	case bidproject.FieldBizRepNo:
		return m.OldBizRepNo(ctx)
	case bidproject.FieldBizRepName:
		return m.OldBizRepName(ctx)
	case bidproject.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case bidproject.FieldCreateBy:
		return m.OldCreateBy(ctx)
	case bidproject.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case bidproject.FieldUpdateBy:
		return m.OldUpdateBy(ctx)
	}
	return nil, fmt.Errorf("unknown BidProject field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BidProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bidproject.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case bidproject.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case bidproject.FieldType:
		v, ok := value.(bidproject.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case bidproject.FieldDepartmentCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartmentCode(v)
		return nil
	case bidproject.FieldDepartmentName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartmentName(v)
		return nil
	case bidproject.FieldBizRepNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBizRepNo(v)
		return nil
	case bidproject.FieldBizRepName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBizRepName(v)
		return nil
	case bidproject.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case bidproject.FieldCreateBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateBy(v)
		return nil
	case bidproject.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case bidproject.FieldUpdateBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateBy(v)
		return nil
	}
	return fmt.Errorf("unknown BidProject field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BidProjectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BidProjectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BidProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BidProject numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BidProjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bidproject.FieldCreateBy) {
		fields = append(fields, bidproject.FieldCreateBy)
	}
	if m.FieldCleared(bidproject.FieldUpdateBy) {
		fields = append(fields, bidproject.FieldUpdateBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BidProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BidProjectMutation) ClearField(name string) error {
	switch name {
	case bidproject.FieldCreateBy:
		m.ClearCreateBy()
		return nil
	case bidproject.FieldUpdateBy:
		m.ClearUpdateBy()
		return nil
	}
	return fmt.Errorf("unknown BidProject nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BidProjectMutation) ResetField(name string) error {
	switch name {
	case bidproject.FieldCode:
		m.ResetCode()
		return nil
	case bidproject.FieldName:
		m.ResetName()
		return nil
	case bidproject.FieldType:
		m.ResetType()
		return nil
	case bidproject.FieldDepartmentCode:
		m.ResetDepartmentCode()
		return nil
	case bidproject.FieldDepartmentName:
		m.ResetDepartmentName()
		return nil
	case bidproject.FieldBizRepNo:
		m.ResetBizRepNo()
		return nil
	case bidproject.FieldBizRepName:
		m.ResetBizRepName()
		return nil
	case bidproject.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case bidproject.FieldCreateBy:
		m.ResetCreateBy()
		return nil
	case bidproject.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case bidproject.FieldUpdateBy:
		m.ResetUpdateBy()
		return nil
	}
	return fmt.Errorf("unknown BidProject field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BidProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.apply != nil {
		edges = append(edges, bidproject.EdgeApply)
	}
	if m.expense != nil {
		edges = append(edges, bidproject.EdgeExpense)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BidProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bidproject.EdgeApply:
		if id := m.apply; id != nil {
			return []ent.Value{*id}
		}
	case bidproject.EdgeExpense:
		ids := make([]ent.Value, 0, len(m.expense))
		for id := range m.expense {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BidProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedexpense != nil {
		edges = append(edges, bidproject.EdgeExpense)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BidProjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bidproject.EdgeExpense:
		ids := make([]ent.Value, 0, len(m.removedexpense))
		for id := range m.removedexpense {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BidProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedapply {
		edges = append(edges, bidproject.EdgeApply)
	}
	if m.clearedexpense {
		edges = append(edges, bidproject.EdgeExpense)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BidProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case bidproject.EdgeApply:
		return m.clearedapply
	case bidproject.EdgeExpense:
		return m.clearedexpense
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BidProjectMutation) ClearEdge(name string) error {
	switch name {
	case bidproject.EdgeApply:
		m.ClearApply()
		return nil
	}
	return fmt.Errorf("unknown BidProject unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BidProjectMutation) ResetEdge(name string) error {
	switch name {
	case bidproject.EdgeApply:
		m.ResetApply()
		return nil
	case bidproject.EdgeExpense:
		m.ResetExpense()
		return nil
	}
	return fmt.Errorf("unknown BidProject edge %s", name)
}
