// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cds/bid/ent/bidapply"
	"cds/bid/ent/bidexpense"
	"cds/bid/ent/bidproject"
	"cds/bid/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BidProjectUpdate is the builder for updating BidProject entities.
type BidProjectUpdate struct {
	config
	hooks     []Hook
	mutation  *BidProjectMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BidProjectUpdate builder.
func (_u *BidProjectUpdate) Where(ps ...predicate.BidProject) *BidProjectUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCode sets the "code" field.
func (_u *BidProjectUpdate) SetCode(v string) *BidProjectUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *BidProjectUpdate) SetNillableCode(v *string) *BidProjectUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *BidProjectUpdate) SetName(v string) *BidProjectUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *BidProjectUpdate) SetNillableName(v *string) *BidProjectUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *BidProjectUpdate) SetType(v bidproject.Type) *BidProjectUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *BidProjectUpdate) SetNillableType(v *bidproject.Type) *BidProjectUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetDepartmentCode sets the "department_code" field.
func (_u *BidProjectUpdate) SetDepartmentCode(v string) *BidProjectUpdate {
	_u.mutation.SetDepartmentCode(v)
	return _u
}

// SetNillableDepartmentCode sets the "department_code" field if the given value is not nil.
func (_u *BidProjectUpdate) SetNillableDepartmentCode(v *string) *BidProjectUpdate {
	if v != nil {
		_u.SetDepartmentCode(*v)
	}
	return _u
}

// SetDepartmentName sets the "department_name" field.
func (_u *BidProjectUpdate) SetDepartmentName(v string) *BidProjectUpdate {
	_u.mutation.SetDepartmentName(v)
	return _u
}

// SetNillableDepartmentName sets the "department_name" field if the given value is not nil.
func (_u *BidProjectUpdate) SetNillableDepartmentName(v *string) *BidProjectUpdate {
	if v != nil {
		_u.SetDepartmentName(*v)
	}
	return _u
}

// SetBizRepNo sets the "biz_rep_no" field.
func (_u *BidProjectUpdate) SetBizRepNo(v string) *BidProjectUpdate {
	_u.mutation.SetBizRepNo(v)
	return _u
}

// SetNillableBizRepNo sets the "biz_rep_no" field if the given value is not nil.
func (_u *BidProjectUpdate) SetNillableBizRepNo(v *string) *BidProjectUpdate {
	if v != nil {
		_u.SetBizRepNo(*v)
	}
	return _u
}

// SetBizRepName sets the "biz_rep_name" field.
func (_u *BidProjectUpdate) SetBizRepName(v string) *BidProjectUpdate {
	_u.mutation.SetBizRepName(v)
	return _u
}

// SetNillableBizRepName sets the "biz_rep_name" field if the given value is not nil.
func (_u *BidProjectUpdate) SetNillableBizRepName(v *string) *BidProjectUpdate {
	if v != nil {
		_u.SetBizRepName(*v)
	}
	return _u
}

// SetCreateAt sets the "create_at" field.
func (_u *BidProjectUpdate) SetCreateAt(v time.Time) *BidProjectUpdate {
	_u.mutation.SetCreateAt(v)
	return _u
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (_u *BidProjectUpdate) SetNillableCreateAt(v *time.Time) *BidProjectUpdate {
	if v != nil {
		_u.SetCreateAt(*v)
	}
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *BidProjectUpdate) SetCreateBy(v string) *BidProjectUpdate {
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *BidProjectUpdate) SetNillableCreateBy(v *string) *BidProjectUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *BidProjectUpdate) ClearCreateBy() *BidProjectUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateAt sets the "update_at" field.
func (_u *BidProjectUpdate) SetUpdateAt(v time.Time) *BidProjectUpdate {
	_u.mutation.SetUpdateAt(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *BidProjectUpdate) SetUpdateBy(v string) *BidProjectUpdate {
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *BidProjectUpdate) SetNillableUpdateBy(v *string) *BidProjectUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *BidProjectUpdate) ClearUpdateBy() *BidProjectUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetApplyID sets the "apply" edge to the BidApply entity by ID.
func (_u *BidProjectUpdate) SetApplyID(id string) *BidProjectUpdate {
	_u.mutation.SetApplyID(id)
	return _u
}

// SetNillableApplyID sets the "apply" edge to the BidApply entity by ID if the given value is not nil.
func (_u *BidProjectUpdate) SetNillableApplyID(id *string) *BidProjectUpdate {
	if id != nil {
		_u = _u.SetApplyID(*id)
	}
	return _u
}

// SetApply sets the "apply" edge to the BidApply entity.
func (_u *BidProjectUpdate) SetApply(v *BidApply) *BidProjectUpdate {
	return _u.SetApplyID(v.ID)
}

// AddExpenseIDs adds the "expense" edge to the BidExpense entity by IDs.
func (_u *BidProjectUpdate) AddExpenseIDs(ids ...string) *BidProjectUpdate {
	_u.mutation.AddExpenseIDs(ids...)
	return _u
}

// AddExpense adds the "expense" edges to the BidExpense entity.
func (_u *BidProjectUpdate) AddExpense(v ...*BidExpense) *BidProjectUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddExpenseIDs(ids...)
}

// Mutation returns the BidProjectMutation object of the builder.
func (_u *BidProjectUpdate) Mutation() *BidProjectMutation {
	return _u.mutation
}

// ClearApply clears the "apply" edge to the BidApply entity.
func (_u *BidProjectUpdate) ClearApply() *BidProjectUpdate {
	_u.mutation.ClearApply()
	return _u
}

// ClearExpense clears all "expense" edges to the BidExpense entity.
func (_u *BidProjectUpdate) ClearExpense() *BidProjectUpdate {
	_u.mutation.ClearExpense()
	return _u
}

// RemoveExpenseIDs removes the "expense" edge to BidExpense entities by IDs.
func (_u *BidProjectUpdate) RemoveExpenseIDs(ids ...string) *BidProjectUpdate {
	_u.mutation.RemoveExpenseIDs(ids...)
	return _u
}

// RemoveExpense removes "expense" edges to BidExpense entities.
func (_u *BidProjectUpdate) RemoveExpense(v ...*BidExpense) *BidProjectUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveExpenseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BidProjectUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BidProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BidProjectUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BidProjectUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BidProjectUpdate) defaults() {
	if _, ok := _u.mutation.UpdateAt(); !ok {
		v := bidproject.UpdateDefaultUpdateAt()
		_u.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BidProjectUpdate) check() error {
	if v, ok := _u.mutation.Code(); ok {
		if err := bidproject.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "BidProject.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := bidproject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BidProject.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := bidproject.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "BidProject.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DepartmentCode(); ok {
		if err := bidproject.DepartmentCodeValidator(v); err != nil {
			return &ValidationError{Name: "department_code", err: fmt.Errorf(`ent: validator failed for field "BidProject.department_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DepartmentName(); ok {
		if err := bidproject.DepartmentNameValidator(v); err != nil {
			return &ValidationError{Name: "department_name", err: fmt.Errorf(`ent: validator failed for field "BidProject.department_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BizRepNo(); ok {
		if err := bidproject.BizRepNoValidator(v); err != nil {
			return &ValidationError{Name: "biz_rep_no", err: fmt.Errorf(`ent: validator failed for field "BidProject.biz_rep_no": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BizRepName(); ok {
		if err := bidproject.BizRepNameValidator(v); err != nil {
			return &ValidationError{Name: "biz_rep_name", err: fmt.Errorf(`ent: validator failed for field "BidProject.biz_rep_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CreateBy(); ok {
		if err := bidproject.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`ent: validator failed for field "BidProject.create_by": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UpdateBy(); ok {
		if err := bidproject.UpdateByValidator(v); err != nil {
			return &ValidationError{Name: "update_by", err: fmt.Errorf(`ent: validator failed for field "BidProject.update_by": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *BidProjectUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BidProjectUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *BidProjectUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bidproject.Table, bidproject.Columns, sqlgraph.NewFieldSpec(bidproject.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(bidproject.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(bidproject.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(bidproject.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.DepartmentCode(); ok {
		_spec.SetField(bidproject.FieldDepartmentCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.DepartmentName(); ok {
		_spec.SetField(bidproject.FieldDepartmentName, field.TypeString, value)
	}
	if value, ok := _u.mutation.BizRepNo(); ok {
		_spec.SetField(bidproject.FieldBizRepNo, field.TypeString, value)
	}
	if value, ok := _u.mutation.BizRepName(); ok {
		_spec.SetField(bidproject.FieldBizRepName, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreateAt(); ok {
		_spec.SetField(bidproject.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(bidproject.FieldCreateBy, field.TypeString, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(bidproject.FieldCreateBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdateAt(); ok {
		_spec.SetField(bidproject.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(bidproject.FieldUpdateBy, field.TypeString, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(bidproject.FieldUpdateBy, field.TypeString)
	}
	if _u.mutation.ApplyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bidproject.ApplyTable,
			Columns: []string{bidproject.ApplyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidapply.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bidproject.ApplyTable,
			Columns: []string{bidproject.ApplyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidapply.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ExpenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bidproject.ExpenseTable,
			Columns: []string{bidproject.ExpenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidexpense.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedExpenseIDs(); len(nodes) > 0 && !_u.mutation.ExpenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bidproject.ExpenseTable,
			Columns: []string{bidproject.ExpenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidexpense.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ExpenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bidproject.ExpenseTable,
			Columns: []string{bidproject.ExpenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidexpense.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bidproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BidProjectUpdateOne is the builder for updating a single BidProject entity.
type BidProjectUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BidProjectMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCode sets the "code" field.
func (_u *BidProjectUpdateOne) SetCode(v string) *BidProjectUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *BidProjectUpdateOne) SetNillableCode(v *string) *BidProjectUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *BidProjectUpdateOne) SetName(v string) *BidProjectUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *BidProjectUpdateOne) SetNillableName(v *string) *BidProjectUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *BidProjectUpdateOne) SetType(v bidproject.Type) *BidProjectUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *BidProjectUpdateOne) SetNillableType(v *bidproject.Type) *BidProjectUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetDepartmentCode sets the "department_code" field.
func (_u *BidProjectUpdateOne) SetDepartmentCode(v string) *BidProjectUpdateOne {
	_u.mutation.SetDepartmentCode(v)
	return _u
}

// SetNillableDepartmentCode sets the "department_code" field if the given value is not nil.
func (_u *BidProjectUpdateOne) SetNillableDepartmentCode(v *string) *BidProjectUpdateOne {
	if v != nil {
		_u.SetDepartmentCode(*v)
	}
	return _u
}

// SetDepartmentName sets the "department_name" field.
func (_u *BidProjectUpdateOne) SetDepartmentName(v string) *BidProjectUpdateOne {
	_u.mutation.SetDepartmentName(v)
	return _u
}

// SetNillableDepartmentName sets the "department_name" field if the given value is not nil.
func (_u *BidProjectUpdateOne) SetNillableDepartmentName(v *string) *BidProjectUpdateOne {
	if v != nil {
		_u.SetDepartmentName(*v)
	}
	return _u
}

// SetBizRepNo sets the "biz_rep_no" field.
func (_u *BidProjectUpdateOne) SetBizRepNo(v string) *BidProjectUpdateOne {
	_u.mutation.SetBizRepNo(v)
	return _u
}

// SetNillableBizRepNo sets the "biz_rep_no" field if the given value is not nil.
func (_u *BidProjectUpdateOne) SetNillableBizRepNo(v *string) *BidProjectUpdateOne {
	if v != nil {
		_u.SetBizRepNo(*v)
	}
	return _u
}

// SetBizRepName sets the "biz_rep_name" field.
func (_u *BidProjectUpdateOne) SetBizRepName(v string) *BidProjectUpdateOne {
	_u.mutation.SetBizRepName(v)
	return _u
}

// SetNillableBizRepName sets the "biz_rep_name" field if the given value is not nil.
func (_u *BidProjectUpdateOne) SetNillableBizRepName(v *string) *BidProjectUpdateOne {
	if v != nil {
		_u.SetBizRepName(*v)
	}
	return _u
}

// SetCreateAt sets the "create_at" field.
func (_u *BidProjectUpdateOne) SetCreateAt(v time.Time) *BidProjectUpdateOne {
	_u.mutation.SetCreateAt(v)
	return _u
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (_u *BidProjectUpdateOne) SetNillableCreateAt(v *time.Time) *BidProjectUpdateOne {
	if v != nil {
		_u.SetCreateAt(*v)
	}
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *BidProjectUpdateOne) SetCreateBy(v string) *BidProjectUpdateOne {
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *BidProjectUpdateOne) SetNillableCreateBy(v *string) *BidProjectUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *BidProjectUpdateOne) ClearCreateBy() *BidProjectUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateAt sets the "update_at" field.
func (_u *BidProjectUpdateOne) SetUpdateAt(v time.Time) *BidProjectUpdateOne {
	_u.mutation.SetUpdateAt(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *BidProjectUpdateOne) SetUpdateBy(v string) *BidProjectUpdateOne {
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *BidProjectUpdateOne) SetNillableUpdateBy(v *string) *BidProjectUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *BidProjectUpdateOne) ClearUpdateBy() *BidProjectUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetApplyID sets the "apply" edge to the BidApply entity by ID.
func (_u *BidProjectUpdateOne) SetApplyID(id string) *BidProjectUpdateOne {
	_u.mutation.SetApplyID(id)
	return _u
}

// SetNillableApplyID sets the "apply" edge to the BidApply entity by ID if the given value is not nil.
func (_u *BidProjectUpdateOne) SetNillableApplyID(id *string) *BidProjectUpdateOne {
	if id != nil {
		_u = _u.SetApplyID(*id)
	}
	return _u
}

// SetApply sets the "apply" edge to the BidApply entity.
func (_u *BidProjectUpdateOne) SetApply(v *BidApply) *BidProjectUpdateOne {
	return _u.SetApplyID(v.ID)
}

// AddExpenseIDs adds the "expense" edge to the BidExpense entity by IDs.
func (_u *BidProjectUpdateOne) AddExpenseIDs(ids ...string) *BidProjectUpdateOne {
	_u.mutation.AddExpenseIDs(ids...)
	return _u
}

// AddExpense adds the "expense" edges to the BidExpense entity.
func (_u *BidProjectUpdateOne) AddExpense(v ...*BidExpense) *BidProjectUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddExpenseIDs(ids...)
}

// Mutation returns the BidProjectMutation object of the builder.
func (_u *BidProjectUpdateOne) Mutation() *BidProjectMutation {
	return _u.mutation
}

// ClearApply clears the "apply" edge to the BidApply entity.
func (_u *BidProjectUpdateOne) ClearApply() *BidProjectUpdateOne {
	_u.mutation.ClearApply()
	return _u
}

// ClearExpense clears all "expense" edges to the BidExpense entity.
func (_u *BidProjectUpdateOne) ClearExpense() *BidProjectUpdateOne {
	_u.mutation.ClearExpense()
	return _u
}

// RemoveExpenseIDs removes the "expense" edge to BidExpense entities by IDs.
func (_u *BidProjectUpdateOne) RemoveExpenseIDs(ids ...string) *BidProjectUpdateOne {
	_u.mutation.RemoveExpenseIDs(ids...)
	return _u
}

// RemoveExpense removes "expense" edges to BidExpense entities.
func (_u *BidProjectUpdateOne) RemoveExpense(v ...*BidExpense) *BidProjectUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveExpenseIDs(ids...)
}

// Where appends a list predicates to the BidProjectUpdate builder.
func (_u *BidProjectUpdateOne) Where(ps ...predicate.BidProject) *BidProjectUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BidProjectUpdateOne) Select(field string, fields ...string) *BidProjectUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BidProject entity.
func (_u *BidProjectUpdateOne) Save(ctx context.Context) (*BidProject, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BidProjectUpdateOne) SaveX(ctx context.Context) *BidProject {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BidProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BidProjectUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BidProjectUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateAt(); !ok {
		v := bidproject.UpdateDefaultUpdateAt()
		_u.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BidProjectUpdateOne) check() error {
	if v, ok := _u.mutation.Code(); ok {
		if err := bidproject.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "BidProject.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := bidproject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BidProject.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := bidproject.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "BidProject.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DepartmentCode(); ok {
		if err := bidproject.DepartmentCodeValidator(v); err != nil {
			return &ValidationError{Name: "department_code", err: fmt.Errorf(`ent: validator failed for field "BidProject.department_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DepartmentName(); ok {
		if err := bidproject.DepartmentNameValidator(v); err != nil {
			return &ValidationError{Name: "department_name", err: fmt.Errorf(`ent: validator failed for field "BidProject.department_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BizRepNo(); ok {
		if err := bidproject.BizRepNoValidator(v); err != nil {
			return &ValidationError{Name: "biz_rep_no", err: fmt.Errorf(`ent: validator failed for field "BidProject.biz_rep_no": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BizRepName(); ok {
		if err := bidproject.BizRepNameValidator(v); err != nil {
			return &ValidationError{Name: "biz_rep_name", err: fmt.Errorf(`ent: validator failed for field "BidProject.biz_rep_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CreateBy(); ok {
		if err := bidproject.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`ent: validator failed for field "BidProject.create_by": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UpdateBy(); ok {
		if err := bidproject.UpdateByValidator(v); err != nil {
			return &ValidationError{Name: "update_by", err: fmt.Errorf(`ent: validator failed for field "BidProject.update_by": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *BidProjectUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BidProjectUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *BidProjectUpdateOne) sqlSave(ctx context.Context) (_node *BidProject, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bidproject.Table, bidproject.Columns, sqlgraph.NewFieldSpec(bidproject.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BidProject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bidproject.FieldID)
		for _, f := range fields {
			if !bidproject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bidproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(bidproject.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(bidproject.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(bidproject.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.DepartmentCode(); ok {
		_spec.SetField(bidproject.FieldDepartmentCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.DepartmentName(); ok {
		_spec.SetField(bidproject.FieldDepartmentName, field.TypeString, value)
	}
	if value, ok := _u.mutation.BizRepNo(); ok {
		_spec.SetField(bidproject.FieldBizRepNo, field.TypeString, value)
	}
	if value, ok := _u.mutation.BizRepName(); ok {
		_spec.SetField(bidproject.FieldBizRepName, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreateAt(); ok {
		_spec.SetField(bidproject.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(bidproject.FieldCreateBy, field.TypeString, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(bidproject.FieldCreateBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdateAt(); ok {
		_spec.SetField(bidproject.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(bidproject.FieldUpdateBy, field.TypeString, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(bidproject.FieldUpdateBy, field.TypeString)
	}
	if _u.mutation.ApplyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bidproject.ApplyTable,
			Columns: []string{bidproject.ApplyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidapply.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApplyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bidproject.ApplyTable,
			Columns: []string{bidproject.ApplyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidapply.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ExpenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bidproject.ExpenseTable,
			Columns: []string{bidproject.ExpenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidexpense.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedExpenseIDs(); len(nodes) > 0 && !_u.mutation.ExpenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bidproject.ExpenseTable,
			Columns: []string{bidproject.ExpenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidexpense.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ExpenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bidproject.ExpenseTable,
			Columns: []string{bidproject.ExpenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidexpense.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &BidProject{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bidproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
