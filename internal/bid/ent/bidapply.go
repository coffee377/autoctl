// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cds/bid/ent/bidapply"
	"cds/bid/ent/bidproject"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 投标申请
type BidApply struct {
	config `json:"-"`
	// ID of the ent.
	// 投标申请 ID
	ID string `json:"id,omitempty"`
	// 审批编号
	BusinessID string `json:"business_id,omitempty"`
	// 审批实例 ID
	InstanceID string `json:"instance_id,omitempty"`
	// 项目 ID
	ProjectID string `json:"project_id,omitempty"`
	// 采购人名称
	PurchaserName *string `json:"purchaser_name,omitempty"`
	// 招标类型 UT:未知类型 OT:公开招标 IT:邀请招标 CN:竞争性谈判 IP:询价采购 SSP:单一来源采购 CC:竞争性磋商 SCT:自行招标 CIP:询比采购 HIP:医院自主采购 PC:比价 DP:直接采购
	BidType bidapply.BidType `json:"bid_type,omitempty"`
	// 招标代理机构名称
	AgencyName *string `json:"agency_name,omitempty"`
	// 招标代理机构联系人及电话
	AgencyContact *string `json:"agency_contact,omitempty"`
	// 开标时间
	OpeningDate *time.Time `json:"opening_date,omitempty"`
	// 招标公告网址
	NoticeURL *string `json:"notice_url,omitempty"`
	// 预算金额（元）
	BudgetAmount float64 `json:"budget_amount,omitempty"`
	// 备注说明;如资质要求、技术难点、事项说明等
	Remark *string `json:"remark,omitempty"`
	// 投标报名相关附件
	Attachments []map[string]interface{} `json:"attachments,omitempty"`
	// 审批状态
	ApprovalStatus string `json:"approval_status,omitempty"`
	// 审批流程是否已结束
	Done bool `json:"done,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 创建人
	CreateBy *string `json:"create_by,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
	// 更新人
	UpdateBy *string `json:"update_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BidApplyQuery when eager-loading is set.
	Edges        BidApplyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BidApplyEdges holds the relations/edges for other nodes in the graph.
type BidApplyEdges struct {
	// Project holds the value of the project edge.
	Project *BidProject `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BidApplyEdges) ProjectOrErr() (*BidProject, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: bidproject.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BidApply) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bidapply.FieldAttachments:
			values[i] = new([]byte)
		case bidapply.FieldDone:
			values[i] = new(sql.NullBool)
		case bidapply.FieldBudgetAmount:
			values[i] = new(sql.NullFloat64)
		case bidapply.FieldID, bidapply.FieldBusinessID, bidapply.FieldInstanceID, bidapply.FieldProjectID, bidapply.FieldPurchaserName, bidapply.FieldBidType, bidapply.FieldAgencyName, bidapply.FieldAgencyContact, bidapply.FieldNoticeURL, bidapply.FieldRemark, bidapply.FieldApprovalStatus, bidapply.FieldCreateBy, bidapply.FieldUpdateBy:
			values[i] = new(sql.NullString)
		case bidapply.FieldOpeningDate, bidapply.FieldCreateAt, bidapply.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BidApply fields.
func (_m *BidApply) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bidapply.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case bidapply.FieldBusinessID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_id", values[i])
			} else if value.Valid {
				_m.BusinessID = value.String
			}
		case bidapply.FieldInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_id", values[i])
			} else if value.Valid {
				_m.InstanceID = value.String
			}
		case bidapply.FieldProjectID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				_m.ProjectID = value.String
			}
		case bidapply.FieldPurchaserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field purchaser_name", values[i])
			} else if value.Valid {
				_m.PurchaserName = new(string)
				*_m.PurchaserName = value.String
			}
		case bidapply.FieldBidType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bid_type", values[i])
			} else if value.Valid {
				_m.BidType = bidapply.BidType(value.String)
			}
		case bidapply.FieldAgencyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agency_name", values[i])
			} else if value.Valid {
				_m.AgencyName = new(string)
				*_m.AgencyName = value.String
			}
		case bidapply.FieldAgencyContact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agency_contact", values[i])
			} else if value.Valid {
				_m.AgencyContact = new(string)
				*_m.AgencyContact = value.String
			}
		case bidapply.FieldOpeningDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field opening_date", values[i])
			} else if value.Valid {
				_m.OpeningDate = new(time.Time)
				*_m.OpeningDate = value.Time
			}
		case bidapply.FieldNoticeURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notice_url", values[i])
			} else if value.Valid {
				_m.NoticeURL = new(string)
				*_m.NoticeURL = value.String
			}
		case bidapply.FieldBudgetAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field budget_amount", values[i])
			} else if value.Valid {
				_m.BudgetAmount = value.Float64
			}
		case bidapply.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				_m.Remark = new(string)
				*_m.Remark = value.String
			}
		case bidapply.FieldAttachments:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attachments", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Attachments); err != nil {
					return fmt.Errorf("unmarshal field attachments: %w", err)
				}
			}
		case bidapply.FieldApprovalStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approval_status", values[i])
			} else if value.Valid {
				_m.ApprovalStatus = value.String
			}
		case bidapply.FieldDone:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field done", values[i])
			} else if value.Valid {
				_m.Done = value.Bool
			}
		case bidapply.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				_m.CreateAt = value.Time
			}
		case bidapply.FieldCreateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = new(string)
				*_m.CreateBy = value.String
			}
		case bidapply.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				_m.UpdateAt = value.Time
			}
		case bidapply.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = new(string)
				*_m.UpdateBy = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BidApply.
// This includes values selected through modifiers, order, etc.
func (_m *BidApply) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the BidApply entity.
func (_m *BidApply) QueryProject() *BidProjectQuery {
	return NewBidApplyClient(_m.config).QueryProject(_m)
}

// Update returns a builder for updating this BidApply.
// Note that you need to call BidApply.Unwrap() before calling this method if this BidApply
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BidApply) Update() *BidApplyUpdateOne {
	return NewBidApplyClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BidApply entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BidApply) Unwrap() *BidApply {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: BidApply is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BidApply) String() string {
	var builder strings.Builder
	builder.WriteString("BidApply(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("business_id=")
	builder.WriteString(_m.BusinessID)
	builder.WriteString(", ")
	builder.WriteString("instance_id=")
	builder.WriteString(_m.InstanceID)
	builder.WriteString(", ")
	builder.WriteString("project_id=")
	builder.WriteString(_m.ProjectID)
	builder.WriteString(", ")
	if v := _m.PurchaserName; v != nil {
		builder.WriteString("purchaser_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("bid_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.BidType))
	builder.WriteString(", ")
	if v := _m.AgencyName; v != nil {
		builder.WriteString("agency_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.AgencyContact; v != nil {
		builder.WriteString("agency_contact=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.OpeningDate; v != nil {
		builder.WriteString("opening_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.NoticeURL; v != nil {
		builder.WriteString("notice_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("budget_amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.BudgetAmount))
	builder.WriteString(", ")
	if v := _m.Remark; v != nil {
		builder.WriteString("remark=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("attachments=")
	builder.WriteString(fmt.Sprintf("%v", _m.Attachments))
	builder.WriteString(", ")
	builder.WriteString("approval_status=")
	builder.WriteString(_m.ApprovalStatus)
	builder.WriteString(", ")
	builder.WriteString("done=")
	builder.WriteString(fmt.Sprintf("%v", _m.Done))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(_m.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.CreateBy; v != nil {
		builder.WriteString("create_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(_m.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.UpdateBy; v != nil {
		builder.WriteString("update_by=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// BidApplies is a parsable slice of BidApply.
type BidApplies []*BidApply
