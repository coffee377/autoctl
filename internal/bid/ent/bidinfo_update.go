// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cds/bid/ent/bidinfo"
	"cds/bid/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BidInfoUpdate is the builder for updating BidInfo entities.
type BidInfoUpdate struct {
	config
	hooks     []Hook
	mutation  *BidInfoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BidInfoUpdate builder.
func (_u *BidInfoUpdate) Where(ps ...predicate.BidInfo) *BidInfoUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreateAt sets the "create_at" field.
func (_u *BidInfoUpdate) SetCreateAt(v time.Time) *BidInfoUpdate {
	_u.mutation.SetCreateAt(v)
	return _u
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (_u *BidInfoUpdate) SetNillableCreateAt(v *time.Time) *BidInfoUpdate {
	if v != nil {
		_u.SetCreateAt(*v)
	}
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *BidInfoUpdate) SetCreateBy(v string) *BidInfoUpdate {
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *BidInfoUpdate) SetNillableCreateBy(v *string) *BidInfoUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *BidInfoUpdate) ClearCreateBy() *BidInfoUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateAt sets the "update_at" field.
func (_u *BidInfoUpdate) SetUpdateAt(v time.Time) *BidInfoUpdate {
	_u.mutation.SetUpdateAt(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *BidInfoUpdate) SetUpdateBy(v string) *BidInfoUpdate {
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *BidInfoUpdate) SetNillableUpdateBy(v *string) *BidInfoUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *BidInfoUpdate) ClearUpdateBy() *BidInfoUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// Mutation returns the BidInfoMutation object of the builder.
func (_u *BidInfoUpdate) Mutation() *BidInfoMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BidInfoUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BidInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BidInfoUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BidInfoUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BidInfoUpdate) defaults() {
	if _, ok := _u.mutation.UpdateAt(); !ok {
		v := bidinfo.UpdateDefaultUpdateAt()
		_u.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BidInfoUpdate) check() error {
	if v, ok := _u.mutation.CreateBy(); ok {
		if err := bidinfo.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`ent: validator failed for field "BidInfo.create_by": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UpdateBy(); ok {
		if err := bidinfo.UpdateByValidator(v); err != nil {
			return &ValidationError{Name: "update_by", err: fmt.Errorf(`ent: validator failed for field "BidInfo.update_by": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *BidInfoUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BidInfoUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *BidInfoUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bidinfo.Table, bidinfo.Columns, sqlgraph.NewFieldSpec(bidinfo.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateAt(); ok {
		_spec.SetField(bidinfo.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(bidinfo.FieldCreateBy, field.TypeString, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(bidinfo.FieldCreateBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdateAt(); ok {
		_spec.SetField(bidinfo.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(bidinfo.FieldUpdateBy, field.TypeString, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(bidinfo.FieldUpdateBy, field.TypeString)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bidinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BidInfoUpdateOne is the builder for updating a single BidInfo entity.
type BidInfoUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BidInfoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreateAt sets the "create_at" field.
func (_u *BidInfoUpdateOne) SetCreateAt(v time.Time) *BidInfoUpdateOne {
	_u.mutation.SetCreateAt(v)
	return _u
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (_u *BidInfoUpdateOne) SetNillableCreateAt(v *time.Time) *BidInfoUpdateOne {
	if v != nil {
		_u.SetCreateAt(*v)
	}
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *BidInfoUpdateOne) SetCreateBy(v string) *BidInfoUpdateOne {
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *BidInfoUpdateOne) SetNillableCreateBy(v *string) *BidInfoUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *BidInfoUpdateOne) ClearCreateBy() *BidInfoUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateAt sets the "update_at" field.
func (_u *BidInfoUpdateOne) SetUpdateAt(v time.Time) *BidInfoUpdateOne {
	_u.mutation.SetUpdateAt(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *BidInfoUpdateOne) SetUpdateBy(v string) *BidInfoUpdateOne {
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *BidInfoUpdateOne) SetNillableUpdateBy(v *string) *BidInfoUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *BidInfoUpdateOne) ClearUpdateBy() *BidInfoUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// Mutation returns the BidInfoMutation object of the builder.
func (_u *BidInfoUpdateOne) Mutation() *BidInfoMutation {
	return _u.mutation
}

// Where appends a list predicates to the BidInfoUpdate builder.
func (_u *BidInfoUpdateOne) Where(ps ...predicate.BidInfo) *BidInfoUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BidInfoUpdateOne) Select(field string, fields ...string) *BidInfoUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BidInfo entity.
func (_u *BidInfoUpdateOne) Save(ctx context.Context) (*BidInfo, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BidInfoUpdateOne) SaveX(ctx context.Context) *BidInfo {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BidInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BidInfoUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BidInfoUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateAt(); !ok {
		v := bidinfo.UpdateDefaultUpdateAt()
		_u.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BidInfoUpdateOne) check() error {
	if v, ok := _u.mutation.CreateBy(); ok {
		if err := bidinfo.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`ent: validator failed for field "BidInfo.create_by": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UpdateBy(); ok {
		if err := bidinfo.UpdateByValidator(v); err != nil {
			return &ValidationError{Name: "update_by", err: fmt.Errorf(`ent: validator failed for field "BidInfo.update_by": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *BidInfoUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BidInfoUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *BidInfoUpdateOne) sqlSave(ctx context.Context) (_node *BidInfo, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bidinfo.Table, bidinfo.Columns, sqlgraph.NewFieldSpec(bidinfo.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BidInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bidinfo.FieldID)
		for _, f := range fields {
			if !bidinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bidinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreateAt(); ok {
		_spec.SetField(bidinfo.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(bidinfo.FieldCreateBy, field.TypeString, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(bidinfo.FieldCreateBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdateAt(); ok {
		_spec.SetField(bidinfo.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(bidinfo.FieldUpdateBy, field.TypeString, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(bidinfo.FieldUpdateBy, field.TypeString)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &BidInfo{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bidinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
