// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cds/bid/ent/bidapply"
	"cds/bid/ent/bidproject"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 投标项目
type BidProject struct {
	config `json:"-"`
	// ID of the ent.
	// 项目 ID
	ID string `json:"id,omitempty"`
	// 项目编码
	Code string `json:"code,omitempty"`
	// 项目名称
	Name string `json:"name,omitempty"`
	// 项目类型 UP:未知 S:软件 H:硬件 SH:软硬件集成 OM:运维
	Type bidproject.Type `json:"type,omitempty"`
	// 所属部门编码
	DepartmentCode string `json:"department_code,omitempty"`
	// 所属部门名称
	DepartmentName string `json:"department_name,omitempty"`
	// 商务代表工号
	BizRepNo string `json:"biz_rep_no,omitempty"`
	// 商务代表
	BizRepName string `json:"biz_rep_name,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 创建人
	CreateBy *string `json:"create_by,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
	// 更新人
	UpdateBy *string `json:"update_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BidProjectQuery when eager-loading is set.
	Edges        BidProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BidProjectEdges holds the relations/edges for other nodes in the graph.
type BidProjectEdges struct {
	// Apply holds the value of the apply edge.
	Apply *BidApply `json:"apply,omitempty"`
	// Expense holds the value of the expense edge.
	Expense []*BidExpense `json:"expense,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ApplyOrErr returns the Apply value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BidProjectEdges) ApplyOrErr() (*BidApply, error) {
	if e.Apply != nil {
		return e.Apply, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: bidapply.Label}
	}
	return nil, &NotLoadedError{edge: "apply"}
}

// ExpenseOrErr returns the Expense value or an error if the edge
// was not loaded in eager-loading.
func (e BidProjectEdges) ExpenseOrErr() ([]*BidExpense, error) {
	if e.loadedTypes[1] {
		return e.Expense, nil
	}
	return nil, &NotLoadedError{edge: "expense"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BidProject) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bidproject.FieldID, bidproject.FieldCode, bidproject.FieldName, bidproject.FieldType, bidproject.FieldDepartmentCode, bidproject.FieldDepartmentName, bidproject.FieldBizRepNo, bidproject.FieldBizRepName, bidproject.FieldCreateBy, bidproject.FieldUpdateBy:
			values[i] = new(sql.NullString)
		case bidproject.FieldCreateAt, bidproject.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BidProject fields.
func (_m *BidProject) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bidproject.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case bidproject.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				_m.Code = value.String
			}
		case bidproject.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case bidproject.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = bidproject.Type(value.String)
			}
		case bidproject.FieldDepartmentCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field department_code", values[i])
			} else if value.Valid {
				_m.DepartmentCode = value.String
			}
		case bidproject.FieldDepartmentName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field department_name", values[i])
			} else if value.Valid {
				_m.DepartmentName = value.String
			}
		case bidproject.FieldBizRepNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field biz_rep_no", values[i])
			} else if value.Valid {
				_m.BizRepNo = value.String
			}
		case bidproject.FieldBizRepName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field biz_rep_name", values[i])
			} else if value.Valid {
				_m.BizRepName = value.String
			}
		case bidproject.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				_m.CreateAt = value.Time
			}
		case bidproject.FieldCreateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = new(string)
				*_m.CreateBy = value.String
			}
		case bidproject.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				_m.UpdateAt = value.Time
			}
		case bidproject.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = new(string)
				*_m.UpdateBy = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BidProject.
// This includes values selected through modifiers, order, etc.
func (_m *BidProject) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryApply queries the "apply" edge of the BidProject entity.
func (_m *BidProject) QueryApply() *BidApplyQuery {
	return NewBidProjectClient(_m.config).QueryApply(_m)
}

// QueryExpense queries the "expense" edge of the BidProject entity.
func (_m *BidProject) QueryExpense() *BidExpenseQuery {
	return NewBidProjectClient(_m.config).QueryExpense(_m)
}

// Update returns a builder for updating this BidProject.
// Note that you need to call BidProject.Unwrap() before calling this method if this BidProject
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BidProject) Update() *BidProjectUpdateOne {
	return NewBidProjectClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BidProject entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BidProject) Unwrap() *BidProject {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: BidProject is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BidProject) String() string {
	var builder strings.Builder
	builder.WriteString("BidProject(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("code=")
	builder.WriteString(_m.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("department_code=")
	builder.WriteString(_m.DepartmentCode)
	builder.WriteString(", ")
	builder.WriteString("department_name=")
	builder.WriteString(_m.DepartmentName)
	builder.WriteString(", ")
	builder.WriteString("biz_rep_no=")
	builder.WriteString(_m.BizRepNo)
	builder.WriteString(", ")
	builder.WriteString("biz_rep_name=")
	builder.WriteString(_m.BizRepName)
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(_m.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.CreateBy; v != nil {
		builder.WriteString("create_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(_m.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.UpdateBy; v != nil {
		builder.WriteString("update_by=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// BidProjects is a parsable slice of BidProject.
type BidProjects []*BidProject
