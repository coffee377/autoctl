// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cds/bid/ent/bidinfo"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 投标信息
type BidInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 创建人
	CreateBy *string `json:"create_by,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
	// 更新人
	UpdateBy     *string `json:"update_by,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BidInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bidinfo.FieldID:
			values[i] = new(sql.NullInt64)
		case bidinfo.FieldCreateBy, bidinfo.FieldUpdateBy:
			values[i] = new(sql.NullString)
		case bidinfo.FieldCreateAt, bidinfo.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BidInfo fields.
func (_m *BidInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bidinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case bidinfo.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				_m.CreateAt = value.Time
			}
		case bidinfo.FieldCreateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = new(string)
				*_m.CreateBy = value.String
			}
		case bidinfo.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				_m.UpdateAt = value.Time
			}
		case bidinfo.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = new(string)
				*_m.UpdateBy = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BidInfo.
// This includes values selected through modifiers, order, etc.
func (_m *BidInfo) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this BidInfo.
// Note that you need to call BidInfo.Unwrap() before calling this method if this BidInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BidInfo) Update() *BidInfoUpdateOne {
	return NewBidInfoClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BidInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BidInfo) Unwrap() *BidInfo {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: BidInfo is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BidInfo) String() string {
	var builder strings.Builder
	builder.WriteString("BidInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_at=")
	builder.WriteString(_m.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.CreateBy; v != nil {
		builder.WriteString("create_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(_m.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.UpdateBy; v != nil {
		builder.WriteString("update_by=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// BidInfos is a parsable slice of BidInfo.
type BidInfos []*BidInfo
