// Code generated by ent, DO NOT EDIT.

package bidapply

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the bidapply type in the database.
	Label = "bid_apply"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusinessID holds the string denoting the business_id field in the database.
	FieldBusinessID = "business_id"
	// FieldInstanceID holds the string denoting the instance_id field in the database.
	FieldInstanceID = "instance_id"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// FieldPurchaserName holds the string denoting the purchaser_name field in the database.
	FieldPurchaserName = "purchaser_name"
	// FieldBidType holds the string denoting the bid_type field in the database.
	FieldBidType = "bid_type"
	// FieldAgencyName holds the string denoting the agency_name field in the database.
	FieldAgencyName = "agency_name"
	// FieldAgencyContact holds the string denoting the agency_contact field in the database.
	FieldAgencyContact = "agency_contact"
	// FieldOpeningDate holds the string denoting the opening_date field in the database.
	FieldOpeningDate = "opening_date"
	// FieldNoticeURL holds the string denoting the notice_url field in the database.
	FieldNoticeURL = "notice_url"
	// FieldBudgetAmount holds the string denoting the budget_amount field in the database.
	FieldBudgetAmount = "budget_amount"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldAttachments holds the string denoting the attachments field in the database.
	FieldAttachments = "attachments"
	// FieldApprovalStatus holds the string denoting the approval_status field in the database.
	FieldApprovalStatus = "approval_status"
	// FieldDone holds the string denoting the done field in the database.
	FieldDone = "done"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldCreateBy holds the string denoting the create_by field in the database.
	FieldCreateBy = "create_by"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// FieldUpdateBy holds the string denoting the update_by field in the database.
	FieldUpdateBy = "update_by"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// Table holds the table name of the bidapply in the database.
	Table = "bid_apply"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "bid_apply"
	// ProjectInverseTable is the table name for the BidProject entity.
	// It exists in this package in order to avoid circular dependency with the "bidproject" package.
	ProjectInverseTable = "bid_project"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_id"
)

// Columns holds all SQL columns for bidapply fields.
var Columns = []string{
	FieldID,
	FieldBusinessID,
	FieldInstanceID,
	FieldProjectID,
	FieldPurchaserName,
	FieldBidType,
	FieldAgencyName,
	FieldAgencyContact,
	FieldOpeningDate,
	FieldNoticeURL,
	FieldBudgetAmount,
	FieldRemark,
	FieldAttachments,
	FieldApprovalStatus,
	FieldDone,
	FieldCreateAt,
	FieldCreateBy,
	FieldUpdateAt,
	FieldUpdateBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// BusinessIDValidator is a validator for the "business_id" field. It is called by the builders before save.
	BusinessIDValidator func(string) error
	// InstanceIDValidator is a validator for the "instance_id" field. It is called by the builders before save.
	InstanceIDValidator func(string) error
	// ProjectIDValidator is a validator for the "project_id" field. It is called by the builders before save.
	ProjectIDValidator func(string) error
	// PurchaserNameValidator is a validator for the "purchaser_name" field. It is called by the builders before save.
	PurchaserNameValidator func(string) error
	// AgencyNameValidator is a validator for the "agency_name" field. It is called by the builders before save.
	AgencyNameValidator func(string) error
	// AgencyContactValidator is a validator for the "agency_contact" field. It is called by the builders before save.
	AgencyContactValidator func(string) error
	// DefaultBudgetAmount holds the default value on creation for the "budget_amount" field.
	DefaultBudgetAmount float64
	// DefaultDone holds the default value on creation for the "done" field.
	DefaultDone bool
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// CreateByValidator is a validator for the "create_by" field. It is called by the builders before save.
	CreateByValidator func(string) error
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() time.Time
	// UpdateDefaultUpdateAt holds the default value on update for the "update_at" field.
	UpdateDefaultUpdateAt func() time.Time
	// UpdateByValidator is a validator for the "update_by" field. It is called by the builders before save.
	UpdateByValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// BidType defines the type for the "bid_type" enum field.
type BidType string

// BidTypeUT is the default value of the BidType enum.
const DefaultBidType = BidTypeUT

// BidType values.
const (
	BidTypeUT  BidType = "UT"
	BidTypeOT  BidType = "OT"
	BidTypeIT  BidType = "IT"
	BidTypeCN  BidType = "CN"
	BidTypeIP  BidType = "IP"
	BidTypeSSP BidType = "SSP"
	BidTypeCC  BidType = "CC"
	BidTypeSCT BidType = "SCT"
	BidTypeCIP BidType = "CIP"
	BidTypeHIP BidType = "HIP"
	BidTypePC  BidType = "PC"
	BidTypeDP  BidType = "DP"
)

func (bt BidType) String() string {
	return string(bt)
}

// BidTypeValidator is a validator for the "bid_type" field enum values. It is called by the builders before save.
func BidTypeValidator(bt BidType) error {
	switch bt {
	case BidTypeUT, BidTypeOT, BidTypeIT, BidTypeCN, BidTypeIP, BidTypeSSP, BidTypeCC, BidTypeSCT, BidTypeCIP, BidTypeHIP, BidTypePC, BidTypeDP:
		return nil
	default:
		return fmt.Errorf("bidapply: invalid enum value for bid_type field: %q", bt)
	}
}

// OrderOption defines the ordering options for the BidApply queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusinessID orders the results by the business_id field.
func ByBusinessID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessID, opts...).ToFunc()
}

// ByInstanceID orders the results by the instance_id field.
func ByInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstanceID, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByPurchaserName orders the results by the purchaser_name field.
func ByPurchaserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPurchaserName, opts...).ToFunc()
}

// ByBidType orders the results by the bid_type field.
func ByBidType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBidType, opts...).ToFunc()
}

// ByAgencyName orders the results by the agency_name field.
func ByAgencyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgencyName, opts...).ToFunc()
}

// ByAgencyContact orders the results by the agency_contact field.
func ByAgencyContact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgencyContact, opts...).ToFunc()
}

// ByOpeningDate orders the results by the opening_date field.
func ByOpeningDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpeningDate, opts...).ToFunc()
}

// ByNoticeURL orders the results by the notice_url field.
func ByNoticeURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNoticeURL, opts...).ToFunc()
}

// ByBudgetAmount orders the results by the budget_amount field.
func ByBudgetAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBudgetAmount, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByApprovalStatus orders the results by the approval_status field.
func ByApprovalStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovalStatus, opts...).ToFunc()
}

// ByDone orders the results by the done field.
func ByDone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDone, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}

// ByCreateBy orders the results by the create_by field.
func ByCreateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateBy, opts...).ToFunc()
}

// ByUpdateAt orders the results by the update_at field.
func ByUpdateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateAt, opts...).ToFunc()
}

// ByUpdateBy orders the results by the update_by field.
func ByUpdateBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateBy, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProjectTable, ProjectColumn),
	)
}
