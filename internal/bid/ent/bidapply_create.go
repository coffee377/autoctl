// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cds/bid/ent/bidapply"
	"cds/bid/ent/bidproject"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BidApplyCreate is the builder for creating a BidApply entity.
type BidApplyCreate struct {
	config
	mutation *BidApplyMutation
	hooks    []Hook
}

// SetBusinessID sets the "business_id" field.
func (_c *BidApplyCreate) SetBusinessID(v string) *BidApplyCreate {
	_c.mutation.SetBusinessID(v)
	return _c
}

// SetInstanceID sets the "instance_id" field.
func (_c *BidApplyCreate) SetInstanceID(v string) *BidApplyCreate {
	_c.mutation.SetInstanceID(v)
	return _c
}

// SetProjectID sets the "project_id" field.
func (_c *BidApplyCreate) SetProjectID(v string) *BidApplyCreate {
	_c.mutation.SetProjectID(v)
	return _c
}

// SetPurchaserName sets the "purchaser_name" field.
func (_c *BidApplyCreate) SetPurchaserName(v string) *BidApplyCreate {
	_c.mutation.SetPurchaserName(v)
	return _c
}

// SetNillablePurchaserName sets the "purchaser_name" field if the given value is not nil.
func (_c *BidApplyCreate) SetNillablePurchaserName(v *string) *BidApplyCreate {
	if v != nil {
		_c.SetPurchaserName(*v)
	}
	return _c
}

// SetBidType sets the "bid_type" field.
func (_c *BidApplyCreate) SetBidType(v bidapply.BidType) *BidApplyCreate {
	_c.mutation.SetBidType(v)
	return _c
}

// SetNillableBidType sets the "bid_type" field if the given value is not nil.
func (_c *BidApplyCreate) SetNillableBidType(v *bidapply.BidType) *BidApplyCreate {
	if v != nil {
		_c.SetBidType(*v)
	}
	return _c
}

// SetAgencyName sets the "agency_name" field.
func (_c *BidApplyCreate) SetAgencyName(v string) *BidApplyCreate {
	_c.mutation.SetAgencyName(v)
	return _c
}

// SetNillableAgencyName sets the "agency_name" field if the given value is not nil.
func (_c *BidApplyCreate) SetNillableAgencyName(v *string) *BidApplyCreate {
	if v != nil {
		_c.SetAgencyName(*v)
	}
	return _c
}

// SetAgencyContact sets the "agency_contact" field.
func (_c *BidApplyCreate) SetAgencyContact(v string) *BidApplyCreate {
	_c.mutation.SetAgencyContact(v)
	return _c
}

// SetNillableAgencyContact sets the "agency_contact" field if the given value is not nil.
func (_c *BidApplyCreate) SetNillableAgencyContact(v *string) *BidApplyCreate {
	if v != nil {
		_c.SetAgencyContact(*v)
	}
	return _c
}

// SetOpeningDate sets the "opening_date" field.
func (_c *BidApplyCreate) SetOpeningDate(v time.Time) *BidApplyCreate {
	_c.mutation.SetOpeningDate(v)
	return _c
}

// SetNillableOpeningDate sets the "opening_date" field if the given value is not nil.
func (_c *BidApplyCreate) SetNillableOpeningDate(v *time.Time) *BidApplyCreate {
	if v != nil {
		_c.SetOpeningDate(*v)
	}
	return _c
}

// SetNoticeURL sets the "notice_url" field.
func (_c *BidApplyCreate) SetNoticeURL(v string) *BidApplyCreate {
	_c.mutation.SetNoticeURL(v)
	return _c
}

// SetNillableNoticeURL sets the "notice_url" field if the given value is not nil.
func (_c *BidApplyCreate) SetNillableNoticeURL(v *string) *BidApplyCreate {
	if v != nil {
		_c.SetNoticeURL(*v)
	}
	return _c
}

// SetBudgetAmount sets the "budget_amount" field.
func (_c *BidApplyCreate) SetBudgetAmount(v float64) *BidApplyCreate {
	_c.mutation.SetBudgetAmount(v)
	return _c
}

// SetNillableBudgetAmount sets the "budget_amount" field if the given value is not nil.
func (_c *BidApplyCreate) SetNillableBudgetAmount(v *float64) *BidApplyCreate {
	if v != nil {
		_c.SetBudgetAmount(*v)
	}
	return _c
}

// SetRemark sets the "remark" field.
func (_c *BidApplyCreate) SetRemark(v string) *BidApplyCreate {
	_c.mutation.SetRemark(v)
	return _c
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_c *BidApplyCreate) SetNillableRemark(v *string) *BidApplyCreate {
	if v != nil {
		_c.SetRemark(*v)
	}
	return _c
}

// SetAttachments sets the "attachments" field.
func (_c *BidApplyCreate) SetAttachments(v []map[string]interface{}) *BidApplyCreate {
	_c.mutation.SetAttachments(v)
	return _c
}

// SetApprovalStatus sets the "approval_status" field.
func (_c *BidApplyCreate) SetApprovalStatus(v string) *BidApplyCreate {
	_c.mutation.SetApprovalStatus(v)
	return _c
}

// SetDone sets the "done" field.
func (_c *BidApplyCreate) SetDone(v bool) *BidApplyCreate {
	_c.mutation.SetDone(v)
	return _c
}

// SetNillableDone sets the "done" field if the given value is not nil.
func (_c *BidApplyCreate) SetNillableDone(v *bool) *BidApplyCreate {
	if v != nil {
		_c.SetDone(*v)
	}
	return _c
}

// SetCreateAt sets the "create_at" field.
func (_c *BidApplyCreate) SetCreateAt(v time.Time) *BidApplyCreate {
	_c.mutation.SetCreateAt(v)
	return _c
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (_c *BidApplyCreate) SetNillableCreateAt(v *time.Time) *BidApplyCreate {
	if v != nil {
		_c.SetCreateAt(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *BidApplyCreate) SetCreateBy(v string) *BidApplyCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *BidApplyCreate) SetNillableCreateBy(v *string) *BidApplyCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateAt sets the "update_at" field.
func (_c *BidApplyCreate) SetUpdateAt(v time.Time) *BidApplyCreate {
	_c.mutation.SetUpdateAt(v)
	return _c
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (_c *BidApplyCreate) SetNillableUpdateAt(v *time.Time) *BidApplyCreate {
	if v != nil {
		_c.SetUpdateAt(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *BidApplyCreate) SetUpdateBy(v string) *BidApplyCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *BidApplyCreate) SetNillableUpdateBy(v *string) *BidApplyCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *BidApplyCreate) SetID(v string) *BidApplyCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetProject sets the "project" edge to the BidProject entity.
func (_c *BidApplyCreate) SetProject(v *BidProject) *BidApplyCreate {
	return _c.SetProjectID(v.ID)
}

// Mutation returns the BidApplyMutation object of the builder.
func (_c *BidApplyCreate) Mutation() *BidApplyMutation {
	return _c.mutation
}

// Save creates the BidApply in the database.
func (_c *BidApplyCreate) Save(ctx context.Context) (*BidApply, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BidApplyCreate) SaveX(ctx context.Context) *BidApply {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BidApplyCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BidApplyCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BidApplyCreate) defaults() {
	if _, ok := _c.mutation.BidType(); !ok {
		v := bidapply.DefaultBidType
		_c.mutation.SetBidType(v)
	}
	if _, ok := _c.mutation.BudgetAmount(); !ok {
		v := bidapply.DefaultBudgetAmount
		_c.mutation.SetBudgetAmount(v)
	}
	if _, ok := _c.mutation.Done(); !ok {
		v := bidapply.DefaultDone
		_c.mutation.SetDone(v)
	}
	if _, ok := _c.mutation.CreateAt(); !ok {
		v := bidapply.DefaultCreateAt()
		_c.mutation.SetCreateAt(v)
	}
	if _, ok := _c.mutation.UpdateAt(); !ok {
		v := bidapply.DefaultUpdateAt()
		_c.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BidApplyCreate) check() error {
	if _, ok := _c.mutation.BusinessID(); !ok {
		return &ValidationError{Name: "business_id", err: errors.New(`ent: missing required field "BidApply.business_id"`)}
	}
	if v, ok := _c.mutation.BusinessID(); ok {
		if err := bidapply.BusinessIDValidator(v); err != nil {
			return &ValidationError{Name: "business_id", err: fmt.Errorf(`ent: validator failed for field "BidApply.business_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.InstanceID(); !ok {
		return &ValidationError{Name: "instance_id", err: errors.New(`ent: missing required field "BidApply.instance_id"`)}
	}
	if v, ok := _c.mutation.InstanceID(); ok {
		if err := bidapply.InstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "instance_id", err: fmt.Errorf(`ent: validator failed for field "BidApply.instance_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "BidApply.project_id"`)}
	}
	if v, ok := _c.mutation.ProjectID(); ok {
		if err := bidapply.ProjectIDValidator(v); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`ent: validator failed for field "BidApply.project_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.PurchaserName(); ok {
		if err := bidapply.PurchaserNameValidator(v); err != nil {
			return &ValidationError{Name: "purchaser_name", err: fmt.Errorf(`ent: validator failed for field "BidApply.purchaser_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.BidType(); !ok {
		return &ValidationError{Name: "bid_type", err: errors.New(`ent: missing required field "BidApply.bid_type"`)}
	}
	if v, ok := _c.mutation.BidType(); ok {
		if err := bidapply.BidTypeValidator(v); err != nil {
			return &ValidationError{Name: "bid_type", err: fmt.Errorf(`ent: validator failed for field "BidApply.bid_type": %w`, err)}
		}
	}
	if v, ok := _c.mutation.AgencyName(); ok {
		if err := bidapply.AgencyNameValidator(v); err != nil {
			return &ValidationError{Name: "agency_name", err: fmt.Errorf(`ent: validator failed for field "BidApply.agency_name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.AgencyContact(); ok {
		if err := bidapply.AgencyContactValidator(v); err != nil {
			return &ValidationError{Name: "agency_contact", err: fmt.Errorf(`ent: validator failed for field "BidApply.agency_contact": %w`, err)}
		}
	}
	if _, ok := _c.mutation.BudgetAmount(); !ok {
		return &ValidationError{Name: "budget_amount", err: errors.New(`ent: missing required field "BidApply.budget_amount"`)}
	}
	if _, ok := _c.mutation.ApprovalStatus(); !ok {
		return &ValidationError{Name: "approval_status", err: errors.New(`ent: missing required field "BidApply.approval_status"`)}
	}
	if _, ok := _c.mutation.Done(); !ok {
		return &ValidationError{Name: "done", err: errors.New(`ent: missing required field "BidApply.done"`)}
	}
	if _, ok := _c.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "BidApply.create_at"`)}
	}
	if v, ok := _c.mutation.CreateBy(); ok {
		if err := bidapply.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`ent: validator failed for field "BidApply.create_by": %w`, err)}
		}
	}
	if _, ok := _c.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "BidApply.update_at"`)}
	}
	if v, ok := _c.mutation.UpdateBy(); ok {
		if err := bidapply.UpdateByValidator(v); err != nil {
			return &ValidationError{Name: "update_by", err: fmt.Errorf(`ent: validator failed for field "BidApply.update_by": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := bidapply.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "BidApply.id": %w`, err)}
		}
	}
	if len(_c.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "BidApply.project"`)}
	}
	return nil
}

func (_c *BidApplyCreate) sqlSave(ctx context.Context) (*BidApply, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BidApply.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BidApplyCreate) createSpec() (*BidApply, *sqlgraph.CreateSpec) {
	var (
		_node = &BidApply{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(bidapply.Table, sqlgraph.NewFieldSpec(bidapply.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.BusinessID(); ok {
		_spec.SetField(bidapply.FieldBusinessID, field.TypeString, value)
		_node.BusinessID = value
	}
	if value, ok := _c.mutation.InstanceID(); ok {
		_spec.SetField(bidapply.FieldInstanceID, field.TypeString, value)
		_node.InstanceID = value
	}
	if value, ok := _c.mutation.PurchaserName(); ok {
		_spec.SetField(bidapply.FieldPurchaserName, field.TypeString, value)
		_node.PurchaserName = &value
	}
	if value, ok := _c.mutation.BidType(); ok {
		_spec.SetField(bidapply.FieldBidType, field.TypeEnum, value)
		_node.BidType = value
	}
	if value, ok := _c.mutation.AgencyName(); ok {
		_spec.SetField(bidapply.FieldAgencyName, field.TypeString, value)
		_node.AgencyName = &value
	}
	if value, ok := _c.mutation.AgencyContact(); ok {
		_spec.SetField(bidapply.FieldAgencyContact, field.TypeString, value)
		_node.AgencyContact = &value
	}
	if value, ok := _c.mutation.OpeningDate(); ok {
		_spec.SetField(bidapply.FieldOpeningDate, field.TypeTime, value)
		_node.OpeningDate = &value
	}
	if value, ok := _c.mutation.NoticeURL(); ok {
		_spec.SetField(bidapply.FieldNoticeURL, field.TypeString, value)
		_node.NoticeURL = &value
	}
	if value, ok := _c.mutation.BudgetAmount(); ok {
		_spec.SetField(bidapply.FieldBudgetAmount, field.TypeFloat64, value)
		_node.BudgetAmount = value
	}
	if value, ok := _c.mutation.Remark(); ok {
		_spec.SetField(bidapply.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if value, ok := _c.mutation.Attachments(); ok {
		_spec.SetField(bidapply.FieldAttachments, field.TypeJSON, value)
		_node.Attachments = value
	}
	if value, ok := _c.mutation.ApprovalStatus(); ok {
		_spec.SetField(bidapply.FieldApprovalStatus, field.TypeString, value)
		_node.ApprovalStatus = value
	}
	if value, ok := _c.mutation.Done(); ok {
		_spec.SetField(bidapply.FieldDone, field.TypeBool, value)
		_node.Done = value
	}
	if value, ok := _c.mutation.CreateAt(); ok {
		_spec.SetField(bidapply.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(bidapply.FieldCreateBy, field.TypeString, value)
		_node.CreateBy = &value
	}
	if value, ok := _c.mutation.UpdateAt(); ok {
		_spec.SetField(bidapply.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(bidapply.FieldUpdateBy, field.TypeString, value)
		_node.UpdateBy = &value
	}
	if nodes := _c.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bidapply.ProjectTable,
			Columns: []string{bidapply.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidproject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BidApplyCreateBulk is the builder for creating many BidApply entities in bulk.
type BidApplyCreateBulk struct {
	config
	err      error
	builders []*BidApplyCreate
}

// Save creates the BidApply entities in the database.
func (_c *BidApplyCreateBulk) Save(ctx context.Context) ([]*BidApply, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BidApply, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BidApplyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BidApplyCreateBulk) SaveX(ctx context.Context) []*BidApply {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BidApplyCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BidApplyCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
