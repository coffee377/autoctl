// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cds/bid/ent/bidexpense"
	"cds/bid/ent/bidproject"
	"cds/bid/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BidExpenseUpdate is the builder for updating BidExpense entities.
type BidExpenseUpdate struct {
	config
	hooks     []Hook
	mutation  *BidExpenseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BidExpenseUpdate builder.
func (_u *BidExpenseUpdate) Where(ps ...predicate.BidExpense) *BidExpenseUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetBusinessID sets the "business_id" field.
func (_u *BidExpenseUpdate) SetBusinessID(v string) *BidExpenseUpdate {
	_u.mutation.SetBusinessID(v)
	return _u
}

// SetNillableBusinessID sets the "business_id" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableBusinessID(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetBusinessID(*v)
	}
	return _u
}

// SetInstanceID sets the "instance_id" field.
func (_u *BidExpenseUpdate) SetInstanceID(v string) *BidExpenseUpdate {
	_u.mutation.SetInstanceID(v)
	return _u
}

// SetNillableInstanceID sets the "instance_id" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableInstanceID(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetInstanceID(*v)
	}
	return _u
}

// SetBillNo sets the "bill_no" field.
func (_u *BidExpenseUpdate) SetBillNo(v string) *BidExpenseUpdate {
	_u.mutation.SetBillNo(v)
	return _u
}

// SetNillableBillNo sets the "bill_no" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableBillNo(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetBillNo(*v)
	}
	return _u
}

// SetProjectID sets the "project_id" field.
func (_u *BidExpenseUpdate) SetProjectID(v string) *BidExpenseUpdate {
	_u.mutation.SetProjectID(v)
	return _u
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableProjectID(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetProjectID(*v)
	}
	return _u
}

// ClearProjectID clears the value of the "project_id" field.
func (_u *BidExpenseUpdate) ClearProjectID() *BidExpenseUpdate {
	_u.mutation.ClearProjectID()
	return _u
}

// SetProjectName sets the "project_name" field.
func (_u *BidExpenseUpdate) SetProjectName(v string) *BidExpenseUpdate {
	_u.mutation.SetProjectName(v)
	return _u
}

// SetNillableProjectName sets the "project_name" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableProjectName(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetProjectName(*v)
	}
	return _u
}

// SetProjectCode sets the "project_code" field.
func (_u *BidExpenseUpdate) SetProjectCode(v string) *BidExpenseUpdate {
	_u.mutation.SetProjectCode(v)
	return _u
}

// SetNillableProjectCode sets the "project_code" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableProjectCode(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetProjectCode(*v)
	}
	return _u
}

// SetBizRepName sets the "biz_rep_name" field.
func (_u *BidExpenseUpdate) SetBizRepName(v string) *BidExpenseUpdate {
	_u.mutation.SetBizRepName(v)
	return _u
}

// SetNillableBizRepName sets the "biz_rep_name" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableBizRepName(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetBizRepName(*v)
	}
	return _u
}

// SetPurchaser sets the "purchaser" field.
func (_u *BidExpenseUpdate) SetPurchaser(v string) *BidExpenseUpdate {
	_u.mutation.SetPurchaser(v)
	return _u
}

// SetNillablePurchaser sets the "purchaser" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillablePurchaser(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetPurchaser(*v)
	}
	return _u
}

// ClearPurchaser clears the value of the "purchaser" field.
func (_u *BidExpenseUpdate) ClearPurchaser() *BidExpenseUpdate {
	_u.mutation.ClearPurchaser()
	return _u
}

// SetFeeTypeV1 sets the "fee_type_v1" field.
func (_u *BidExpenseUpdate) SetFeeTypeV1(v string) *BidExpenseUpdate {
	_u.mutation.SetFeeTypeV1(v)
	return _u
}

// SetNillableFeeTypeV1 sets the "fee_type_v1" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableFeeTypeV1(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetFeeTypeV1(*v)
	}
	return _u
}

// ClearFeeTypeV1 clears the value of the "fee_type_v1" field.
func (_u *BidExpenseUpdate) ClearFeeTypeV1() *BidExpenseUpdate {
	_u.mutation.ClearFeeTypeV1()
	return _u
}

// SetFeeType sets the "fee_type" field.
func (_u *BidExpenseUpdate) SetFeeType(v bidexpense.FeeType) *BidExpenseUpdate {
	_u.mutation.SetFeeType(v)
	return _u
}

// SetNillableFeeType sets the "fee_type" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableFeeType(v *bidexpense.FeeType) *BidExpenseUpdate {
	if v != nil {
		_u.SetFeeType(*v)
	}
	return _u
}

// SetPayReason sets the "pay_reason" field.
func (_u *BidExpenseUpdate) SetPayReason(v string) *BidExpenseUpdate {
	_u.mutation.SetPayReason(v)
	return _u
}

// SetNillablePayReason sets the "pay_reason" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillablePayReason(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetPayReason(*v)
	}
	return _u
}

// ClearPayReason clears the value of the "pay_reason" field.
func (_u *BidExpenseUpdate) ClearPayReason() *BidExpenseUpdate {
	_u.mutation.ClearPayReason()
	return _u
}

// SetRefunded sets the "refunded" field.
func (_u *BidExpenseUpdate) SetRefunded(v bool) *BidExpenseUpdate {
	_u.mutation.SetRefunded(v)
	return _u
}

// SetNillableRefunded sets the "refunded" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableRefunded(v *bool) *BidExpenseUpdate {
	if v != nil {
		_u.SetRefunded(*v)
	}
	return _u
}

// SetPayeeBank sets the "payee_bank" field.
func (_u *BidExpenseUpdate) SetPayeeBank(v string) *BidExpenseUpdate {
	_u.mutation.SetPayeeBank(v)
	return _u
}

// SetNillablePayeeBank sets the "payee_bank" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillablePayeeBank(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetPayeeBank(*v)
	}
	return _u
}

// SetPayeeName sets the "payee_name" field.
func (_u *BidExpenseUpdate) SetPayeeName(v string) *BidExpenseUpdate {
	_u.mutation.SetPayeeName(v)
	return _u
}

// SetNillablePayeeName sets the "payee_name" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillablePayeeName(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetPayeeName(*v)
	}
	return _u
}

// SetPayeeAccount sets the "payee_account" field.
func (_u *BidExpenseUpdate) SetPayeeAccount(v string) *BidExpenseUpdate {
	_u.mutation.SetPayeeAccount(v)
	return _u
}

// SetNillablePayeeAccount sets the "payee_account" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillablePayeeAccount(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetPayeeAccount(*v)
	}
	return _u
}

// SetPayRatio sets the "pay_ratio" field.
func (_u *BidExpenseUpdate) SetPayRatio(v float64) *BidExpenseUpdate {
	_u.mutation.ResetPayRatio()
	_u.mutation.SetPayRatio(v)
	return _u
}

// SetNillablePayRatio sets the "pay_ratio" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillablePayRatio(v *float64) *BidExpenseUpdate {
	if v != nil {
		_u.SetPayRatio(*v)
	}
	return _u
}

// AddPayRatio adds value to the "pay_ratio" field.
func (_u *BidExpenseUpdate) AddPayRatio(v float64) *BidExpenseUpdate {
	_u.mutation.AddPayRatio(v)
	return _u
}

// SetPayAmount sets the "pay_amount" field.
func (_u *BidExpenseUpdate) SetPayAmount(v float64) *BidExpenseUpdate {
	_u.mutation.ResetPayAmount()
	_u.mutation.SetPayAmount(v)
	return _u
}

// SetNillablePayAmount sets the "pay_amount" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillablePayAmount(v *float64) *BidExpenseUpdate {
	if v != nil {
		_u.SetPayAmount(*v)
	}
	return _u
}

// AddPayAmount adds value to the "pay_amount" field.
func (_u *BidExpenseUpdate) AddPayAmount(v float64) *BidExpenseUpdate {
	_u.mutation.AddPayAmount(v)
	return _u
}

// SetPayRemark sets the "pay_remark" field.
func (_u *BidExpenseUpdate) SetPayRemark(v string) *BidExpenseUpdate {
	_u.mutation.SetPayRemark(v)
	return _u
}

// SetNillablePayRemark sets the "pay_remark" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillablePayRemark(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetPayRemark(*v)
	}
	return _u
}

// ClearPayRemark clears the value of the "pay_remark" field.
func (_u *BidExpenseUpdate) ClearPayRemark() *BidExpenseUpdate {
	_u.mutation.ClearPayRemark()
	return _u
}

// SetPayMethod sets the "pay_method" field.
func (_u *BidExpenseUpdate) SetPayMethod(v string) *BidExpenseUpdate {
	_u.mutation.SetPayMethod(v)
	return _u
}

// SetNillablePayMethod sets the "pay_method" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillablePayMethod(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetPayMethod(*v)
	}
	return _u
}

// ClearPayMethod clears the value of the "pay_method" field.
func (_u *BidExpenseUpdate) ClearPayMethod() *BidExpenseUpdate {
	_u.mutation.ClearPayMethod()
	return _u
}

// SetPlanPayTime sets the "plan_pay_time" field.
func (_u *BidExpenseUpdate) SetPlanPayTime(v time.Time) *BidExpenseUpdate {
	_u.mutation.SetPlanPayTime(v)
	return _u
}

// SetNillablePlanPayTime sets the "plan_pay_time" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillablePlanPayTime(v *time.Time) *BidExpenseUpdate {
	if v != nil {
		_u.SetPlanPayTime(*v)
	}
	return _u
}

// SetApprovalStatus sets the "approval_status" field.
func (_u *BidExpenseUpdate) SetApprovalStatus(v string) *BidExpenseUpdate {
	_u.mutation.SetApprovalStatus(v)
	return _u
}

// SetNillableApprovalStatus sets the "approval_status" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableApprovalStatus(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetApprovalStatus(*v)
	}
	return _u
}

// SetDone sets the "done" field.
func (_u *BidExpenseUpdate) SetDone(v bool) *BidExpenseUpdate {
	_u.mutation.SetDone(v)
	return _u
}

// SetNillableDone sets the "done" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableDone(v *bool) *BidExpenseUpdate {
	if v != nil {
		_u.SetDone(*v)
	}
	return _u
}

// SetCreateAt sets the "create_at" field.
func (_u *BidExpenseUpdate) SetCreateAt(v time.Time) *BidExpenseUpdate {
	_u.mutation.SetCreateAt(v)
	return _u
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableCreateAt(v *time.Time) *BidExpenseUpdate {
	if v != nil {
		_u.SetCreateAt(*v)
	}
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *BidExpenseUpdate) SetCreateBy(v string) *BidExpenseUpdate {
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableCreateBy(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *BidExpenseUpdate) ClearCreateBy() *BidExpenseUpdate {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateAt sets the "update_at" field.
func (_u *BidExpenseUpdate) SetUpdateAt(v time.Time) *BidExpenseUpdate {
	_u.mutation.SetUpdateAt(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *BidExpenseUpdate) SetUpdateBy(v string) *BidExpenseUpdate {
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *BidExpenseUpdate) SetNillableUpdateBy(v *string) *BidExpenseUpdate {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *BidExpenseUpdate) ClearUpdateBy() *BidExpenseUpdate {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetProject sets the "project" edge to the BidProject entity.
func (_u *BidExpenseUpdate) SetProject(v *BidProject) *BidExpenseUpdate {
	return _u.SetProjectID(v.ID)
}

// Mutation returns the BidExpenseMutation object of the builder.
func (_u *BidExpenseUpdate) Mutation() *BidExpenseMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the BidProject entity.
func (_u *BidExpenseUpdate) ClearProject() *BidExpenseUpdate {
	_u.mutation.ClearProject()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BidExpenseUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BidExpenseUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BidExpenseUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BidExpenseUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BidExpenseUpdate) defaults() {
	if _, ok := _u.mutation.UpdateAt(); !ok {
		v := bidexpense.UpdateDefaultUpdateAt()
		_u.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BidExpenseUpdate) check() error {
	if v, ok := _u.mutation.BusinessID(); ok {
		if err := bidexpense.BusinessIDValidator(v); err != nil {
			return &ValidationError{Name: "business_id", err: fmt.Errorf(`ent: validator failed for field "BidExpense.business_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.InstanceID(); ok {
		if err := bidexpense.InstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "instance_id", err: fmt.Errorf(`ent: validator failed for field "BidExpense.instance_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BillNo(); ok {
		if err := bidexpense.BillNoValidator(v); err != nil {
			return &ValidationError{Name: "bill_no", err: fmt.Errorf(`ent: validator failed for field "BidExpense.bill_no": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProjectID(); ok {
		if err := bidexpense.ProjectIDValidator(v); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`ent: validator failed for field "BidExpense.project_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProjectName(); ok {
		if err := bidexpense.ProjectNameValidator(v); err != nil {
			return &ValidationError{Name: "project_name", err: fmt.Errorf(`ent: validator failed for field "BidExpense.project_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProjectCode(); ok {
		if err := bidexpense.ProjectCodeValidator(v); err != nil {
			return &ValidationError{Name: "project_code", err: fmt.Errorf(`ent: validator failed for field "BidExpense.project_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BizRepName(); ok {
		if err := bidexpense.BizRepNameValidator(v); err != nil {
			return &ValidationError{Name: "biz_rep_name", err: fmt.Errorf(`ent: validator failed for field "BidExpense.biz_rep_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Purchaser(); ok {
		if err := bidexpense.PurchaserValidator(v); err != nil {
			return &ValidationError{Name: "purchaser", err: fmt.Errorf(`ent: validator failed for field "BidExpense.purchaser": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FeeType(); ok {
		if err := bidexpense.FeeTypeValidator(v); err != nil {
			return &ValidationError{Name: "fee_type", err: fmt.Errorf(`ent: validator failed for field "BidExpense.fee_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PayReason(); ok {
		if err := bidexpense.PayReasonValidator(v); err != nil {
			return &ValidationError{Name: "pay_reason", err: fmt.Errorf(`ent: validator failed for field "BidExpense.pay_reason": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PayeeBank(); ok {
		if err := bidexpense.PayeeBankValidator(v); err != nil {
			return &ValidationError{Name: "payee_bank", err: fmt.Errorf(`ent: validator failed for field "BidExpense.payee_bank": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PayeeName(); ok {
		if err := bidexpense.PayeeNameValidator(v); err != nil {
			return &ValidationError{Name: "payee_name", err: fmt.Errorf(`ent: validator failed for field "BidExpense.payee_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PayeeAccount(); ok {
		if err := bidexpense.PayeeAccountValidator(v); err != nil {
			return &ValidationError{Name: "payee_account", err: fmt.Errorf(`ent: validator failed for field "BidExpense.payee_account": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PayMethod(); ok {
		if err := bidexpense.PayMethodValidator(v); err != nil {
			return &ValidationError{Name: "pay_method", err: fmt.Errorf(`ent: validator failed for field "BidExpense.pay_method": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CreateBy(); ok {
		if err := bidexpense.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`ent: validator failed for field "BidExpense.create_by": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UpdateBy(); ok {
		if err := bidexpense.UpdateByValidator(v); err != nil {
			return &ValidationError{Name: "update_by", err: fmt.Errorf(`ent: validator failed for field "BidExpense.update_by": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *BidExpenseUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BidExpenseUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *BidExpenseUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bidexpense.Table, bidexpense.Columns, sqlgraph.NewFieldSpec(bidexpense.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.BusinessID(); ok {
		_spec.SetField(bidexpense.FieldBusinessID, field.TypeString, value)
	}
	if value, ok := _u.mutation.InstanceID(); ok {
		_spec.SetField(bidexpense.FieldInstanceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.BillNo(); ok {
		_spec.SetField(bidexpense.FieldBillNo, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProjectName(); ok {
		_spec.SetField(bidexpense.FieldProjectName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProjectCode(); ok {
		_spec.SetField(bidexpense.FieldProjectCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.BizRepName(); ok {
		_spec.SetField(bidexpense.FieldBizRepName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Purchaser(); ok {
		_spec.SetField(bidexpense.FieldPurchaser, field.TypeString, value)
	}
	if _u.mutation.PurchaserCleared() {
		_spec.ClearField(bidexpense.FieldPurchaser, field.TypeString)
	}
	if value, ok := _u.mutation.FeeTypeV1(); ok {
		_spec.SetField(bidexpense.FieldFeeTypeV1, field.TypeString, value)
	}
	if _u.mutation.FeeTypeV1Cleared() {
		_spec.ClearField(bidexpense.FieldFeeTypeV1, field.TypeString)
	}
	if value, ok := _u.mutation.FeeType(); ok {
		_spec.SetField(bidexpense.FieldFeeType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.PayReason(); ok {
		_spec.SetField(bidexpense.FieldPayReason, field.TypeString, value)
	}
	if _u.mutation.PayReasonCleared() {
		_spec.ClearField(bidexpense.FieldPayReason, field.TypeString)
	}
	if value, ok := _u.mutation.Refunded(); ok {
		_spec.SetField(bidexpense.FieldRefunded, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PayeeBank(); ok {
		_spec.SetField(bidexpense.FieldPayeeBank, field.TypeString, value)
	}
	if value, ok := _u.mutation.PayeeName(); ok {
		_spec.SetField(bidexpense.FieldPayeeName, field.TypeString, value)
	}
	if value, ok := _u.mutation.PayeeAccount(); ok {
		_spec.SetField(bidexpense.FieldPayeeAccount, field.TypeString, value)
	}
	if value, ok := _u.mutation.PayRatio(); ok {
		_spec.SetField(bidexpense.FieldPayRatio, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPayRatio(); ok {
		_spec.AddField(bidexpense.FieldPayRatio, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.PayAmount(); ok {
		_spec.SetField(bidexpense.FieldPayAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPayAmount(); ok {
		_spec.AddField(bidexpense.FieldPayAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.PayRemark(); ok {
		_spec.SetField(bidexpense.FieldPayRemark, field.TypeString, value)
	}
	if _u.mutation.PayRemarkCleared() {
		_spec.ClearField(bidexpense.FieldPayRemark, field.TypeString)
	}
	if value, ok := _u.mutation.PayMethod(); ok {
		_spec.SetField(bidexpense.FieldPayMethod, field.TypeString, value)
	}
	if _u.mutation.PayMethodCleared() {
		_spec.ClearField(bidexpense.FieldPayMethod, field.TypeString)
	}
	if value, ok := _u.mutation.PlanPayTime(); ok {
		_spec.SetField(bidexpense.FieldPlanPayTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ApprovalStatus(); ok {
		_spec.SetField(bidexpense.FieldApprovalStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Done(); ok {
		_spec.SetField(bidexpense.FieldDone, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreateAt(); ok {
		_spec.SetField(bidexpense.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(bidexpense.FieldCreateBy, field.TypeString, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(bidexpense.FieldCreateBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdateAt(); ok {
		_spec.SetField(bidexpense.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(bidexpense.FieldUpdateBy, field.TypeString, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(bidexpense.FieldUpdateBy, field.TypeString)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bidexpense.ProjectTable,
			Columns: []string{bidexpense.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidproject.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bidexpense.ProjectTable,
			Columns: []string{bidexpense.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidproject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bidexpense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BidExpenseUpdateOne is the builder for updating a single BidExpense entity.
type BidExpenseUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BidExpenseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetBusinessID sets the "business_id" field.
func (_u *BidExpenseUpdateOne) SetBusinessID(v string) *BidExpenseUpdateOne {
	_u.mutation.SetBusinessID(v)
	return _u
}

// SetNillableBusinessID sets the "business_id" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableBusinessID(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetBusinessID(*v)
	}
	return _u
}

// SetInstanceID sets the "instance_id" field.
func (_u *BidExpenseUpdateOne) SetInstanceID(v string) *BidExpenseUpdateOne {
	_u.mutation.SetInstanceID(v)
	return _u
}

// SetNillableInstanceID sets the "instance_id" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableInstanceID(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetInstanceID(*v)
	}
	return _u
}

// SetBillNo sets the "bill_no" field.
func (_u *BidExpenseUpdateOne) SetBillNo(v string) *BidExpenseUpdateOne {
	_u.mutation.SetBillNo(v)
	return _u
}

// SetNillableBillNo sets the "bill_no" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableBillNo(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetBillNo(*v)
	}
	return _u
}

// SetProjectID sets the "project_id" field.
func (_u *BidExpenseUpdateOne) SetProjectID(v string) *BidExpenseUpdateOne {
	_u.mutation.SetProjectID(v)
	return _u
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableProjectID(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetProjectID(*v)
	}
	return _u
}

// ClearProjectID clears the value of the "project_id" field.
func (_u *BidExpenseUpdateOne) ClearProjectID() *BidExpenseUpdateOne {
	_u.mutation.ClearProjectID()
	return _u
}

// SetProjectName sets the "project_name" field.
func (_u *BidExpenseUpdateOne) SetProjectName(v string) *BidExpenseUpdateOne {
	_u.mutation.SetProjectName(v)
	return _u
}

// SetNillableProjectName sets the "project_name" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableProjectName(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetProjectName(*v)
	}
	return _u
}

// SetProjectCode sets the "project_code" field.
func (_u *BidExpenseUpdateOne) SetProjectCode(v string) *BidExpenseUpdateOne {
	_u.mutation.SetProjectCode(v)
	return _u
}

// SetNillableProjectCode sets the "project_code" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableProjectCode(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetProjectCode(*v)
	}
	return _u
}

// SetBizRepName sets the "biz_rep_name" field.
func (_u *BidExpenseUpdateOne) SetBizRepName(v string) *BidExpenseUpdateOne {
	_u.mutation.SetBizRepName(v)
	return _u
}

// SetNillableBizRepName sets the "biz_rep_name" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableBizRepName(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetBizRepName(*v)
	}
	return _u
}

// SetPurchaser sets the "purchaser" field.
func (_u *BidExpenseUpdateOne) SetPurchaser(v string) *BidExpenseUpdateOne {
	_u.mutation.SetPurchaser(v)
	return _u
}

// SetNillablePurchaser sets the "purchaser" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillablePurchaser(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetPurchaser(*v)
	}
	return _u
}

// ClearPurchaser clears the value of the "purchaser" field.
func (_u *BidExpenseUpdateOne) ClearPurchaser() *BidExpenseUpdateOne {
	_u.mutation.ClearPurchaser()
	return _u
}

// SetFeeTypeV1 sets the "fee_type_v1" field.
func (_u *BidExpenseUpdateOne) SetFeeTypeV1(v string) *BidExpenseUpdateOne {
	_u.mutation.SetFeeTypeV1(v)
	return _u
}

// SetNillableFeeTypeV1 sets the "fee_type_v1" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableFeeTypeV1(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetFeeTypeV1(*v)
	}
	return _u
}

// ClearFeeTypeV1 clears the value of the "fee_type_v1" field.
func (_u *BidExpenseUpdateOne) ClearFeeTypeV1() *BidExpenseUpdateOne {
	_u.mutation.ClearFeeTypeV1()
	return _u
}

// SetFeeType sets the "fee_type" field.
func (_u *BidExpenseUpdateOne) SetFeeType(v bidexpense.FeeType) *BidExpenseUpdateOne {
	_u.mutation.SetFeeType(v)
	return _u
}

// SetNillableFeeType sets the "fee_type" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableFeeType(v *bidexpense.FeeType) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetFeeType(*v)
	}
	return _u
}

// SetPayReason sets the "pay_reason" field.
func (_u *BidExpenseUpdateOne) SetPayReason(v string) *BidExpenseUpdateOne {
	_u.mutation.SetPayReason(v)
	return _u
}

// SetNillablePayReason sets the "pay_reason" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillablePayReason(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetPayReason(*v)
	}
	return _u
}

// ClearPayReason clears the value of the "pay_reason" field.
func (_u *BidExpenseUpdateOne) ClearPayReason() *BidExpenseUpdateOne {
	_u.mutation.ClearPayReason()
	return _u
}

// SetRefunded sets the "refunded" field.
func (_u *BidExpenseUpdateOne) SetRefunded(v bool) *BidExpenseUpdateOne {
	_u.mutation.SetRefunded(v)
	return _u
}

// SetNillableRefunded sets the "refunded" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableRefunded(v *bool) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetRefunded(*v)
	}
	return _u
}

// SetPayeeBank sets the "payee_bank" field.
func (_u *BidExpenseUpdateOne) SetPayeeBank(v string) *BidExpenseUpdateOne {
	_u.mutation.SetPayeeBank(v)
	return _u
}

// SetNillablePayeeBank sets the "payee_bank" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillablePayeeBank(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetPayeeBank(*v)
	}
	return _u
}

// SetPayeeName sets the "payee_name" field.
func (_u *BidExpenseUpdateOne) SetPayeeName(v string) *BidExpenseUpdateOne {
	_u.mutation.SetPayeeName(v)
	return _u
}

// SetNillablePayeeName sets the "payee_name" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillablePayeeName(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetPayeeName(*v)
	}
	return _u
}

// SetPayeeAccount sets the "payee_account" field.
func (_u *BidExpenseUpdateOne) SetPayeeAccount(v string) *BidExpenseUpdateOne {
	_u.mutation.SetPayeeAccount(v)
	return _u
}

// SetNillablePayeeAccount sets the "payee_account" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillablePayeeAccount(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetPayeeAccount(*v)
	}
	return _u
}

// SetPayRatio sets the "pay_ratio" field.
func (_u *BidExpenseUpdateOne) SetPayRatio(v float64) *BidExpenseUpdateOne {
	_u.mutation.ResetPayRatio()
	_u.mutation.SetPayRatio(v)
	return _u
}

// SetNillablePayRatio sets the "pay_ratio" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillablePayRatio(v *float64) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetPayRatio(*v)
	}
	return _u
}

// AddPayRatio adds value to the "pay_ratio" field.
func (_u *BidExpenseUpdateOne) AddPayRatio(v float64) *BidExpenseUpdateOne {
	_u.mutation.AddPayRatio(v)
	return _u
}

// SetPayAmount sets the "pay_amount" field.
func (_u *BidExpenseUpdateOne) SetPayAmount(v float64) *BidExpenseUpdateOne {
	_u.mutation.ResetPayAmount()
	_u.mutation.SetPayAmount(v)
	return _u
}

// SetNillablePayAmount sets the "pay_amount" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillablePayAmount(v *float64) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetPayAmount(*v)
	}
	return _u
}

// AddPayAmount adds value to the "pay_amount" field.
func (_u *BidExpenseUpdateOne) AddPayAmount(v float64) *BidExpenseUpdateOne {
	_u.mutation.AddPayAmount(v)
	return _u
}

// SetPayRemark sets the "pay_remark" field.
func (_u *BidExpenseUpdateOne) SetPayRemark(v string) *BidExpenseUpdateOne {
	_u.mutation.SetPayRemark(v)
	return _u
}

// SetNillablePayRemark sets the "pay_remark" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillablePayRemark(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetPayRemark(*v)
	}
	return _u
}

// ClearPayRemark clears the value of the "pay_remark" field.
func (_u *BidExpenseUpdateOne) ClearPayRemark() *BidExpenseUpdateOne {
	_u.mutation.ClearPayRemark()
	return _u
}

// SetPayMethod sets the "pay_method" field.
func (_u *BidExpenseUpdateOne) SetPayMethod(v string) *BidExpenseUpdateOne {
	_u.mutation.SetPayMethod(v)
	return _u
}

// SetNillablePayMethod sets the "pay_method" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillablePayMethod(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetPayMethod(*v)
	}
	return _u
}

// ClearPayMethod clears the value of the "pay_method" field.
func (_u *BidExpenseUpdateOne) ClearPayMethod() *BidExpenseUpdateOne {
	_u.mutation.ClearPayMethod()
	return _u
}

// SetPlanPayTime sets the "plan_pay_time" field.
func (_u *BidExpenseUpdateOne) SetPlanPayTime(v time.Time) *BidExpenseUpdateOne {
	_u.mutation.SetPlanPayTime(v)
	return _u
}

// SetNillablePlanPayTime sets the "plan_pay_time" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillablePlanPayTime(v *time.Time) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetPlanPayTime(*v)
	}
	return _u
}

// SetApprovalStatus sets the "approval_status" field.
func (_u *BidExpenseUpdateOne) SetApprovalStatus(v string) *BidExpenseUpdateOne {
	_u.mutation.SetApprovalStatus(v)
	return _u
}

// SetNillableApprovalStatus sets the "approval_status" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableApprovalStatus(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetApprovalStatus(*v)
	}
	return _u
}

// SetDone sets the "done" field.
func (_u *BidExpenseUpdateOne) SetDone(v bool) *BidExpenseUpdateOne {
	_u.mutation.SetDone(v)
	return _u
}

// SetNillableDone sets the "done" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableDone(v *bool) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetDone(*v)
	}
	return _u
}

// SetCreateAt sets the "create_at" field.
func (_u *BidExpenseUpdateOne) SetCreateAt(v time.Time) *BidExpenseUpdateOne {
	_u.mutation.SetCreateAt(v)
	return _u
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableCreateAt(v *time.Time) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetCreateAt(*v)
	}
	return _u
}

// SetCreateBy sets the "create_by" field.
func (_u *BidExpenseUpdateOne) SetCreateBy(v string) *BidExpenseUpdateOne {
	_u.mutation.SetCreateBy(v)
	return _u
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableCreateBy(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetCreateBy(*v)
	}
	return _u
}

// ClearCreateBy clears the value of the "create_by" field.
func (_u *BidExpenseUpdateOne) ClearCreateBy() *BidExpenseUpdateOne {
	_u.mutation.ClearCreateBy()
	return _u
}

// SetUpdateAt sets the "update_at" field.
func (_u *BidExpenseUpdateOne) SetUpdateAt(v time.Time) *BidExpenseUpdateOne {
	_u.mutation.SetUpdateAt(v)
	return _u
}

// SetUpdateBy sets the "update_by" field.
func (_u *BidExpenseUpdateOne) SetUpdateBy(v string) *BidExpenseUpdateOne {
	_u.mutation.SetUpdateBy(v)
	return _u
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_u *BidExpenseUpdateOne) SetNillableUpdateBy(v *string) *BidExpenseUpdateOne {
	if v != nil {
		_u.SetUpdateBy(*v)
	}
	return _u
}

// ClearUpdateBy clears the value of the "update_by" field.
func (_u *BidExpenseUpdateOne) ClearUpdateBy() *BidExpenseUpdateOne {
	_u.mutation.ClearUpdateBy()
	return _u
}

// SetProject sets the "project" edge to the BidProject entity.
func (_u *BidExpenseUpdateOne) SetProject(v *BidProject) *BidExpenseUpdateOne {
	return _u.SetProjectID(v.ID)
}

// Mutation returns the BidExpenseMutation object of the builder.
func (_u *BidExpenseUpdateOne) Mutation() *BidExpenseMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the BidProject entity.
func (_u *BidExpenseUpdateOne) ClearProject() *BidExpenseUpdateOne {
	_u.mutation.ClearProject()
	return _u
}

// Where appends a list predicates to the BidExpenseUpdate builder.
func (_u *BidExpenseUpdateOne) Where(ps ...predicate.BidExpense) *BidExpenseUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BidExpenseUpdateOne) Select(field string, fields ...string) *BidExpenseUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BidExpense entity.
func (_u *BidExpenseUpdateOne) Save(ctx context.Context) (*BidExpense, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BidExpenseUpdateOne) SaveX(ctx context.Context) *BidExpense {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BidExpenseUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BidExpenseUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *BidExpenseUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateAt(); !ok {
		v := bidexpense.UpdateDefaultUpdateAt()
		_u.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BidExpenseUpdateOne) check() error {
	if v, ok := _u.mutation.BusinessID(); ok {
		if err := bidexpense.BusinessIDValidator(v); err != nil {
			return &ValidationError{Name: "business_id", err: fmt.Errorf(`ent: validator failed for field "BidExpense.business_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.InstanceID(); ok {
		if err := bidexpense.InstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "instance_id", err: fmt.Errorf(`ent: validator failed for field "BidExpense.instance_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BillNo(); ok {
		if err := bidexpense.BillNoValidator(v); err != nil {
			return &ValidationError{Name: "bill_no", err: fmt.Errorf(`ent: validator failed for field "BidExpense.bill_no": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProjectID(); ok {
		if err := bidexpense.ProjectIDValidator(v); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`ent: validator failed for field "BidExpense.project_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProjectName(); ok {
		if err := bidexpense.ProjectNameValidator(v); err != nil {
			return &ValidationError{Name: "project_name", err: fmt.Errorf(`ent: validator failed for field "BidExpense.project_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProjectCode(); ok {
		if err := bidexpense.ProjectCodeValidator(v); err != nil {
			return &ValidationError{Name: "project_code", err: fmt.Errorf(`ent: validator failed for field "BidExpense.project_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BizRepName(); ok {
		if err := bidexpense.BizRepNameValidator(v); err != nil {
			return &ValidationError{Name: "biz_rep_name", err: fmt.Errorf(`ent: validator failed for field "BidExpense.biz_rep_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Purchaser(); ok {
		if err := bidexpense.PurchaserValidator(v); err != nil {
			return &ValidationError{Name: "purchaser", err: fmt.Errorf(`ent: validator failed for field "BidExpense.purchaser": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FeeType(); ok {
		if err := bidexpense.FeeTypeValidator(v); err != nil {
			return &ValidationError{Name: "fee_type", err: fmt.Errorf(`ent: validator failed for field "BidExpense.fee_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PayReason(); ok {
		if err := bidexpense.PayReasonValidator(v); err != nil {
			return &ValidationError{Name: "pay_reason", err: fmt.Errorf(`ent: validator failed for field "BidExpense.pay_reason": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PayeeBank(); ok {
		if err := bidexpense.PayeeBankValidator(v); err != nil {
			return &ValidationError{Name: "payee_bank", err: fmt.Errorf(`ent: validator failed for field "BidExpense.payee_bank": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PayeeName(); ok {
		if err := bidexpense.PayeeNameValidator(v); err != nil {
			return &ValidationError{Name: "payee_name", err: fmt.Errorf(`ent: validator failed for field "BidExpense.payee_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PayeeAccount(); ok {
		if err := bidexpense.PayeeAccountValidator(v); err != nil {
			return &ValidationError{Name: "payee_account", err: fmt.Errorf(`ent: validator failed for field "BidExpense.payee_account": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PayMethod(); ok {
		if err := bidexpense.PayMethodValidator(v); err != nil {
			return &ValidationError{Name: "pay_method", err: fmt.Errorf(`ent: validator failed for field "BidExpense.pay_method": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CreateBy(); ok {
		if err := bidexpense.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`ent: validator failed for field "BidExpense.create_by": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UpdateBy(); ok {
		if err := bidexpense.UpdateByValidator(v); err != nil {
			return &ValidationError{Name: "update_by", err: fmt.Errorf(`ent: validator failed for field "BidExpense.update_by": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *BidExpenseUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BidExpenseUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *BidExpenseUpdateOne) sqlSave(ctx context.Context) (_node *BidExpense, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bidexpense.Table, bidexpense.Columns, sqlgraph.NewFieldSpec(bidexpense.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BidExpense.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bidexpense.FieldID)
		for _, f := range fields {
			if !bidexpense.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bidexpense.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.BusinessID(); ok {
		_spec.SetField(bidexpense.FieldBusinessID, field.TypeString, value)
	}
	if value, ok := _u.mutation.InstanceID(); ok {
		_spec.SetField(bidexpense.FieldInstanceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.BillNo(); ok {
		_spec.SetField(bidexpense.FieldBillNo, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProjectName(); ok {
		_spec.SetField(bidexpense.FieldProjectName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProjectCode(); ok {
		_spec.SetField(bidexpense.FieldProjectCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.BizRepName(); ok {
		_spec.SetField(bidexpense.FieldBizRepName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Purchaser(); ok {
		_spec.SetField(bidexpense.FieldPurchaser, field.TypeString, value)
	}
	if _u.mutation.PurchaserCleared() {
		_spec.ClearField(bidexpense.FieldPurchaser, field.TypeString)
	}
	if value, ok := _u.mutation.FeeTypeV1(); ok {
		_spec.SetField(bidexpense.FieldFeeTypeV1, field.TypeString, value)
	}
	if _u.mutation.FeeTypeV1Cleared() {
		_spec.ClearField(bidexpense.FieldFeeTypeV1, field.TypeString)
	}
	if value, ok := _u.mutation.FeeType(); ok {
		_spec.SetField(bidexpense.FieldFeeType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.PayReason(); ok {
		_spec.SetField(bidexpense.FieldPayReason, field.TypeString, value)
	}
	if _u.mutation.PayReasonCleared() {
		_spec.ClearField(bidexpense.FieldPayReason, field.TypeString)
	}
	if value, ok := _u.mutation.Refunded(); ok {
		_spec.SetField(bidexpense.FieldRefunded, field.TypeBool, value)
	}
	if value, ok := _u.mutation.PayeeBank(); ok {
		_spec.SetField(bidexpense.FieldPayeeBank, field.TypeString, value)
	}
	if value, ok := _u.mutation.PayeeName(); ok {
		_spec.SetField(bidexpense.FieldPayeeName, field.TypeString, value)
	}
	if value, ok := _u.mutation.PayeeAccount(); ok {
		_spec.SetField(bidexpense.FieldPayeeAccount, field.TypeString, value)
	}
	if value, ok := _u.mutation.PayRatio(); ok {
		_spec.SetField(bidexpense.FieldPayRatio, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPayRatio(); ok {
		_spec.AddField(bidexpense.FieldPayRatio, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.PayAmount(); ok {
		_spec.SetField(bidexpense.FieldPayAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPayAmount(); ok {
		_spec.AddField(bidexpense.FieldPayAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.PayRemark(); ok {
		_spec.SetField(bidexpense.FieldPayRemark, field.TypeString, value)
	}
	if _u.mutation.PayRemarkCleared() {
		_spec.ClearField(bidexpense.FieldPayRemark, field.TypeString)
	}
	if value, ok := _u.mutation.PayMethod(); ok {
		_spec.SetField(bidexpense.FieldPayMethod, field.TypeString, value)
	}
	if _u.mutation.PayMethodCleared() {
		_spec.ClearField(bidexpense.FieldPayMethod, field.TypeString)
	}
	if value, ok := _u.mutation.PlanPayTime(); ok {
		_spec.SetField(bidexpense.FieldPlanPayTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ApprovalStatus(); ok {
		_spec.SetField(bidexpense.FieldApprovalStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Done(); ok {
		_spec.SetField(bidexpense.FieldDone, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreateAt(); ok {
		_spec.SetField(bidexpense.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CreateBy(); ok {
		_spec.SetField(bidexpense.FieldCreateBy, field.TypeString, value)
	}
	if _u.mutation.CreateByCleared() {
		_spec.ClearField(bidexpense.FieldCreateBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdateAt(); ok {
		_spec.SetField(bidexpense.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdateBy(); ok {
		_spec.SetField(bidexpense.FieldUpdateBy, field.TypeString, value)
	}
	if _u.mutation.UpdateByCleared() {
		_spec.ClearField(bidexpense.FieldUpdateBy, field.TypeString)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bidexpense.ProjectTable,
			Columns: []string{bidexpense.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidproject.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bidexpense.ProjectTable,
			Columns: []string{bidexpense.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidproject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &BidExpense{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bidexpense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
