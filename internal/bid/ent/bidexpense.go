// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cds/bid/ent/bidexpense"
	"cds/bid/ent/bidproject"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 投标费用支出
type BidExpense struct {
	config `json:"-"`
	// ID of the ent.
	// 投标支出 ID
	ID string `json:"id,omitempty"`
	// 审批编号
	BusinessID string `json:"business_id,omitempty"`
	// 审批实例 ID
	InstanceID string `json:"instance_id,omitempty"`
	// 单据编码
	BillNo string `json:"bill_no,omitempty"`
	// 项目 ID
	ProjectID *string `json:"project_id,omitempty"`
	// 项目名称
	ProjectName string `json:"project_name,omitempty"`
	// 项目编码
	ProjectCode string `json:"project_code,omitempty"`
	// 商务代表
	BizRepName string `json:"biz_rep_name,omitempty"`
	// 采购人名称
	Purchaser *string `json:"purchaser,omitempty"`
	// 费用类型
	FeeTypeV1 *string `json:"fee_type_v1,omitempty"`
	// 费用类型 RF:报名费 DF:标书工本费 CA:CA费用 EF:专家费 BB:投标保证金 BS:中标服务费 PB:履约保证金 PG:预付保函 OE:其他费用
	FeeType bidexpense.FeeType `json:"fee_type,omitempty"`
	// 付款事由
	PayReason *string `json:"pay_reason,omitempty"`
	// 是否（保证金）退还金额
	Refunded bool `json:"refunded,omitempty"`
	// 收款方开户银行
	PayeeBank string `json:"payee_bank,omitempty"`
	// 收款方账户名称
	PayeeName string `json:"payee_name,omitempty"`
	// 收款方账号
	PayeeAccount string `json:"payee_account,omitempty"`
	// 付款比例
	PayRatio float64 `json:"pay_ratio,omitempty"`
	// 付款金额（元）
	PayAmount float64 `json:"pay_amount,omitempty"`
	// 付款备注
	PayRemark *string `json:"pay_remark,omitempty"`
	// 付款方式
	PayMethod *string `json:"pay_method,omitempty"`
	// 预计转账时间
	PlanPayTime *time.Time `json:"plan_pay_time,omitempty"`
	// 费用审批状态
	ApprovalStatus string `json:"approval_status,omitempty"`
	// 审批流程是否已结束
	Done bool `json:"done,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 创建人
	CreateBy *string `json:"create_by,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
	// 更新人
	UpdateBy *string `json:"update_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BidExpenseQuery when eager-loading is set.
	Edges        BidExpenseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BidExpenseEdges holds the relations/edges for other nodes in the graph.
type BidExpenseEdges struct {
	// Project holds the value of the project edge.
	Project *BidProject `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BidExpenseEdges) ProjectOrErr() (*BidProject, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: bidproject.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BidExpense) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bidexpense.FieldRefunded, bidexpense.FieldDone:
			values[i] = new(sql.NullBool)
		case bidexpense.FieldPayRatio, bidexpense.FieldPayAmount:
			values[i] = new(sql.NullFloat64)
		case bidexpense.FieldID, bidexpense.FieldBusinessID, bidexpense.FieldInstanceID, bidexpense.FieldBillNo, bidexpense.FieldProjectID, bidexpense.FieldProjectName, bidexpense.FieldProjectCode, bidexpense.FieldBizRepName, bidexpense.FieldPurchaser, bidexpense.FieldFeeTypeV1, bidexpense.FieldFeeType, bidexpense.FieldPayReason, bidexpense.FieldPayeeBank, bidexpense.FieldPayeeName, bidexpense.FieldPayeeAccount, bidexpense.FieldPayRemark, bidexpense.FieldPayMethod, bidexpense.FieldApprovalStatus, bidexpense.FieldCreateBy, bidexpense.FieldUpdateBy:
			values[i] = new(sql.NullString)
		case bidexpense.FieldPlanPayTime, bidexpense.FieldCreateAt, bidexpense.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BidExpense fields.
func (_m *BidExpense) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bidexpense.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case bidexpense.FieldBusinessID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_id", values[i])
			} else if value.Valid {
				_m.BusinessID = value.String
			}
		case bidexpense.FieldInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_id", values[i])
			} else if value.Valid {
				_m.InstanceID = value.String
			}
		case bidexpense.FieldBillNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bill_no", values[i])
			} else if value.Valid {
				_m.BillNo = value.String
			}
		case bidexpense.FieldProjectID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				_m.ProjectID = new(string)
				*_m.ProjectID = value.String
			}
		case bidexpense.FieldProjectName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_name", values[i])
			} else if value.Valid {
				_m.ProjectName = value.String
			}
		case bidexpense.FieldProjectCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_code", values[i])
			} else if value.Valid {
				_m.ProjectCode = value.String
			}
		case bidexpense.FieldBizRepName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field biz_rep_name", values[i])
			} else if value.Valid {
				_m.BizRepName = value.String
			}
		case bidexpense.FieldPurchaser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field purchaser", values[i])
			} else if value.Valid {
				_m.Purchaser = new(string)
				*_m.Purchaser = value.String
			}
		case bidexpense.FieldFeeTypeV1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fee_type_v1", values[i])
			} else if value.Valid {
				_m.FeeTypeV1 = new(string)
				*_m.FeeTypeV1 = value.String
			}
		case bidexpense.FieldFeeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fee_type", values[i])
			} else if value.Valid {
				_m.FeeType = bidexpense.FeeType(value.String)
			}
		case bidexpense.FieldPayReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pay_reason", values[i])
			} else if value.Valid {
				_m.PayReason = new(string)
				*_m.PayReason = value.String
			}
		case bidexpense.FieldRefunded:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field refunded", values[i])
			} else if value.Valid {
				_m.Refunded = value.Bool
			}
		case bidexpense.FieldPayeeBank:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payee_bank", values[i])
			} else if value.Valid {
				_m.PayeeBank = value.String
			}
		case bidexpense.FieldPayeeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payee_name", values[i])
			} else if value.Valid {
				_m.PayeeName = value.String
			}
		case bidexpense.FieldPayeeAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payee_account", values[i])
			} else if value.Valid {
				_m.PayeeAccount = value.String
			}
		case bidexpense.FieldPayRatio:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_ratio", values[i])
			} else if value.Valid {
				_m.PayRatio = value.Float64
			}
		case bidexpense.FieldPayAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_amount", values[i])
			} else if value.Valid {
				_m.PayAmount = value.Float64
			}
		case bidexpense.FieldPayRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pay_remark", values[i])
			} else if value.Valid {
				_m.PayRemark = new(string)
				*_m.PayRemark = value.String
			}
		case bidexpense.FieldPayMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pay_method", values[i])
			} else if value.Valid {
				_m.PayMethod = new(string)
				*_m.PayMethod = value.String
			}
		case bidexpense.FieldPlanPayTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field plan_pay_time", values[i])
			} else if value.Valid {
				_m.PlanPayTime = new(time.Time)
				*_m.PlanPayTime = value.Time
			}
		case bidexpense.FieldApprovalStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approval_status", values[i])
			} else if value.Valid {
				_m.ApprovalStatus = value.String
			}
		case bidexpense.FieldDone:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field done", values[i])
			} else if value.Valid {
				_m.Done = value.Bool
			}
		case bidexpense.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				_m.CreateAt = value.Time
			}
		case bidexpense.FieldCreateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				_m.CreateBy = new(string)
				*_m.CreateBy = value.String
			}
		case bidexpense.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				_m.UpdateAt = value.Time
			}
		case bidexpense.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				_m.UpdateBy = new(string)
				*_m.UpdateBy = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BidExpense.
// This includes values selected through modifiers, order, etc.
func (_m *BidExpense) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the BidExpense entity.
func (_m *BidExpense) QueryProject() *BidProjectQuery {
	return NewBidExpenseClient(_m.config).QueryProject(_m)
}

// Update returns a builder for updating this BidExpense.
// Note that you need to call BidExpense.Unwrap() before calling this method if this BidExpense
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BidExpense) Update() *BidExpenseUpdateOne {
	return NewBidExpenseClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BidExpense entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BidExpense) Unwrap() *BidExpense {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: BidExpense is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BidExpense) String() string {
	var builder strings.Builder
	builder.WriteString("BidExpense(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("business_id=")
	builder.WriteString(_m.BusinessID)
	builder.WriteString(", ")
	builder.WriteString("instance_id=")
	builder.WriteString(_m.InstanceID)
	builder.WriteString(", ")
	builder.WriteString("bill_no=")
	builder.WriteString(_m.BillNo)
	builder.WriteString(", ")
	if v := _m.ProjectID; v != nil {
		builder.WriteString("project_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("project_name=")
	builder.WriteString(_m.ProjectName)
	builder.WriteString(", ")
	builder.WriteString("project_code=")
	builder.WriteString(_m.ProjectCode)
	builder.WriteString(", ")
	builder.WriteString("biz_rep_name=")
	builder.WriteString(_m.BizRepName)
	builder.WriteString(", ")
	if v := _m.Purchaser; v != nil {
		builder.WriteString("purchaser=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.FeeTypeV1; v != nil {
		builder.WriteString("fee_type_v1=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("fee_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.FeeType))
	builder.WriteString(", ")
	if v := _m.PayReason; v != nil {
		builder.WriteString("pay_reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("refunded=")
	builder.WriteString(fmt.Sprintf("%v", _m.Refunded))
	builder.WriteString(", ")
	builder.WriteString("payee_bank=")
	builder.WriteString(_m.PayeeBank)
	builder.WriteString(", ")
	builder.WriteString("payee_name=")
	builder.WriteString(_m.PayeeName)
	builder.WriteString(", ")
	builder.WriteString("payee_account=")
	builder.WriteString(_m.PayeeAccount)
	builder.WriteString(", ")
	builder.WriteString("pay_ratio=")
	builder.WriteString(fmt.Sprintf("%v", _m.PayRatio))
	builder.WriteString(", ")
	builder.WriteString("pay_amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.PayAmount))
	builder.WriteString(", ")
	if v := _m.PayRemark; v != nil {
		builder.WriteString("pay_remark=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.PayMethod; v != nil {
		builder.WriteString("pay_method=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.PlanPayTime; v != nil {
		builder.WriteString("plan_pay_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("approval_status=")
	builder.WriteString(_m.ApprovalStatus)
	builder.WriteString(", ")
	builder.WriteString("done=")
	builder.WriteString(fmt.Sprintf("%v", _m.Done))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(_m.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.CreateBy; v != nil {
		builder.WriteString("create_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(_m.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.UpdateBy; v != nil {
		builder.WriteString("update_by=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// BidExpenses is a parsable slice of BidExpense.
type BidExpenses []*BidExpense
