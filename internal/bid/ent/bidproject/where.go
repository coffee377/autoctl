// Code generated by ent, DO NOT EDIT.

package bidproject

import (
	"cds/bid/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContainsFold(FieldID, id))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldCode, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldName, v))
}

// DepartmentCode applies equality check predicate on the "department_code" field. It's identical to DepartmentCodeEQ.
func DepartmentCode(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldDepartmentCode, v))
}

// DepartmentName applies equality check predicate on the "department_name" field. It's identical to DepartmentNameEQ.
func DepartmentName(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldDepartmentName, v))
}

// BizRepNo applies equality check predicate on the "biz_rep_no" field. It's identical to BizRepNoEQ.
func BizRepNo(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldBizRepNo, v))
}

// BizRepName applies equality check predicate on the "biz_rep_name" field. It's identical to BizRepNameEQ.
func BizRepName(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldBizRepName, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldCreateAt, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldUpdateBy, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContainsFold(FieldCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.BidProject {
	return predicate.BidProject(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.BidProject {
	return predicate.BidProject(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.BidProject {
	return predicate.BidProject(sql.FieldNotIn(FieldType, vs...))
}

// DepartmentCodeEQ applies the EQ predicate on the "department_code" field.
func DepartmentCodeEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldDepartmentCode, v))
}

// DepartmentCodeNEQ applies the NEQ predicate on the "department_code" field.
func DepartmentCodeNEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNEQ(FieldDepartmentCode, v))
}

// DepartmentCodeIn applies the In predicate on the "department_code" field.
func DepartmentCodeIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldIn(FieldDepartmentCode, vs...))
}

// DepartmentCodeNotIn applies the NotIn predicate on the "department_code" field.
func DepartmentCodeNotIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNotIn(FieldDepartmentCode, vs...))
}

// DepartmentCodeGT applies the GT predicate on the "department_code" field.
func DepartmentCodeGT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGT(FieldDepartmentCode, v))
}

// DepartmentCodeGTE applies the GTE predicate on the "department_code" field.
func DepartmentCodeGTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGTE(FieldDepartmentCode, v))
}

// DepartmentCodeLT applies the LT predicate on the "department_code" field.
func DepartmentCodeLT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLT(FieldDepartmentCode, v))
}

// DepartmentCodeLTE applies the LTE predicate on the "department_code" field.
func DepartmentCodeLTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLTE(FieldDepartmentCode, v))
}

// DepartmentCodeContains applies the Contains predicate on the "department_code" field.
func DepartmentCodeContains(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContains(FieldDepartmentCode, v))
}

// DepartmentCodeHasPrefix applies the HasPrefix predicate on the "department_code" field.
func DepartmentCodeHasPrefix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasPrefix(FieldDepartmentCode, v))
}

// DepartmentCodeHasSuffix applies the HasSuffix predicate on the "department_code" field.
func DepartmentCodeHasSuffix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasSuffix(FieldDepartmentCode, v))
}

// DepartmentCodeEqualFold applies the EqualFold predicate on the "department_code" field.
func DepartmentCodeEqualFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEqualFold(FieldDepartmentCode, v))
}

// DepartmentCodeContainsFold applies the ContainsFold predicate on the "department_code" field.
func DepartmentCodeContainsFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContainsFold(FieldDepartmentCode, v))
}

// DepartmentNameEQ applies the EQ predicate on the "department_name" field.
func DepartmentNameEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldDepartmentName, v))
}

// DepartmentNameNEQ applies the NEQ predicate on the "department_name" field.
func DepartmentNameNEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNEQ(FieldDepartmentName, v))
}

// DepartmentNameIn applies the In predicate on the "department_name" field.
func DepartmentNameIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldIn(FieldDepartmentName, vs...))
}

// DepartmentNameNotIn applies the NotIn predicate on the "department_name" field.
func DepartmentNameNotIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNotIn(FieldDepartmentName, vs...))
}

// DepartmentNameGT applies the GT predicate on the "department_name" field.
func DepartmentNameGT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGT(FieldDepartmentName, v))
}

// DepartmentNameGTE applies the GTE predicate on the "department_name" field.
func DepartmentNameGTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGTE(FieldDepartmentName, v))
}

// DepartmentNameLT applies the LT predicate on the "department_name" field.
func DepartmentNameLT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLT(FieldDepartmentName, v))
}

// DepartmentNameLTE applies the LTE predicate on the "department_name" field.
func DepartmentNameLTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLTE(FieldDepartmentName, v))
}

// DepartmentNameContains applies the Contains predicate on the "department_name" field.
func DepartmentNameContains(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContains(FieldDepartmentName, v))
}

// DepartmentNameHasPrefix applies the HasPrefix predicate on the "department_name" field.
func DepartmentNameHasPrefix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasPrefix(FieldDepartmentName, v))
}

// DepartmentNameHasSuffix applies the HasSuffix predicate on the "department_name" field.
func DepartmentNameHasSuffix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasSuffix(FieldDepartmentName, v))
}

// DepartmentNameEqualFold applies the EqualFold predicate on the "department_name" field.
func DepartmentNameEqualFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEqualFold(FieldDepartmentName, v))
}

// DepartmentNameContainsFold applies the ContainsFold predicate on the "department_name" field.
func DepartmentNameContainsFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContainsFold(FieldDepartmentName, v))
}

// BizRepNoEQ applies the EQ predicate on the "biz_rep_no" field.
func BizRepNoEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldBizRepNo, v))
}

// BizRepNoNEQ applies the NEQ predicate on the "biz_rep_no" field.
func BizRepNoNEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNEQ(FieldBizRepNo, v))
}

// BizRepNoIn applies the In predicate on the "biz_rep_no" field.
func BizRepNoIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldIn(FieldBizRepNo, vs...))
}

// BizRepNoNotIn applies the NotIn predicate on the "biz_rep_no" field.
func BizRepNoNotIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNotIn(FieldBizRepNo, vs...))
}

// BizRepNoGT applies the GT predicate on the "biz_rep_no" field.
func BizRepNoGT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGT(FieldBizRepNo, v))
}

// BizRepNoGTE applies the GTE predicate on the "biz_rep_no" field.
func BizRepNoGTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGTE(FieldBizRepNo, v))
}

// BizRepNoLT applies the LT predicate on the "biz_rep_no" field.
func BizRepNoLT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLT(FieldBizRepNo, v))
}

// BizRepNoLTE applies the LTE predicate on the "biz_rep_no" field.
func BizRepNoLTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLTE(FieldBizRepNo, v))
}

// BizRepNoContains applies the Contains predicate on the "biz_rep_no" field.
func BizRepNoContains(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContains(FieldBizRepNo, v))
}

// BizRepNoHasPrefix applies the HasPrefix predicate on the "biz_rep_no" field.
func BizRepNoHasPrefix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasPrefix(FieldBizRepNo, v))
}

// BizRepNoHasSuffix applies the HasSuffix predicate on the "biz_rep_no" field.
func BizRepNoHasSuffix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasSuffix(FieldBizRepNo, v))
}

// BizRepNoEqualFold applies the EqualFold predicate on the "biz_rep_no" field.
func BizRepNoEqualFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEqualFold(FieldBizRepNo, v))
}

// BizRepNoContainsFold applies the ContainsFold predicate on the "biz_rep_no" field.
func BizRepNoContainsFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContainsFold(FieldBizRepNo, v))
}

// BizRepNameEQ applies the EQ predicate on the "biz_rep_name" field.
func BizRepNameEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldBizRepName, v))
}

// BizRepNameNEQ applies the NEQ predicate on the "biz_rep_name" field.
func BizRepNameNEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNEQ(FieldBizRepName, v))
}

// BizRepNameIn applies the In predicate on the "biz_rep_name" field.
func BizRepNameIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldIn(FieldBizRepName, vs...))
}

// BizRepNameNotIn applies the NotIn predicate on the "biz_rep_name" field.
func BizRepNameNotIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNotIn(FieldBizRepName, vs...))
}

// BizRepNameGT applies the GT predicate on the "biz_rep_name" field.
func BizRepNameGT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGT(FieldBizRepName, v))
}

// BizRepNameGTE applies the GTE predicate on the "biz_rep_name" field.
func BizRepNameGTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGTE(FieldBizRepName, v))
}

// BizRepNameLT applies the LT predicate on the "biz_rep_name" field.
func BizRepNameLT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLT(FieldBizRepName, v))
}

// BizRepNameLTE applies the LTE predicate on the "biz_rep_name" field.
func BizRepNameLTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLTE(FieldBizRepName, v))
}

// BizRepNameContains applies the Contains predicate on the "biz_rep_name" field.
func BizRepNameContains(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContains(FieldBizRepName, v))
}

// BizRepNameHasPrefix applies the HasPrefix predicate on the "biz_rep_name" field.
func BizRepNameHasPrefix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasPrefix(FieldBizRepName, v))
}

// BizRepNameHasSuffix applies the HasSuffix predicate on the "biz_rep_name" field.
func BizRepNameHasSuffix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasSuffix(FieldBizRepName, v))
}

// BizRepNameEqualFold applies the EqualFold predicate on the "biz_rep_name" field.
func BizRepNameEqualFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEqualFold(FieldBizRepName, v))
}

// BizRepNameContainsFold applies the ContainsFold predicate on the "biz_rep_name" field.
func BizRepNameContainsFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContainsFold(FieldBizRepName, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldLTE(FieldCreateAt, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByContains applies the Contains predicate on the "create_by" field.
func CreateByContains(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContains(FieldCreateBy, v))
}

// CreateByHasPrefix applies the HasPrefix predicate on the "create_by" field.
func CreateByHasPrefix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasPrefix(FieldCreateBy, v))
}

// CreateByHasSuffix applies the HasSuffix predicate on the "create_by" field.
func CreateByHasSuffix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasSuffix(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.BidProject {
	return predicate.BidProject(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.BidProject {
	return predicate.BidProject(sql.FieldNotNull(FieldCreateBy))
}

// CreateByEqualFold applies the EqualFold predicate on the "create_by" field.
func CreateByEqualFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEqualFold(FieldCreateBy, v))
}

// CreateByContainsFold applies the ContainsFold predicate on the "create_by" field.
func CreateByContainsFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContainsFold(FieldCreateBy, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.BidProject {
	return predicate.BidProject(sql.FieldLTE(FieldUpdateAt, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...string) predicate.BidProject {
	return predicate.BidProject(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByContains applies the Contains predicate on the "update_by" field.
func UpdateByContains(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContains(FieldUpdateBy, v))
}

// UpdateByHasPrefix applies the HasPrefix predicate on the "update_by" field.
func UpdateByHasPrefix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasPrefix(FieldUpdateBy, v))
}

// UpdateByHasSuffix applies the HasSuffix predicate on the "update_by" field.
func UpdateByHasSuffix(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldHasSuffix(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.BidProject {
	return predicate.BidProject(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.BidProject {
	return predicate.BidProject(sql.FieldNotNull(FieldUpdateBy))
}

// UpdateByEqualFold applies the EqualFold predicate on the "update_by" field.
func UpdateByEqualFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldEqualFold(FieldUpdateBy, v))
}

// UpdateByContainsFold applies the ContainsFold predicate on the "update_by" field.
func UpdateByContainsFold(v string) predicate.BidProject {
	return predicate.BidProject(sql.FieldContainsFold(FieldUpdateBy, v))
}

// HasApply applies the HasEdge predicate on the "apply" edge.
func HasApply() predicate.BidProject {
	return predicate.BidProject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ApplyTable, ApplyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplyWith applies the HasEdge predicate on the "apply" edge with a given conditions (other predicates).
func HasApplyWith(preds ...predicate.BidApply) predicate.BidProject {
	return predicate.BidProject(func(s *sql.Selector) {
		step := newApplyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExpense applies the HasEdge predicate on the "expense" edge.
func HasExpense() predicate.BidProject {
	return predicate.BidProject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExpenseTable, ExpenseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExpenseWith applies the HasEdge predicate on the "expense" edge with a given conditions (other predicates).
func HasExpenseWith(preds ...predicate.BidExpense) predicate.BidProject {
	return predicate.BidProject(func(s *sql.Selector) {
		step := newExpenseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BidProject) predicate.BidProject {
	return predicate.BidProject(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BidProject) predicate.BidProject {
	return predicate.BidProject(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BidProject) predicate.BidProject {
	return predicate.BidProject(sql.NotPredicates(p))
}
