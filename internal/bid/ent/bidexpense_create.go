// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cds/bid/ent/bidexpense"
	"cds/bid/ent/bidproject"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BidExpenseCreate is the builder for creating a BidExpense entity.
type BidExpenseCreate struct {
	config
	mutation *BidExpenseMutation
	hooks    []Hook
}

// SetBusinessID sets the "business_id" field.
func (_c *BidExpenseCreate) SetBusinessID(v string) *BidExpenseCreate {
	_c.mutation.SetBusinessID(v)
	return _c
}

// SetInstanceID sets the "instance_id" field.
func (_c *BidExpenseCreate) SetInstanceID(v string) *BidExpenseCreate {
	_c.mutation.SetInstanceID(v)
	return _c
}

// SetBillNo sets the "bill_no" field.
func (_c *BidExpenseCreate) SetBillNo(v string) *BidExpenseCreate {
	_c.mutation.SetBillNo(v)
	return _c
}

// SetProjectID sets the "project_id" field.
func (_c *BidExpenseCreate) SetProjectID(v string) *BidExpenseCreate {
	_c.mutation.SetProjectID(v)
	return _c
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillableProjectID(v *string) *BidExpenseCreate {
	if v != nil {
		_c.SetProjectID(*v)
	}
	return _c
}

// SetProjectName sets the "project_name" field.
func (_c *BidExpenseCreate) SetProjectName(v string) *BidExpenseCreate {
	_c.mutation.SetProjectName(v)
	return _c
}

// SetProjectCode sets the "project_code" field.
func (_c *BidExpenseCreate) SetProjectCode(v string) *BidExpenseCreate {
	_c.mutation.SetProjectCode(v)
	return _c
}

// SetBizRepName sets the "biz_rep_name" field.
func (_c *BidExpenseCreate) SetBizRepName(v string) *BidExpenseCreate {
	_c.mutation.SetBizRepName(v)
	return _c
}

// SetPurchaser sets the "purchaser" field.
func (_c *BidExpenseCreate) SetPurchaser(v string) *BidExpenseCreate {
	_c.mutation.SetPurchaser(v)
	return _c
}

// SetNillablePurchaser sets the "purchaser" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillablePurchaser(v *string) *BidExpenseCreate {
	if v != nil {
		_c.SetPurchaser(*v)
	}
	return _c
}

// SetFeeTypeV1 sets the "fee_type_v1" field.
func (_c *BidExpenseCreate) SetFeeTypeV1(v string) *BidExpenseCreate {
	_c.mutation.SetFeeTypeV1(v)
	return _c
}

// SetNillableFeeTypeV1 sets the "fee_type_v1" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillableFeeTypeV1(v *string) *BidExpenseCreate {
	if v != nil {
		_c.SetFeeTypeV1(*v)
	}
	return _c
}

// SetFeeType sets the "fee_type" field.
func (_c *BidExpenseCreate) SetFeeType(v bidexpense.FeeType) *BidExpenseCreate {
	_c.mutation.SetFeeType(v)
	return _c
}

// SetNillableFeeType sets the "fee_type" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillableFeeType(v *bidexpense.FeeType) *BidExpenseCreate {
	if v != nil {
		_c.SetFeeType(*v)
	}
	return _c
}

// SetPayReason sets the "pay_reason" field.
func (_c *BidExpenseCreate) SetPayReason(v string) *BidExpenseCreate {
	_c.mutation.SetPayReason(v)
	return _c
}

// SetNillablePayReason sets the "pay_reason" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillablePayReason(v *string) *BidExpenseCreate {
	if v != nil {
		_c.SetPayReason(*v)
	}
	return _c
}

// SetRefunded sets the "refunded" field.
func (_c *BidExpenseCreate) SetRefunded(v bool) *BidExpenseCreate {
	_c.mutation.SetRefunded(v)
	return _c
}

// SetNillableRefunded sets the "refunded" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillableRefunded(v *bool) *BidExpenseCreate {
	if v != nil {
		_c.SetRefunded(*v)
	}
	return _c
}

// SetPayeeBank sets the "payee_bank" field.
func (_c *BidExpenseCreate) SetPayeeBank(v string) *BidExpenseCreate {
	_c.mutation.SetPayeeBank(v)
	return _c
}

// SetPayeeName sets the "payee_name" field.
func (_c *BidExpenseCreate) SetPayeeName(v string) *BidExpenseCreate {
	_c.mutation.SetPayeeName(v)
	return _c
}

// SetPayeeAccount sets the "payee_account" field.
func (_c *BidExpenseCreate) SetPayeeAccount(v string) *BidExpenseCreate {
	_c.mutation.SetPayeeAccount(v)
	return _c
}

// SetPayRatio sets the "pay_ratio" field.
func (_c *BidExpenseCreate) SetPayRatio(v float64) *BidExpenseCreate {
	_c.mutation.SetPayRatio(v)
	return _c
}

// SetNillablePayRatio sets the "pay_ratio" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillablePayRatio(v *float64) *BidExpenseCreate {
	if v != nil {
		_c.SetPayRatio(*v)
	}
	return _c
}

// SetPayAmount sets the "pay_amount" field.
func (_c *BidExpenseCreate) SetPayAmount(v float64) *BidExpenseCreate {
	_c.mutation.SetPayAmount(v)
	return _c
}

// SetNillablePayAmount sets the "pay_amount" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillablePayAmount(v *float64) *BidExpenseCreate {
	if v != nil {
		_c.SetPayAmount(*v)
	}
	return _c
}

// SetPayRemark sets the "pay_remark" field.
func (_c *BidExpenseCreate) SetPayRemark(v string) *BidExpenseCreate {
	_c.mutation.SetPayRemark(v)
	return _c
}

// SetNillablePayRemark sets the "pay_remark" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillablePayRemark(v *string) *BidExpenseCreate {
	if v != nil {
		_c.SetPayRemark(*v)
	}
	return _c
}

// SetPayMethod sets the "pay_method" field.
func (_c *BidExpenseCreate) SetPayMethod(v string) *BidExpenseCreate {
	_c.mutation.SetPayMethod(v)
	return _c
}

// SetNillablePayMethod sets the "pay_method" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillablePayMethod(v *string) *BidExpenseCreate {
	if v != nil {
		_c.SetPayMethod(*v)
	}
	return _c
}

// SetPlanPayTime sets the "plan_pay_time" field.
func (_c *BidExpenseCreate) SetPlanPayTime(v time.Time) *BidExpenseCreate {
	_c.mutation.SetPlanPayTime(v)
	return _c
}

// SetApprovalStatus sets the "approval_status" field.
func (_c *BidExpenseCreate) SetApprovalStatus(v string) *BidExpenseCreate {
	_c.mutation.SetApprovalStatus(v)
	return _c
}

// SetDone sets the "done" field.
func (_c *BidExpenseCreate) SetDone(v bool) *BidExpenseCreate {
	_c.mutation.SetDone(v)
	return _c
}

// SetNillableDone sets the "done" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillableDone(v *bool) *BidExpenseCreate {
	if v != nil {
		_c.SetDone(*v)
	}
	return _c
}

// SetCreateAt sets the "create_at" field.
func (_c *BidExpenseCreate) SetCreateAt(v time.Time) *BidExpenseCreate {
	_c.mutation.SetCreateAt(v)
	return _c
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillableCreateAt(v *time.Time) *BidExpenseCreate {
	if v != nil {
		_c.SetCreateAt(*v)
	}
	return _c
}

// SetCreateBy sets the "create_by" field.
func (_c *BidExpenseCreate) SetCreateBy(v string) *BidExpenseCreate {
	_c.mutation.SetCreateBy(v)
	return _c
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillableCreateBy(v *string) *BidExpenseCreate {
	if v != nil {
		_c.SetCreateBy(*v)
	}
	return _c
}

// SetUpdateAt sets the "update_at" field.
func (_c *BidExpenseCreate) SetUpdateAt(v time.Time) *BidExpenseCreate {
	_c.mutation.SetUpdateAt(v)
	return _c
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillableUpdateAt(v *time.Time) *BidExpenseCreate {
	if v != nil {
		_c.SetUpdateAt(*v)
	}
	return _c
}

// SetUpdateBy sets the "update_by" field.
func (_c *BidExpenseCreate) SetUpdateBy(v string) *BidExpenseCreate {
	_c.mutation.SetUpdateBy(v)
	return _c
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (_c *BidExpenseCreate) SetNillableUpdateBy(v *string) *BidExpenseCreate {
	if v != nil {
		_c.SetUpdateBy(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *BidExpenseCreate) SetID(v string) *BidExpenseCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetProject sets the "project" edge to the BidProject entity.
func (_c *BidExpenseCreate) SetProject(v *BidProject) *BidExpenseCreate {
	return _c.SetProjectID(v.ID)
}

// Mutation returns the BidExpenseMutation object of the builder.
func (_c *BidExpenseCreate) Mutation() *BidExpenseMutation {
	return _c.mutation
}

// Save creates the BidExpense in the database.
func (_c *BidExpenseCreate) Save(ctx context.Context) (*BidExpense, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BidExpenseCreate) SaveX(ctx context.Context) *BidExpense {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BidExpenseCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BidExpenseCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *BidExpenseCreate) defaults() {
	if _, ok := _c.mutation.FeeType(); !ok {
		v := bidexpense.DefaultFeeType
		_c.mutation.SetFeeType(v)
	}
	if _, ok := _c.mutation.Refunded(); !ok {
		v := bidexpense.DefaultRefunded
		_c.mutation.SetRefunded(v)
	}
	if _, ok := _c.mutation.PayRatio(); !ok {
		v := bidexpense.DefaultPayRatio
		_c.mutation.SetPayRatio(v)
	}
	if _, ok := _c.mutation.PayAmount(); !ok {
		v := bidexpense.DefaultPayAmount
		_c.mutation.SetPayAmount(v)
	}
	if _, ok := _c.mutation.Done(); !ok {
		v := bidexpense.DefaultDone
		_c.mutation.SetDone(v)
	}
	if _, ok := _c.mutation.CreateAt(); !ok {
		v := bidexpense.DefaultCreateAt()
		_c.mutation.SetCreateAt(v)
	}
	if _, ok := _c.mutation.UpdateAt(); !ok {
		v := bidexpense.DefaultUpdateAt()
		_c.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BidExpenseCreate) check() error {
	if _, ok := _c.mutation.BusinessID(); !ok {
		return &ValidationError{Name: "business_id", err: errors.New(`ent: missing required field "BidExpense.business_id"`)}
	}
	if v, ok := _c.mutation.BusinessID(); ok {
		if err := bidexpense.BusinessIDValidator(v); err != nil {
			return &ValidationError{Name: "business_id", err: fmt.Errorf(`ent: validator failed for field "BidExpense.business_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.InstanceID(); !ok {
		return &ValidationError{Name: "instance_id", err: errors.New(`ent: missing required field "BidExpense.instance_id"`)}
	}
	if v, ok := _c.mutation.InstanceID(); ok {
		if err := bidexpense.InstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "instance_id", err: fmt.Errorf(`ent: validator failed for field "BidExpense.instance_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.BillNo(); !ok {
		return &ValidationError{Name: "bill_no", err: errors.New(`ent: missing required field "BidExpense.bill_no"`)}
	}
	if v, ok := _c.mutation.BillNo(); ok {
		if err := bidexpense.BillNoValidator(v); err != nil {
			return &ValidationError{Name: "bill_no", err: fmt.Errorf(`ent: validator failed for field "BidExpense.bill_no": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ProjectID(); ok {
		if err := bidexpense.ProjectIDValidator(v); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`ent: validator failed for field "BidExpense.project_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ProjectName(); !ok {
		return &ValidationError{Name: "project_name", err: errors.New(`ent: missing required field "BidExpense.project_name"`)}
	}
	if v, ok := _c.mutation.ProjectName(); ok {
		if err := bidexpense.ProjectNameValidator(v); err != nil {
			return &ValidationError{Name: "project_name", err: fmt.Errorf(`ent: validator failed for field "BidExpense.project_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ProjectCode(); !ok {
		return &ValidationError{Name: "project_code", err: errors.New(`ent: missing required field "BidExpense.project_code"`)}
	}
	if v, ok := _c.mutation.ProjectCode(); ok {
		if err := bidexpense.ProjectCodeValidator(v); err != nil {
			return &ValidationError{Name: "project_code", err: fmt.Errorf(`ent: validator failed for field "BidExpense.project_code": %w`, err)}
		}
	}
	if _, ok := _c.mutation.BizRepName(); !ok {
		return &ValidationError{Name: "biz_rep_name", err: errors.New(`ent: missing required field "BidExpense.biz_rep_name"`)}
	}
	if v, ok := _c.mutation.BizRepName(); ok {
		if err := bidexpense.BizRepNameValidator(v); err != nil {
			return &ValidationError{Name: "biz_rep_name", err: fmt.Errorf(`ent: validator failed for field "BidExpense.biz_rep_name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Purchaser(); ok {
		if err := bidexpense.PurchaserValidator(v); err != nil {
			return &ValidationError{Name: "purchaser", err: fmt.Errorf(`ent: validator failed for field "BidExpense.purchaser": %w`, err)}
		}
	}
	if _, ok := _c.mutation.FeeType(); !ok {
		return &ValidationError{Name: "fee_type", err: errors.New(`ent: missing required field "BidExpense.fee_type"`)}
	}
	if v, ok := _c.mutation.FeeType(); ok {
		if err := bidexpense.FeeTypeValidator(v); err != nil {
			return &ValidationError{Name: "fee_type", err: fmt.Errorf(`ent: validator failed for field "BidExpense.fee_type": %w`, err)}
		}
	}
	if v, ok := _c.mutation.PayReason(); ok {
		if err := bidexpense.PayReasonValidator(v); err != nil {
			return &ValidationError{Name: "pay_reason", err: fmt.Errorf(`ent: validator failed for field "BidExpense.pay_reason": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Refunded(); !ok {
		return &ValidationError{Name: "refunded", err: errors.New(`ent: missing required field "BidExpense.refunded"`)}
	}
	if _, ok := _c.mutation.PayeeBank(); !ok {
		return &ValidationError{Name: "payee_bank", err: errors.New(`ent: missing required field "BidExpense.payee_bank"`)}
	}
	if v, ok := _c.mutation.PayeeBank(); ok {
		if err := bidexpense.PayeeBankValidator(v); err != nil {
			return &ValidationError{Name: "payee_bank", err: fmt.Errorf(`ent: validator failed for field "BidExpense.payee_bank": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PayeeName(); !ok {
		return &ValidationError{Name: "payee_name", err: errors.New(`ent: missing required field "BidExpense.payee_name"`)}
	}
	if v, ok := _c.mutation.PayeeName(); ok {
		if err := bidexpense.PayeeNameValidator(v); err != nil {
			return &ValidationError{Name: "payee_name", err: fmt.Errorf(`ent: validator failed for field "BidExpense.payee_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PayeeAccount(); !ok {
		return &ValidationError{Name: "payee_account", err: errors.New(`ent: missing required field "BidExpense.payee_account"`)}
	}
	if v, ok := _c.mutation.PayeeAccount(); ok {
		if err := bidexpense.PayeeAccountValidator(v); err != nil {
			return &ValidationError{Name: "payee_account", err: fmt.Errorf(`ent: validator failed for field "BidExpense.payee_account": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PayRatio(); !ok {
		return &ValidationError{Name: "pay_ratio", err: errors.New(`ent: missing required field "BidExpense.pay_ratio"`)}
	}
	if _, ok := _c.mutation.PayAmount(); !ok {
		return &ValidationError{Name: "pay_amount", err: errors.New(`ent: missing required field "BidExpense.pay_amount"`)}
	}
	if v, ok := _c.mutation.PayMethod(); ok {
		if err := bidexpense.PayMethodValidator(v); err != nil {
			return &ValidationError{Name: "pay_method", err: fmt.Errorf(`ent: validator failed for field "BidExpense.pay_method": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PlanPayTime(); !ok {
		return &ValidationError{Name: "plan_pay_time", err: errors.New(`ent: missing required field "BidExpense.plan_pay_time"`)}
	}
	if _, ok := _c.mutation.ApprovalStatus(); !ok {
		return &ValidationError{Name: "approval_status", err: errors.New(`ent: missing required field "BidExpense.approval_status"`)}
	}
	if _, ok := _c.mutation.Done(); !ok {
		return &ValidationError{Name: "done", err: errors.New(`ent: missing required field "BidExpense.done"`)}
	}
	if _, ok := _c.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "BidExpense.create_at"`)}
	}
	if v, ok := _c.mutation.CreateBy(); ok {
		if err := bidexpense.CreateByValidator(v); err != nil {
			return &ValidationError{Name: "create_by", err: fmt.Errorf(`ent: validator failed for field "BidExpense.create_by": %w`, err)}
		}
	}
	if _, ok := _c.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "BidExpense.update_at"`)}
	}
	if v, ok := _c.mutation.UpdateBy(); ok {
		if err := bidexpense.UpdateByValidator(v); err != nil {
			return &ValidationError{Name: "update_by", err: fmt.Errorf(`ent: validator failed for field "BidExpense.update_by": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := bidexpense.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "BidExpense.id": %w`, err)}
		}
	}
	return nil
}

func (_c *BidExpenseCreate) sqlSave(ctx context.Context) (*BidExpense, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BidExpense.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BidExpenseCreate) createSpec() (*BidExpense, *sqlgraph.CreateSpec) {
	var (
		_node = &BidExpense{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(bidexpense.Table, sqlgraph.NewFieldSpec(bidexpense.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.BusinessID(); ok {
		_spec.SetField(bidexpense.FieldBusinessID, field.TypeString, value)
		_node.BusinessID = value
	}
	if value, ok := _c.mutation.InstanceID(); ok {
		_spec.SetField(bidexpense.FieldInstanceID, field.TypeString, value)
		_node.InstanceID = value
	}
	if value, ok := _c.mutation.BillNo(); ok {
		_spec.SetField(bidexpense.FieldBillNo, field.TypeString, value)
		_node.BillNo = value
	}
	if value, ok := _c.mutation.ProjectName(); ok {
		_spec.SetField(bidexpense.FieldProjectName, field.TypeString, value)
		_node.ProjectName = value
	}
	if value, ok := _c.mutation.ProjectCode(); ok {
		_spec.SetField(bidexpense.FieldProjectCode, field.TypeString, value)
		_node.ProjectCode = value
	}
	if value, ok := _c.mutation.BizRepName(); ok {
		_spec.SetField(bidexpense.FieldBizRepName, field.TypeString, value)
		_node.BizRepName = value
	}
	if value, ok := _c.mutation.Purchaser(); ok {
		_spec.SetField(bidexpense.FieldPurchaser, field.TypeString, value)
		_node.Purchaser = &value
	}
	if value, ok := _c.mutation.FeeTypeV1(); ok {
		_spec.SetField(bidexpense.FieldFeeTypeV1, field.TypeString, value)
		_node.FeeTypeV1 = &value
	}
	if value, ok := _c.mutation.FeeType(); ok {
		_spec.SetField(bidexpense.FieldFeeType, field.TypeEnum, value)
		_node.FeeType = value
	}
	if value, ok := _c.mutation.PayReason(); ok {
		_spec.SetField(bidexpense.FieldPayReason, field.TypeString, value)
		_node.PayReason = &value
	}
	if value, ok := _c.mutation.Refunded(); ok {
		_spec.SetField(bidexpense.FieldRefunded, field.TypeBool, value)
		_node.Refunded = value
	}
	if value, ok := _c.mutation.PayeeBank(); ok {
		_spec.SetField(bidexpense.FieldPayeeBank, field.TypeString, value)
		_node.PayeeBank = value
	}
	if value, ok := _c.mutation.PayeeName(); ok {
		_spec.SetField(bidexpense.FieldPayeeName, field.TypeString, value)
		_node.PayeeName = value
	}
	if value, ok := _c.mutation.PayeeAccount(); ok {
		_spec.SetField(bidexpense.FieldPayeeAccount, field.TypeString, value)
		_node.PayeeAccount = value
	}
	if value, ok := _c.mutation.PayRatio(); ok {
		_spec.SetField(bidexpense.FieldPayRatio, field.TypeFloat64, value)
		_node.PayRatio = value
	}
	if value, ok := _c.mutation.PayAmount(); ok {
		_spec.SetField(bidexpense.FieldPayAmount, field.TypeFloat64, value)
		_node.PayAmount = value
	}
	if value, ok := _c.mutation.PayRemark(); ok {
		_spec.SetField(bidexpense.FieldPayRemark, field.TypeString, value)
		_node.PayRemark = &value
	}
	if value, ok := _c.mutation.PayMethod(); ok {
		_spec.SetField(bidexpense.FieldPayMethod, field.TypeString, value)
		_node.PayMethod = &value
	}
	if value, ok := _c.mutation.PlanPayTime(); ok {
		_spec.SetField(bidexpense.FieldPlanPayTime, field.TypeTime, value)
		_node.PlanPayTime = &value
	}
	if value, ok := _c.mutation.ApprovalStatus(); ok {
		_spec.SetField(bidexpense.FieldApprovalStatus, field.TypeString, value)
		_node.ApprovalStatus = value
	}
	if value, ok := _c.mutation.Done(); ok {
		_spec.SetField(bidexpense.FieldDone, field.TypeBool, value)
		_node.Done = value
	}
	if value, ok := _c.mutation.CreateAt(); ok {
		_spec.SetField(bidexpense.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := _c.mutation.CreateBy(); ok {
		_spec.SetField(bidexpense.FieldCreateBy, field.TypeString, value)
		_node.CreateBy = &value
	}
	if value, ok := _c.mutation.UpdateAt(); ok {
		_spec.SetField(bidexpense.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	if value, ok := _c.mutation.UpdateBy(); ok {
		_spec.SetField(bidexpense.FieldUpdateBy, field.TypeString, value)
		_node.UpdateBy = &value
	}
	if nodes := _c.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bidexpense.ProjectTable,
			Columns: []string{bidexpense.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bidproject.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BidExpenseCreateBulk is the builder for creating many BidExpense entities in bulk.
type BidExpenseCreateBulk struct {
	config
	err      error
	builders []*BidExpenseCreate
}

// Save creates the BidExpense entities in the database.
func (_c *BidExpenseCreateBulk) Save(ctx context.Context) ([]*BidExpense, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BidExpense, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BidExpenseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BidExpenseCreateBulk) SaveX(ctx context.Context) []*BidExpense {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BidExpenseCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BidExpenseCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
