// Code generated by ent, DO NOT EDIT.

package bidapply

import (
	"cds/bid/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContainsFold(FieldID, id))
}

// BusinessID applies equality check predicate on the "business_id" field. It's identical to BusinessIDEQ.
func BusinessID(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldBusinessID, v))
}

// InstanceID applies equality check predicate on the "instance_id" field. It's identical to InstanceIDEQ.
func InstanceID(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldInstanceID, v))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldProjectID, v))
}

// PurchaserName applies equality check predicate on the "purchaser_name" field. It's identical to PurchaserNameEQ.
func PurchaserName(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldPurchaserName, v))
}

// AgencyName applies equality check predicate on the "agency_name" field. It's identical to AgencyNameEQ.
func AgencyName(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldAgencyName, v))
}

// AgencyContact applies equality check predicate on the "agency_contact" field. It's identical to AgencyContactEQ.
func AgencyContact(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldAgencyContact, v))
}

// OpeningDate applies equality check predicate on the "opening_date" field. It's identical to OpeningDateEQ.
func OpeningDate(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldOpeningDate, v))
}

// NoticeURL applies equality check predicate on the "notice_url" field. It's identical to NoticeURLEQ.
func NoticeURL(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldNoticeURL, v))
}

// BudgetAmount applies equality check predicate on the "budget_amount" field. It's identical to BudgetAmountEQ.
func BudgetAmount(v float64) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldBudgetAmount, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldRemark, v))
}

// ApprovalStatus applies equality check predicate on the "approval_status" field. It's identical to ApprovalStatusEQ.
func ApprovalStatus(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldApprovalStatus, v))
}

// Done applies equality check predicate on the "done" field. It's identical to DoneEQ.
func Done(v bool) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldDone, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldCreateAt, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldCreateBy, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldUpdateBy, v))
}

// BusinessIDEQ applies the EQ predicate on the "business_id" field.
func BusinessIDEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldBusinessID, v))
}

// BusinessIDNEQ applies the NEQ predicate on the "business_id" field.
func BusinessIDNEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldBusinessID, v))
}

// BusinessIDIn applies the In predicate on the "business_id" field.
func BusinessIDIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldBusinessID, vs...))
}

// BusinessIDNotIn applies the NotIn predicate on the "business_id" field.
func BusinessIDNotIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldBusinessID, vs...))
}

// BusinessIDGT applies the GT predicate on the "business_id" field.
func BusinessIDGT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldBusinessID, v))
}

// BusinessIDGTE applies the GTE predicate on the "business_id" field.
func BusinessIDGTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldBusinessID, v))
}

// BusinessIDLT applies the LT predicate on the "business_id" field.
func BusinessIDLT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldBusinessID, v))
}

// BusinessIDLTE applies the LTE predicate on the "business_id" field.
func BusinessIDLTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldBusinessID, v))
}

// BusinessIDContains applies the Contains predicate on the "business_id" field.
func BusinessIDContains(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContains(FieldBusinessID, v))
}

// BusinessIDHasPrefix applies the HasPrefix predicate on the "business_id" field.
func BusinessIDHasPrefix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasPrefix(FieldBusinessID, v))
}

// BusinessIDHasSuffix applies the HasSuffix predicate on the "business_id" field.
func BusinessIDHasSuffix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasSuffix(FieldBusinessID, v))
}

// BusinessIDEqualFold applies the EqualFold predicate on the "business_id" field.
func BusinessIDEqualFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEqualFold(FieldBusinessID, v))
}

// BusinessIDContainsFold applies the ContainsFold predicate on the "business_id" field.
func BusinessIDContainsFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContainsFold(FieldBusinessID, v))
}

// InstanceIDEQ applies the EQ predicate on the "instance_id" field.
func InstanceIDEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldInstanceID, v))
}

// InstanceIDNEQ applies the NEQ predicate on the "instance_id" field.
func InstanceIDNEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldInstanceID, v))
}

// InstanceIDIn applies the In predicate on the "instance_id" field.
func InstanceIDIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldInstanceID, vs...))
}

// InstanceIDNotIn applies the NotIn predicate on the "instance_id" field.
func InstanceIDNotIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldInstanceID, vs...))
}

// InstanceIDGT applies the GT predicate on the "instance_id" field.
func InstanceIDGT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldInstanceID, v))
}

// InstanceIDGTE applies the GTE predicate on the "instance_id" field.
func InstanceIDGTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldInstanceID, v))
}

// InstanceIDLT applies the LT predicate on the "instance_id" field.
func InstanceIDLT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldInstanceID, v))
}

// InstanceIDLTE applies the LTE predicate on the "instance_id" field.
func InstanceIDLTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldInstanceID, v))
}

// InstanceIDContains applies the Contains predicate on the "instance_id" field.
func InstanceIDContains(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContains(FieldInstanceID, v))
}

// InstanceIDHasPrefix applies the HasPrefix predicate on the "instance_id" field.
func InstanceIDHasPrefix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasPrefix(FieldInstanceID, v))
}

// InstanceIDHasSuffix applies the HasSuffix predicate on the "instance_id" field.
func InstanceIDHasSuffix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasSuffix(FieldInstanceID, v))
}

// InstanceIDEqualFold applies the EqualFold predicate on the "instance_id" field.
func InstanceIDEqualFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEqualFold(FieldInstanceID, v))
}

// InstanceIDContainsFold applies the ContainsFold predicate on the "instance_id" field.
func InstanceIDContainsFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContainsFold(FieldInstanceID, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldProjectID, vs...))
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldProjectID, v))
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldProjectID, v))
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldProjectID, v))
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldProjectID, v))
}

// ProjectIDContains applies the Contains predicate on the "project_id" field.
func ProjectIDContains(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContains(FieldProjectID, v))
}

// ProjectIDHasPrefix applies the HasPrefix predicate on the "project_id" field.
func ProjectIDHasPrefix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasPrefix(FieldProjectID, v))
}

// ProjectIDHasSuffix applies the HasSuffix predicate on the "project_id" field.
func ProjectIDHasSuffix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasSuffix(FieldProjectID, v))
}

// ProjectIDEqualFold applies the EqualFold predicate on the "project_id" field.
func ProjectIDEqualFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEqualFold(FieldProjectID, v))
}

// ProjectIDContainsFold applies the ContainsFold predicate on the "project_id" field.
func ProjectIDContainsFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContainsFold(FieldProjectID, v))
}

// PurchaserNameEQ applies the EQ predicate on the "purchaser_name" field.
func PurchaserNameEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldPurchaserName, v))
}

// PurchaserNameNEQ applies the NEQ predicate on the "purchaser_name" field.
func PurchaserNameNEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldPurchaserName, v))
}

// PurchaserNameIn applies the In predicate on the "purchaser_name" field.
func PurchaserNameIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldPurchaserName, vs...))
}

// PurchaserNameNotIn applies the NotIn predicate on the "purchaser_name" field.
func PurchaserNameNotIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldPurchaserName, vs...))
}

// PurchaserNameGT applies the GT predicate on the "purchaser_name" field.
func PurchaserNameGT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldPurchaserName, v))
}

// PurchaserNameGTE applies the GTE predicate on the "purchaser_name" field.
func PurchaserNameGTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldPurchaserName, v))
}

// PurchaserNameLT applies the LT predicate on the "purchaser_name" field.
func PurchaserNameLT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldPurchaserName, v))
}

// PurchaserNameLTE applies the LTE predicate on the "purchaser_name" field.
func PurchaserNameLTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldPurchaserName, v))
}

// PurchaserNameContains applies the Contains predicate on the "purchaser_name" field.
func PurchaserNameContains(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContains(FieldPurchaserName, v))
}

// PurchaserNameHasPrefix applies the HasPrefix predicate on the "purchaser_name" field.
func PurchaserNameHasPrefix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasPrefix(FieldPurchaserName, v))
}

// PurchaserNameHasSuffix applies the HasSuffix predicate on the "purchaser_name" field.
func PurchaserNameHasSuffix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasSuffix(FieldPurchaserName, v))
}

// PurchaserNameIsNil applies the IsNil predicate on the "purchaser_name" field.
func PurchaserNameIsNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldIsNull(FieldPurchaserName))
}

// PurchaserNameNotNil applies the NotNil predicate on the "purchaser_name" field.
func PurchaserNameNotNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldNotNull(FieldPurchaserName))
}

// PurchaserNameEqualFold applies the EqualFold predicate on the "purchaser_name" field.
func PurchaserNameEqualFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEqualFold(FieldPurchaserName, v))
}

// PurchaserNameContainsFold applies the ContainsFold predicate on the "purchaser_name" field.
func PurchaserNameContainsFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContainsFold(FieldPurchaserName, v))
}

// BidTypeEQ applies the EQ predicate on the "bid_type" field.
func BidTypeEQ(v BidType) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldBidType, v))
}

// BidTypeNEQ applies the NEQ predicate on the "bid_type" field.
func BidTypeNEQ(v BidType) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldBidType, v))
}

// BidTypeIn applies the In predicate on the "bid_type" field.
func BidTypeIn(vs ...BidType) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldBidType, vs...))
}

// BidTypeNotIn applies the NotIn predicate on the "bid_type" field.
func BidTypeNotIn(vs ...BidType) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldBidType, vs...))
}

// AgencyNameEQ applies the EQ predicate on the "agency_name" field.
func AgencyNameEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldAgencyName, v))
}

// AgencyNameNEQ applies the NEQ predicate on the "agency_name" field.
func AgencyNameNEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldAgencyName, v))
}

// AgencyNameIn applies the In predicate on the "agency_name" field.
func AgencyNameIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldAgencyName, vs...))
}

// AgencyNameNotIn applies the NotIn predicate on the "agency_name" field.
func AgencyNameNotIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldAgencyName, vs...))
}

// AgencyNameGT applies the GT predicate on the "agency_name" field.
func AgencyNameGT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldAgencyName, v))
}

// AgencyNameGTE applies the GTE predicate on the "agency_name" field.
func AgencyNameGTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldAgencyName, v))
}

// AgencyNameLT applies the LT predicate on the "agency_name" field.
func AgencyNameLT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldAgencyName, v))
}

// AgencyNameLTE applies the LTE predicate on the "agency_name" field.
func AgencyNameLTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldAgencyName, v))
}

// AgencyNameContains applies the Contains predicate on the "agency_name" field.
func AgencyNameContains(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContains(FieldAgencyName, v))
}

// AgencyNameHasPrefix applies the HasPrefix predicate on the "agency_name" field.
func AgencyNameHasPrefix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasPrefix(FieldAgencyName, v))
}

// AgencyNameHasSuffix applies the HasSuffix predicate on the "agency_name" field.
func AgencyNameHasSuffix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasSuffix(FieldAgencyName, v))
}

// AgencyNameIsNil applies the IsNil predicate on the "agency_name" field.
func AgencyNameIsNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldIsNull(FieldAgencyName))
}

// AgencyNameNotNil applies the NotNil predicate on the "agency_name" field.
func AgencyNameNotNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldNotNull(FieldAgencyName))
}

// AgencyNameEqualFold applies the EqualFold predicate on the "agency_name" field.
func AgencyNameEqualFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEqualFold(FieldAgencyName, v))
}

// AgencyNameContainsFold applies the ContainsFold predicate on the "agency_name" field.
func AgencyNameContainsFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContainsFold(FieldAgencyName, v))
}

// AgencyContactEQ applies the EQ predicate on the "agency_contact" field.
func AgencyContactEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldAgencyContact, v))
}

// AgencyContactNEQ applies the NEQ predicate on the "agency_contact" field.
func AgencyContactNEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldAgencyContact, v))
}

// AgencyContactIn applies the In predicate on the "agency_contact" field.
func AgencyContactIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldAgencyContact, vs...))
}

// AgencyContactNotIn applies the NotIn predicate on the "agency_contact" field.
func AgencyContactNotIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldAgencyContact, vs...))
}

// AgencyContactGT applies the GT predicate on the "agency_contact" field.
func AgencyContactGT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldAgencyContact, v))
}

// AgencyContactGTE applies the GTE predicate on the "agency_contact" field.
func AgencyContactGTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldAgencyContact, v))
}

// AgencyContactLT applies the LT predicate on the "agency_contact" field.
func AgencyContactLT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldAgencyContact, v))
}

// AgencyContactLTE applies the LTE predicate on the "agency_contact" field.
func AgencyContactLTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldAgencyContact, v))
}

// AgencyContactContains applies the Contains predicate on the "agency_contact" field.
func AgencyContactContains(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContains(FieldAgencyContact, v))
}

// AgencyContactHasPrefix applies the HasPrefix predicate on the "agency_contact" field.
func AgencyContactHasPrefix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasPrefix(FieldAgencyContact, v))
}

// AgencyContactHasSuffix applies the HasSuffix predicate on the "agency_contact" field.
func AgencyContactHasSuffix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasSuffix(FieldAgencyContact, v))
}

// AgencyContactIsNil applies the IsNil predicate on the "agency_contact" field.
func AgencyContactIsNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldIsNull(FieldAgencyContact))
}

// AgencyContactNotNil applies the NotNil predicate on the "agency_contact" field.
func AgencyContactNotNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldNotNull(FieldAgencyContact))
}

// AgencyContactEqualFold applies the EqualFold predicate on the "agency_contact" field.
func AgencyContactEqualFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEqualFold(FieldAgencyContact, v))
}

// AgencyContactContainsFold applies the ContainsFold predicate on the "agency_contact" field.
func AgencyContactContainsFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContainsFold(FieldAgencyContact, v))
}

// OpeningDateEQ applies the EQ predicate on the "opening_date" field.
func OpeningDateEQ(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldOpeningDate, v))
}

// OpeningDateNEQ applies the NEQ predicate on the "opening_date" field.
func OpeningDateNEQ(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldOpeningDate, v))
}

// OpeningDateIn applies the In predicate on the "opening_date" field.
func OpeningDateIn(vs ...time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldOpeningDate, vs...))
}

// OpeningDateNotIn applies the NotIn predicate on the "opening_date" field.
func OpeningDateNotIn(vs ...time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldOpeningDate, vs...))
}

// OpeningDateGT applies the GT predicate on the "opening_date" field.
func OpeningDateGT(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldOpeningDate, v))
}

// OpeningDateGTE applies the GTE predicate on the "opening_date" field.
func OpeningDateGTE(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldOpeningDate, v))
}

// OpeningDateLT applies the LT predicate on the "opening_date" field.
func OpeningDateLT(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldOpeningDate, v))
}

// OpeningDateLTE applies the LTE predicate on the "opening_date" field.
func OpeningDateLTE(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldOpeningDate, v))
}

// OpeningDateIsNil applies the IsNil predicate on the "opening_date" field.
func OpeningDateIsNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldIsNull(FieldOpeningDate))
}

// OpeningDateNotNil applies the NotNil predicate on the "opening_date" field.
func OpeningDateNotNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldNotNull(FieldOpeningDate))
}

// NoticeURLEQ applies the EQ predicate on the "notice_url" field.
func NoticeURLEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldNoticeURL, v))
}

// NoticeURLNEQ applies the NEQ predicate on the "notice_url" field.
func NoticeURLNEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldNoticeURL, v))
}

// NoticeURLIn applies the In predicate on the "notice_url" field.
func NoticeURLIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldNoticeURL, vs...))
}

// NoticeURLNotIn applies the NotIn predicate on the "notice_url" field.
func NoticeURLNotIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldNoticeURL, vs...))
}

// NoticeURLGT applies the GT predicate on the "notice_url" field.
func NoticeURLGT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldNoticeURL, v))
}

// NoticeURLGTE applies the GTE predicate on the "notice_url" field.
func NoticeURLGTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldNoticeURL, v))
}

// NoticeURLLT applies the LT predicate on the "notice_url" field.
func NoticeURLLT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldNoticeURL, v))
}

// NoticeURLLTE applies the LTE predicate on the "notice_url" field.
func NoticeURLLTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldNoticeURL, v))
}

// NoticeURLContains applies the Contains predicate on the "notice_url" field.
func NoticeURLContains(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContains(FieldNoticeURL, v))
}

// NoticeURLHasPrefix applies the HasPrefix predicate on the "notice_url" field.
func NoticeURLHasPrefix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasPrefix(FieldNoticeURL, v))
}

// NoticeURLHasSuffix applies the HasSuffix predicate on the "notice_url" field.
func NoticeURLHasSuffix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasSuffix(FieldNoticeURL, v))
}

// NoticeURLIsNil applies the IsNil predicate on the "notice_url" field.
func NoticeURLIsNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldIsNull(FieldNoticeURL))
}

// NoticeURLNotNil applies the NotNil predicate on the "notice_url" field.
func NoticeURLNotNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldNotNull(FieldNoticeURL))
}

// NoticeURLEqualFold applies the EqualFold predicate on the "notice_url" field.
func NoticeURLEqualFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEqualFold(FieldNoticeURL, v))
}

// NoticeURLContainsFold applies the ContainsFold predicate on the "notice_url" field.
func NoticeURLContainsFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContainsFold(FieldNoticeURL, v))
}

// BudgetAmountEQ applies the EQ predicate on the "budget_amount" field.
func BudgetAmountEQ(v float64) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldBudgetAmount, v))
}

// BudgetAmountNEQ applies the NEQ predicate on the "budget_amount" field.
func BudgetAmountNEQ(v float64) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldBudgetAmount, v))
}

// BudgetAmountIn applies the In predicate on the "budget_amount" field.
func BudgetAmountIn(vs ...float64) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldBudgetAmount, vs...))
}

// BudgetAmountNotIn applies the NotIn predicate on the "budget_amount" field.
func BudgetAmountNotIn(vs ...float64) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldBudgetAmount, vs...))
}

// BudgetAmountGT applies the GT predicate on the "budget_amount" field.
func BudgetAmountGT(v float64) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldBudgetAmount, v))
}

// BudgetAmountGTE applies the GTE predicate on the "budget_amount" field.
func BudgetAmountGTE(v float64) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldBudgetAmount, v))
}

// BudgetAmountLT applies the LT predicate on the "budget_amount" field.
func BudgetAmountLT(v float64) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldBudgetAmount, v))
}

// BudgetAmountLTE applies the LTE predicate on the "budget_amount" field.
func BudgetAmountLTE(v float64) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldBudgetAmount, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContainsFold(FieldRemark, v))
}

// AttachmentsIsNil applies the IsNil predicate on the "attachments" field.
func AttachmentsIsNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldIsNull(FieldAttachments))
}

// AttachmentsNotNil applies the NotNil predicate on the "attachments" field.
func AttachmentsNotNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldNotNull(FieldAttachments))
}

// ApprovalStatusEQ applies the EQ predicate on the "approval_status" field.
func ApprovalStatusEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldApprovalStatus, v))
}

// ApprovalStatusNEQ applies the NEQ predicate on the "approval_status" field.
func ApprovalStatusNEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldApprovalStatus, v))
}

// ApprovalStatusIn applies the In predicate on the "approval_status" field.
func ApprovalStatusIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldApprovalStatus, vs...))
}

// ApprovalStatusNotIn applies the NotIn predicate on the "approval_status" field.
func ApprovalStatusNotIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldApprovalStatus, vs...))
}

// ApprovalStatusGT applies the GT predicate on the "approval_status" field.
func ApprovalStatusGT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldApprovalStatus, v))
}

// ApprovalStatusGTE applies the GTE predicate on the "approval_status" field.
func ApprovalStatusGTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldApprovalStatus, v))
}

// ApprovalStatusLT applies the LT predicate on the "approval_status" field.
func ApprovalStatusLT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldApprovalStatus, v))
}

// ApprovalStatusLTE applies the LTE predicate on the "approval_status" field.
func ApprovalStatusLTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldApprovalStatus, v))
}

// ApprovalStatusContains applies the Contains predicate on the "approval_status" field.
func ApprovalStatusContains(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContains(FieldApprovalStatus, v))
}

// ApprovalStatusHasPrefix applies the HasPrefix predicate on the "approval_status" field.
func ApprovalStatusHasPrefix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasPrefix(FieldApprovalStatus, v))
}

// ApprovalStatusHasSuffix applies the HasSuffix predicate on the "approval_status" field.
func ApprovalStatusHasSuffix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasSuffix(FieldApprovalStatus, v))
}

// ApprovalStatusEqualFold applies the EqualFold predicate on the "approval_status" field.
func ApprovalStatusEqualFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEqualFold(FieldApprovalStatus, v))
}

// ApprovalStatusContainsFold applies the ContainsFold predicate on the "approval_status" field.
func ApprovalStatusContainsFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContainsFold(FieldApprovalStatus, v))
}

// DoneEQ applies the EQ predicate on the "done" field.
func DoneEQ(v bool) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldDone, v))
}

// DoneNEQ applies the NEQ predicate on the "done" field.
func DoneNEQ(v bool) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldDone, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldCreateAt, v))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByContains applies the Contains predicate on the "create_by" field.
func CreateByContains(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContains(FieldCreateBy, v))
}

// CreateByHasPrefix applies the HasPrefix predicate on the "create_by" field.
func CreateByHasPrefix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasPrefix(FieldCreateBy, v))
}

// CreateByHasSuffix applies the HasSuffix predicate on the "create_by" field.
func CreateByHasSuffix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasSuffix(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldNotNull(FieldCreateBy))
}

// CreateByEqualFold applies the EqualFold predicate on the "create_by" field.
func CreateByEqualFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEqualFold(FieldCreateBy, v))
}

// CreateByContainsFold applies the ContainsFold predicate on the "create_by" field.
func CreateByContainsFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContainsFold(FieldCreateBy, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldUpdateAt, v))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...string) predicate.BidApply {
	return predicate.BidApply(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByContains applies the Contains predicate on the "update_by" field.
func UpdateByContains(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContains(FieldUpdateBy, v))
}

// UpdateByHasPrefix applies the HasPrefix predicate on the "update_by" field.
func UpdateByHasPrefix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasPrefix(FieldUpdateBy, v))
}

// UpdateByHasSuffix applies the HasSuffix predicate on the "update_by" field.
func UpdateByHasSuffix(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldHasSuffix(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.BidApply {
	return predicate.BidApply(sql.FieldNotNull(FieldUpdateBy))
}

// UpdateByEqualFold applies the EqualFold predicate on the "update_by" field.
func UpdateByEqualFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldEqualFold(FieldUpdateBy, v))
}

// UpdateByContainsFold applies the ContainsFold predicate on the "update_by" field.
func UpdateByContainsFold(v string) predicate.BidApply {
	return predicate.BidApply(sql.FieldContainsFold(FieldUpdateBy, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.BidApply {
	return predicate.BidApply(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.BidProject) predicate.BidApply {
	return predicate.BidApply(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BidApply) predicate.BidApply {
	return predicate.BidApply(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BidApply) predicate.BidApply {
	return predicate.BidApply(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BidApply) predicate.BidApply {
	return predicate.BidApply(sql.NotPredicates(p))
}
